// koffee 1.4.0

/*
00     00   0000000   000   000  00000000  000   000  000  000   000
000   000  000   000  000   000  000       000 0 000  000  0000  000
000000000  000   000   000 000   0000000   000000000  000  000 0 000
000 0 000  000   000     000     000       000   000  000  000  0000
000   000   0000000       0      00000000  00     00  000  000   000
 */
var Bounds, klog, moveWin, os, ref, slash, wxw;

ref = require('kxk'), slash = ref.slash, os = ref.os, klog = ref.klog;

Bounds = require('./bounds');

wxw = require('wxw');

moveWin = function(dir) {
    var ar, b, base, d, h, info, ko, ref1, sb, screen, sl, sr, st, w, wr, x, y;
    if (os.platform() === 'darwin') {
        ar = {
            w: Bounds.screenWidth,
            h: Bounds.screenHeight
        };
    } else {
        screen = wxw('screen', 'user');
        ar = {
            w: screen.width,
            h: screen.height
        };
    }
    info = wxw('info', 'top')[0];
    if (info) {
        base = slash.base(info.path);
        if (base === 'kachel' || base === 'kappo') {
            return;
        }
        b = 0;
        if (os.platform() === 'win32') {
            if (base === 'electron' || base === 'ko' || base === 'konrad' || base === 'clippo' || base === 'klog' || base === 'kaligraf' || base === 'kalk' || base === 'uniko' || base === 'knot' || base === 'space' || base === 'ruler' || base === 'keks') {
                b = 0;
            } else if (base === 'devenv') {
                b = -1;
            } else {
                b = 10;
            }
        }
        wr = {
            x: info.x,
            y: info.y,
            w: info.width,
            h: info.height
        };
        ko = 216;
        d = 2 * b;
        ref1 = (function() {
            switch (dir) {
                case 'left':
                    return [-b, 0, ar.w / 2 + d, ar.h + b];
                case 'right':
                    return [ar.w / 2 - b, 0, ar.w / 2 + d - ko, ar.h + b];
                case 'down':
                    return [ar.w / 6 - b, 0, 2 / 3 * ar.w + d, ar.h + b];
                case 'up':
                    return [-b, 0, ar.w + d - ko, ar.h + b];
                case 'topleft':
                    return [-b, 0, ar.w / 2 + d, ar.h / 2];
                case 'botleft':
                    return [-b, ar.h / 2 - b, ar.w / 2 + d, ar.h / 2 + d];
                case 'topright':
                    return [ar.w / 2 - b, 0, ar.w / 2 + d - ko, ar.h / 2];
                case 'botright':
                    return [ar.w / 2 - b, ar.h / 2 - b, ar.w / 2 + d - ko, ar.h / 2 + d];
                case 'top':
                    return [ar.w / 6 - b, 0, 2 * ar.w / 3 + d, ar.h / 2];
                case 'bot':
                    return [ar.w / 6 - b, ar.h / 2 - b, 2 * ar.w / 3 + d, ar.h / 2 + d];
            }
        })(), x = ref1[0], y = ref1[1], w = ref1[2], h = ref1[3];
        sl = 20 > Math.abs(wr.x - x);
        sr = 20 > Math.abs(wr.x + wr.w - (x + w));
        st = 20 > Math.abs(wr.y - y);
        sb = 20 > Math.abs(wr.y + wr.h - (y + h));
        if (sl && sr && st && sb) {
            switch (dir) {
                case 'left':
                    w = ar.w / 3 + d;
                    break;
                case 'right':
                    w = ar.w / 2 + d;
                    break;
                case 'down':
                    x = ar.w / 3 - b;
                    w = 2 / 3 * ar.w + d - ko;
                    break;
                case 'up':
                    x = -b;
                    w = ar.w + d;
                    break;
                case 'topleft':
                    w = ar.w / 3 + d;
                    break;
                case 'botleft':
                    w = ar.w / 3 + d;
                    break;
                case 'topright':
                    x = 2 * ar.w / 3 - b;
                    w = ar.w / 3 + d;
                    break;
                case 'botright':
                    x = 2 * ar.w / 3 - b;
                    w = ar.w / 3 + d;
                    break;
                case 'top':
                    x = ar.w / 3 - b;
                    w = ar.w / 3 + d;
                    break;
                case 'bot':
                    x = ar.w / 3 - b;
                    w = ar.w / 3 + d;
            }
        }
        return wxw('bounds', info.id, parseInt(x), parseInt(y), parseInt(w), parseInt(h));
    } else {
        return klog('no info!');
    }
};

module.exports = moveWin;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/movewin.coffee