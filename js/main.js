// koffee 1.3.0

/*
00     00   0000000   000  000   000
000   000  000   000  000  0000  000
000000000  000000000  000  000 0 000
000 0 000  000   000  000  000  0000
000   000  000   000  000  000   000
 */
var Bounds, BrowserWindow, KachelApp, activeWin, app, clamp, dragging, electron, empty, focusKachel, hoverKachel, infos, kachelSize, kachelSizes, kacheln, klog, kpos, mainWin, mousePos, mouseTimer, neighborWin, onKachelClose, onWinBlur, onWinFocus, os, post, prefs, providers, raiseWin, raised, raising, ref, setKachelBounds, shortcut, slash, updateInfos, winEvents, winWithId, wins;

ref = require('kxk'), post = ref.post, prefs = ref.prefs, slash = ref.slash, clamp = ref.clamp, empty = ref.empty, klog = ref.klog, kpos = ref.kpos, app = ref.app, os = ref.os;

Bounds = require('./bounds');

electron = require('electron');

BrowserWindow = electron.BrowserWindow;

kachelSizes = [72, 108, 144, 216];

kachelSize = 1;

dragging = false;

mainWin = null;

focusKachel = null;

hoverKachel = null;

mouseTimer = null;

mousePos = kpos(0, 0);

infos = [];

providers = {};

updateInfos = function() {
    return infos = Bounds.getInfos(kacheln());
};

setKachelBounds = function(kachel, b) {
    Bounds.setBounds(kachel, b);
    return updateInfos();
};

winEvents = function(win) {
    win.on('focus', onWinFocus);
    win.on('blur', onWinBlur);
    return win.setHasShadow(false);
};

shortcut = slash.win() && 'ctrl+alt+k' || 'command+alt+k';

KachelApp = new app({
    dir: __dirname,
    pkg: require('../package.json'),
    shortcut: shortcut,
    index: 'mainwin.html',
    icon: '../img/app.ico',
    tray: '../img/menu.png',
    about: '../img/about.png',
    minWidth: 50,
    minHeight: 50,
    maxWidth: 50,
    maxHeight: 50,
    width: 50,
    height: 50,
    acceptFirstMouse: true,
    prefsSeperator: '▸',
    onOtherInstance: function() {
        return post.emit('raiseKacheln');
    },
    onShortcut: function() {
        return post.emit('raiseKacheln');
    },
    onQuit: function() {
        return clearInterval(mouseTimer);
    },
    resizable: false,
    maximizable: false,
    saveBounds: false,
    onWinReady: (function(_this) {
        return function(win) {
            var checkMouse, kachelData, kachelId, ref1;
            mainWin = win;
            winEvents(win);
            ref1 = prefs.get('kacheln', {});
            for (kachelId in ref1) {
                kachelData = ref1[kachelId];
                if (kachelId !== 'appl' && kachelId !== 'folder' && kachelId !== 'file' && kachelId !== 'konrad') {
                    post.emit('newKachel', kachelData);
                }
            }
            checkMouse = function() {
                var k, oldPos;
                if (dragging) {
                    return;
                }
                oldPos = kpos(mousePos != null ? mousePos : {
                    x: 0,
                    y: 0
                });
                mousePos = electron.screen.getCursorScreenPoint();
                if (oldPos.distSquare(mousePos) < 10) {
                    return;
                }
                if ((infos != null ? infos.kachelBounds : void 0) != null) {
                    if (!Bounds.contains(infos.kachelBounds, mousePos)) {
                        return;
                    }
                }
                if (k = Bounds.kachelAtPos(infos, mousePos)) {
                    if (!hoverKachel || hoverKachel !== k.kachel.id) {
                        if (hoverKachel) {
                            post.toWin(hoverKachel, 'leave');
                        }
                        hoverKachel = k.kachel.id;
                        if ((focusKachel != null ? focusKachel.isFocused() : void 0) && hoverKachel !== focusKachel.id) {
                            focusKachel = winWithId(hoverKachel);
                            return focusKachel.focus();
                        } else {
                            return post.toWin(hoverKachel, 'hover');
                        }
                    }
                }
            };
            return mouseTimer = setInterval(checkMouse, 50);
        };
    })(this)
});

post.on('newKachel', function(arg) {
    var data, html, ref1, ref2, win;
    html = (ref1 = arg.html) != null ? ref1 : 'default', data = (ref2 = arg.data) != null ? ref2 : null;
    win = new electron.BrowserWindow({
        movable: true,
        transparent: true,
        autoHideMenuBar: true,
        acceptFirstMouse: true,
        transparent: true,
        hasShadow: false,
        frame: false,
        resizable: false,
        maximizable: false,
        minimizable: false,
        fullscreen: false,
        show: false,
        fullscreenenable: false,
        backgroundColor: '#181818',
        width: kachelSizes[kachelSize],
        height: kachelSizes[kachelSize],
        webPreferences: {
            nodeIntegration: true
        }
    });
    win.loadURL("file://" + __dirname + "/../js/" + html + ".html");
    win.webContents.on('dom-ready', function(event) {
        if (data != null) {
            post.toWin(win.id, 'initData', data);
        }
        return win.show();
    });
    win.on('close', onKachelClose);
    winEvents(win);
    return win;
});

post.on('dragStart', function(wid) {
    return dragging = true;
});

post.on('dragStop', function(wid) {
    return dragging = false;
});

post.on('snapKachel', function(wid) {
    var kachel;
    updateInfos();
    kachel = winWithId(wid);
    return setKachelBounds(kachel, Bounds.snap(infos, kachel));
});

post.on('kachelMove', function(dir, wid) {
    var b, gap, info, kachel, nb, neighbor, r;
    kachel = winWithId(wid);
    b = Bounds.validBounds(kachel);
    nb = {
        x: b.x,
        y: b.y,
        width: b.width,
        height: b.height
    };
    switch (dir) {
        case 'up':
            nb.y = b.y - b.height;
            break;
        case 'down':
            nb.y = b.y + b.height;
            break;
        case 'right':
            nb.x = b.x + b.width;
            break;
        case 'left':
            nb.x = b.x - b.width;
    }
    if (info = Bounds.overlapInfo(infos, nb)) {
        gap = function(s, d, f, b, o) {
            var g;
            g = f(b, o);
            if (g > 0) {
                nb[d] = b[d] + s * g;
                setKachelBounds(kachel, nb);
                return true;
            }
        };
        r = (function() {
            switch (dir) {
                case 'up':
                    return gap(-1, 'y', Bounds.gapUp, b, info.bounds);
                case 'down':
                    return gap(+1, 'y', Bounds.gapDown, b, info.bounds);
                case 'right':
                    return gap(+1, 'x', Bounds.gapRight, b, info.bounds);
                case 'left':
                    return gap(-1, 'x', Bounds.gapLeft, b, info.bounds);
            }
        })();
        if (r) {
            return;
        }
    }
    if (neighbor = Bounds.nextNeighbor(infos, kachel, dir)) {
        if (neighbor.bounds.width === b.width) {
            Bounds.setBounds(kachel, neighbor.bounds);
            Bounds.setBounds(neighbor.kachel, b);
            updateInfos();
            return;
        }
    }
    return setKachelBounds(kachel, Bounds.isOnScreen(nb) && nb || b);
});

post.on('kachelBounds', function(wid, kachelId) {
    var bounds;
    bounds = prefs.get("bounds▸" + kachelId);
    if (bounds != null) {
        return setKachelBounds(winWithId(wid), bounds);
    }
});

post.on('kachelSize', function(action, wid) {
    var b, size, w;
    size = 0;
    while (kachelSizes[size] < winWithId(wid).getBounds().width) {
        size++;
    }
    switch (action) {
        case 'increase':
            size += 1;
            if (size > kachelSizes.length - 1) {
                return;
            }
            break;
        case 'decrease':
            size -= 1;
            if (size < 0) {
                return;
            }
            break;
        case 'reset':
            if (size === 1) {
                return;
            }
            size = 1;
    }
    w = winWithId(wid);
    b = w.getBounds();
    b.width = kachelSizes[size];
    b.height = kachelSizes[size];
    return setKachelBounds(w, Bounds.snap(infos, w, b));
});

raised = false;

raising = false;

post.on('raiseKacheln', function() {
    var i, j, l, len, len1, len2, ref1, ref2, ref3, win;
    ref1 = kacheln();
    for (i = 0, len = ref1.length; i < len; i++) {
        win = ref1[i];
        if (!win.isVisible()) {
            raised = false;
            break;
        }
    }
    raising = true;
    if (raised) {
        ref2 = kacheln();
        for (j = 0, len1 = ref2.length; j < len1; j++) {
            win = ref2[j];
            win.hide();
        }
        raised = false;
        raising = false;
        return;
    }
    ref3 = kacheln().concat([mainWin]);
    for (l = 0, len2 = ref3.length; l < len2; l++) {
        win = ref3[l];
        if (os.platform() === 'win32') {
            raiseWin(win);
        } else {
            win.showInactive();
        }
    }
    raised = true;
    raiseWin(focusKachel != null ? focusKachel : mainWin);
    return raising = false;
});

raiseWin = function(win) {
    win.showInactive();
    return win.focus();
};

post.on('quit', KachelApp.quitApp);

post.on('focusKachel', function(winId, direction) {
    return raiseWin(neighborWin(winId, direction));
});

post.on('kachelFocus', function(winId) {
    if (winId !== mainWin.id && !raising) {
        return focusKachel = winWithId(winId);
    }
});

onKachelClose = function(event) {
    if (focusKachel === event.sender) {
        focusKachel = null;
    }
    return setTimeout(updateInfos, 200);
};

onWinBlur = function(event) {
    if (!raising && event.sender === focusKachel) {
        return raised = false;
    }
};

onWinFocus = function(event) {
    if (!raising) {
        return raised = true;
    }
};

wins = function() {
    return BrowserWindow.getAllWindows().sort(function(a, b) {
        return a.id - b.id;
    });
};

activeWin = function() {
    return BrowserWindow.getFocusedWindow();
};

kacheln = function() {
    return wins().filter(function(w) {
        return w !== mainWin;
    });
};

winWithId = function(id) {
    return BrowserWindow.fromId(id);
};

neighborWin = function(winId, direction) {
    var kachel, kb, ks;
    kachel = winWithId(winId);
    kb = kachel.getBounds();
    ks = kacheln().filter(function(k) {
        return k !== kachel;
    });
    ks = ks.filter(function(k) {
        var b;
        b = k.getBounds();
        switch (direction) {
            case 'right':
                return b.x >= kb.x + kb.width;
            case 'down':
                return b.y >= kb.y + kb.height;
            case 'left':
                return kb.x >= b.x + b.width;
            case 'up':
                return kb.y >= b.y + b.height;
        }
    });
    if (empty(ks)) {
        return kachel;
    }
    ks.sort(function(a, b) {
        var ab, bb;
        ab = a.getBounds();
        bb = b.getBounds();
        switch (direction) {
            case 'right':
                a = Math.abs((kb.y + kb.height / 2) - (ab.y + ab.height / 2)) + (ab.x - kb.x);
                b = Math.abs((kb.y + kb.height / 2) - (bb.y + bb.height / 2)) + (bb.x - kb.x);
                break;
            case 'left':
                a = Math.abs((kb.y + kb.height / 2) - (ab.y + ab.height / 2)) + (kb.x - ab.x);
                b = Math.abs((kb.y + kb.height / 2) - (bb.y + bb.height / 2)) + (kb.x - bb.x);
                break;
            case 'down':
                a = Math.abs((kb.x + kb.width / 2) - (ab.x + ab.width / 2)) + (ab.y - kb.y);
                b = Math.abs((kb.x + kb.width / 2) - (bb.x + bb.width / 2)) + (bb.y - kb.y);
                break;
            case 'up':
                a = Math.abs((kb.x + kb.width / 2) - (ab.x + ab.width / 2)) + (kb.y - ab.y);
                b = Math.abs((kb.x + kb.width / 2) - (bb.x + bb.width / 2)) + (kb.y - bb.y);
        }
        return a - b;
    });
    return ks[0];
};

post.on('requestData', function(provider, wid) {
    if (!providers[provider]) {
        providers[provider] = new (require("./" + provider));
    }
    return providers[provider].addReceiver(wid);
});

post.onGet('getData', function(provider) {
    var ref1;
    return (ref1 = providers[provider]) != null ? ref1.getData() : void 0;
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIuIiwic291cmNlcyI6WyIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7OztBQUFBLElBQUE7O0FBUUEsTUFBNEQsT0FBQSxDQUFRLEtBQVIsQ0FBNUQsRUFBRSxlQUFGLEVBQVEsaUJBQVIsRUFBZSxpQkFBZixFQUFzQixpQkFBdEIsRUFBNkIsaUJBQTdCLEVBQW9DLGVBQXBDLEVBQTBDLGVBQTFDLEVBQWdELGFBQWhELEVBQXFEOztBQUVyRCxNQUFBLEdBQVcsT0FBQSxDQUFRLFVBQVI7O0FBQ1gsUUFBQSxHQUFXLE9BQUEsQ0FBUSxVQUFSOztBQUNYLGFBQUEsR0FBZ0IsUUFBUSxDQUFDOztBQUV6QixXQUFBLEdBQWMsQ0FBQyxFQUFELEVBQUksR0FBSixFQUFRLEdBQVIsRUFBWSxHQUFaOztBQUNkLFVBQUEsR0FBYzs7QUFDZCxRQUFBLEdBQWM7O0FBQ2QsT0FBQSxHQUFjOztBQUNkLFdBQUEsR0FBYzs7QUFDZCxXQUFBLEdBQWM7O0FBQ2QsVUFBQSxHQUFjOztBQUNkLFFBQUEsR0FBYyxJQUFBLENBQUssQ0FBTCxFQUFPLENBQVA7O0FBQ2QsS0FBQSxHQUFjOztBQUNkLFNBQUEsR0FBYzs7QUFFZCxXQUFBLEdBQWMsU0FBQTtXQUFHLEtBQUEsR0FBUSxNQUFNLENBQUMsUUFBUCxDQUFnQixPQUFBLENBQUEsQ0FBaEI7QUFBWDs7QUFFZCxlQUFBLEdBQWtCLFNBQUMsTUFBRCxFQUFTLENBQVQ7SUFDZCxNQUFNLENBQUMsU0FBUCxDQUFpQixNQUFqQixFQUF5QixDQUF6QjtXQUNBLFdBQUEsQ0FBQTtBQUZjOztBQUlsQixTQUFBLEdBQVksU0FBQyxHQUFEO0lBQ1IsR0FBRyxDQUFDLEVBQUosQ0FBTyxPQUFQLEVBQWdCLFVBQWhCO0lBQ0EsR0FBRyxDQUFDLEVBQUosQ0FBTyxNQUFQLEVBQWdCLFNBQWhCO1dBQ0EsR0FBRyxDQUFDLFlBQUosQ0FBaUIsS0FBakI7QUFIUTs7QUFLWixRQUFBLEdBQVcs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QWtDZCxJQUFJLENBQUMsRUFBTCxDQUFRLGFBQVIsRUFBc0IsU0FBQyxRQUFELEVBQVcsR0FBWDtJQUVsQixJQUFHLENBQUksU0FBVSxDQUFBLFFBQUEsQ0FBakI7UUFDSSxTQUFVLENBQUEsUUFBQSxDQUFWLEdBQXNCLElBQUksQ0FBQyxPQUFBLENBQVEsSUFBQSxHQUFLLFFBQWIsQ0FBRCxFQUQ5Qjs7V0FHQSxTQUFVLENBQUEsUUFBQSxDQUFTLENBQUMsV0FBcEIsQ0FBZ0MsR0FBaEM7QUFMa0IsQ0FBdEI7O0FBT0EsSUFBSSxDQUFDLEtBQUwsQ0FBVyxTQUFYLEVBQXFCLFNBQUMsUUFBRDtBQUVqQixRQUFBO3NEQUFtQixDQUFFLE9BQXJCLENBQUE7QUFGaUIsQ0FBckIiLCJzb3VyY2VzQ29udGVudCI6WyIjIyNcbjAwICAgICAwMCAgIDAwMDAwMDAgICAwMDAgIDAwMCAgIDAwMFxuMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgMDAwMCAgMDAwXG4wMDAwMDAwMDAgIDAwMDAwMDAwMCAgMDAwICAwMDAgMCAwMDBcbjAwMCAwIDAwMCAgMDAwICAgMDAwICAwMDAgIDAwMCAgMDAwMFxuMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgMDAwICAgMDAwXG4jIyNcblxueyBwb3N0LCBwcmVmcywgc2xhc2gsIGNsYW1wLCBlbXB0eSwga2xvZywga3BvcywgYXBwLCBvcyB9ID0gcmVxdWlyZSAna3hrJ1xuXG5Cb3VuZHMgICA9IHJlcXVpcmUgJy4vYm91bmRzJ1xuZWxlY3Ryb24gPSByZXF1aXJlICdlbGVjdHJvbidcbkJyb3dzZXJXaW5kb3cgPSBlbGVjdHJvbi5Ccm93c2VyV2luZG93XG5cbmthY2hlbFNpemVzID0gWzcyLDEwOCwxNDQsMjE2XVxua2FjaGVsU2l6ZSAgPSAxXG5kcmFnZ2luZyAgICA9IGZhbHNlXG5tYWluV2luICAgICA9IG51bGxcbmZvY3VzS2FjaGVsID0gbnVsbFxuaG92ZXJLYWNoZWwgPSBudWxsXG5tb3VzZVRpbWVyICA9IG51bGxcbm1vdXNlUG9zICAgID0ga3BvcyAwLDBcbmluZm9zICAgICAgID0gW11cbnByb3ZpZGVycyAgID0ge31cblxudXBkYXRlSW5mb3MgPSAtPiBpbmZvcyA9IEJvdW5kcy5nZXRJbmZvcyBrYWNoZWxuKClcblxuc2V0S2FjaGVsQm91bmRzID0gKGthY2hlbCwgYikgLT5cbiAgICBCb3VuZHMuc2V0Qm91bmRzIGthY2hlbCwgYlxuICAgIHVwZGF0ZUluZm9zKClcblxud2luRXZlbnRzID0gKHdpbikgLT5cbiAgICB3aW4ub24gJ2ZvY3VzJyAgb25XaW5Gb2N1c1xuICAgIHdpbi5vbiAnYmx1cicgICBvbldpbkJsdXJcbiAgICB3aW4uc2V0SGFzU2hhZG93IGZhbHNlXG4gICAgXG5zaG9ydGN1dCA9IHNsYXNoLndpbigpIGFuZCAnY3RybCthbHQraycgb3IgJ2NvbW1hbmQrYWx0K2snXG5cbkthY2hlbEFwcCA9IG5ldyBhcHBcbiAgICBkaXI6ICAgICAgICAgICAgICAgIF9fZGlybmFtZVxuICAgIHBrZzogICAgICAgICAgICAgICAgcmVxdWlyZSAnLi4vcGFja2FnZS5qc29uJ1xuICAgIHNob3J0Y3V0OiAgICAgICAgICAgc2hvcnRjdXRcbiAgICBpbmRleDogICAgICAgICAgICAgICdtYWlud2luLmh0bWwnXG4gICAgaWNvbjogICAgICAgICAgICAgICAnLi4vaW1nL2FwcC5pY28nXG4gICAgdHJheTogICAgICAgICAgICAgICAnLi4vaW1nL21lbnUucG5nJ1xuICAgIGFib3V0OiAgICAgICAgICAgICAgJy4uL2ltZy9hYm91dC5wbmcnXG4gICAgbWluV2lkdGg6ICAgICAgICAgICA1MFxuICAgIG1pbkhlaWdodDogICAgICAgICAgNTBcbiAgICBtYXhXaWR0aDogICAgICAgICAgIDUwXG4gICAgbWF4SGVpZ2h0OiAgICAgICAgICA1MFxuICAgIHdpZHRoOiAgICAgICAgICAgICAgNTBcbiAgICBoZWlnaHQ6ICAgICAgICAgICAgIDUwXG4gICAgYWNjZXB0Rmlyc3RNb3VzZTogICB0cnVlXG4gICAgcHJlZnNTZXBlcmF0b3I6ICAgICAn4pa4J1xuICAgIG9uT3RoZXJJbnN0YW5jZTogICAgLT4gcG9zdC5lbWl0ICdyYWlzZUthY2hlbG4nXG4gICAgb25TaG9ydGN1dDogICAgICAgICAtPiBwb3N0LmVtaXQgJ3JhaXNlS2FjaGVsbidcbiAgICBvblF1aXQ6ICAgICAgICAgICAgIC0+IGNsZWFySW50ZXJ2YWwgbW91c2VUaW1lclxuICAgIHJlc2l6YWJsZTogICAgICAgICAgZmFsc2VcbiAgICBtYXhpbWl6YWJsZTogICAgICAgIGZhbHNlXG4gICAgc2F2ZUJvdW5kczogICAgICAgICBmYWxzZVxuICAgIG9uV2luUmVhZHk6ICh3aW4pID0+XG4gICAgICAgIFxuICAgICAgICBtYWluV2luID0gd2luXG4gICAgICAgIHdpbkV2ZW50cyB3aW5cbiAgICAgICAgXG4gICAgICAgIGZvciBrYWNoZWxJZCxrYWNoZWxEYXRhIG9mIHByZWZzLmdldCAna2FjaGVsbicge31cbiAgICAgICAgICAgIGlmIGthY2hlbElkIG5vdCBpbiBbJ2FwcGwnICdmb2xkZXInICdmaWxlJyAna29ucmFkJ11cbiAgICAgICAgICAgICAgICBwb3N0LmVtaXQgJ25ld0thY2hlbCcga2FjaGVsRGF0YVxuXG4gICAgICAgICMgMDAgICAgIDAwICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgIDAwMDAwMDAgIDAwMDAwMDAwICBcbiAgICAgICAgIyAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAgICAgIFxuICAgICAgICAjIDAwMDAwMDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMDAwMDAgICAwMDAwMDAwICAgXG4gICAgICAgICMgMDAwIDAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgICAgICAwMDAgIDAwMCAgICAgICBcbiAgICAgICAgIyAwMDAgICAwMDAgICAwMDAwMDAwICAgIDAwMDAwMDAgICAwMDAwMDAwICAgMDAwMDAwMDAgIFxuICAgICAgICBcbiAgICAgICAgY2hlY2tNb3VzZSA9ID0+XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiBpZiBkcmFnZ2luZ1xuICAgICAgICAgICAgb2xkUG9zID0ga3BvcyBtb3VzZVBvcyA/IHt4OjAgeTowfVxuICAgICAgICAgICAgbW91c2VQb3MgPSBlbGVjdHJvbi5zY3JlZW4uZ2V0Q3Vyc29yU2NyZWVuUG9pbnQoKVxuICAgICAgICAgICAgaWYgb2xkUG9zLmRpc3RTcXVhcmUobW91c2VQb3MpIDwgMTAgdGhlbiByZXR1cm5cbiAgICAgICAgICAgIGlmIGluZm9zPy5rYWNoZWxCb3VuZHM/IFxuICAgICAgICAgICAgICAgIGlmIG5vdCBCb3VuZHMuY29udGFpbnMgaW5mb3Mua2FjaGVsQm91bmRzLCBtb3VzZVBvc1xuICAgICAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgIGlmIGsgPSBCb3VuZHMua2FjaGVsQXRQb3MgaW5mb3MsIG1vdXNlUG9zXG4gICAgICAgICAgICAgICAgaWYgbm90IGhvdmVyS2FjaGVsIG9yIGhvdmVyS2FjaGVsICE9IGsua2FjaGVsLmlkXG4gICAgICAgICAgICAgICAgICAgIHBvc3QudG9XaW4gaG92ZXJLYWNoZWwsICdsZWF2ZScgaWYgaG92ZXJLYWNoZWxcbiAgICAgICAgICAgICAgICAgICAgaG92ZXJLYWNoZWwgPSBrLmthY2hlbC5pZFxuICAgICAgICAgICAgICAgICAgICBpZiBmb2N1c0thY2hlbD8uaXNGb2N1c2VkKCkgYW5kIGhvdmVyS2FjaGVsICE9IGZvY3VzS2FjaGVsLmlkXG4gICAgICAgICAgICAgICAgICAgICAgICBmb2N1c0thY2hlbCA9IHdpbldpdGhJZCBob3ZlckthY2hlbFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9jdXNLYWNoZWwuZm9jdXMoKVxuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3N0LnRvV2luIGhvdmVyS2FjaGVsLCAnaG92ZXInXG4gICAgICAgICAgICAgICAgXG4gICAgICAgIG1vdXNlVGltZXIgPSBzZXRJbnRlcnZhbCBjaGVja01vdXNlLCA1MFxuXG4jIDAwMCAgIDAwMCAgIDAwMDAwMDAgICAgMDAwMDAwMCAgMDAwICAgMDAwICAwMDAwMDAwMCAgMDAwICAgICAgXG4jIDAwMCAgMDAwICAgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAgICAgXG4jIDAwMDAwMDAgICAgMDAwMDAwMDAwICAwMDAgICAgICAgMDAwMDAwMDAwICAwMDAwMDAwICAgMDAwICAgICAgXG4jIDAwMCAgMDAwICAgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAgICAgXG4jIDAwMCAgIDAwMCAgMDAwICAgMDAwICAgMDAwMDAwMCAgMDAwICAgMDAwICAwMDAwMDAwMCAgMDAwMDAwMCAgXG5cbnBvc3Qub24gJ25ld0thY2hlbCcgKGh0bWw6J2RlZmF1bHQnLCBkYXRhOikgLT5cblxuICAgIHdpbiA9IG5ldyBlbGVjdHJvbi5Ccm93c2VyV2luZG93XG4gICAgICAgIFxuICAgICAgICBtb3ZhYmxlOiAgICAgICAgICAgIHRydWVcbiAgICAgICAgdHJhbnNwYXJlbnQ6ICAgICAgICB0cnVlXG4gICAgICAgIGF1dG9IaWRlTWVudUJhcjogICAgdHJ1ZVxuICAgICAgICBhY2NlcHRGaXJzdE1vdXNlOiAgIHRydWVcbiAgICAgICAgdHJhbnNwYXJlbnQ6ICAgICAgICB0cnVlXG4gICAgICAgIGhhc1NoYWRvdzogICAgICAgICAgZmFsc2VcbiAgICAgICAgZnJhbWU6ICAgICAgICAgICAgICBmYWxzZVxuICAgICAgICByZXNpemFibGU6ICAgICAgICAgIGZhbHNlXG4gICAgICAgIG1heGltaXphYmxlOiAgICAgICAgZmFsc2VcbiAgICAgICAgbWluaW1pemFibGU6ICAgICAgICBmYWxzZVxuICAgICAgICBmdWxsc2NyZWVuOiAgICAgICAgIGZhbHNlXG4gICAgICAgIHNob3c6ICAgICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgZnVsbHNjcmVlbmVuYWJsZTogICBmYWxzZVxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICAgICcjMTgxODE4J1xuICAgICAgICB3aWR0aDogICAgICAgICAgICAgIGthY2hlbFNpemVzW2thY2hlbFNpemVdXG4gICAgICAgIGhlaWdodDogICAgICAgICAgICAga2FjaGVsU2l6ZXNba2FjaGVsU2l6ZV1cbiAgICAgICAgd2ViUHJlZmVyZW5jZXM6ICAgXG4gICAgICAgICAgICBub2RlSW50ZWdyYXRpb246IHRydWVcbiAgICBcbiAgICB3aW4ubG9hZFVSTCBcImZpbGU6Ly8je19fZGlybmFtZX0vLi4vanMvI3todG1sfS5odG1sXCJcbiAgICBcbiAgICB3aW4ud2ViQ29udGVudHMub24gJ2RvbS1yZWFkeScgKGV2ZW50KSAtPlxuICAgICAgICBwb3N0LnRvV2luIHdpbi5pZCwgJ2luaXREYXRhJyBkYXRhIGlmIGRhdGE/XG4gICAgICAgIHdpbi5zaG93KClcbiAgICAgICAgICBcbiAgICB3aW4ub24gJ2Nsb3NlJyBvbkthY2hlbENsb3NlXG4gICAgICAgIFxuICAgIHdpbkV2ZW50cyB3aW5cbiAgICB3aW5cbiAgICAgICAgXG4jICAwMDAwMDAwICAwMDAgICAwMDAgICAwMDAwMDAwICAgMDAwMDAwMDAgICBcbiMgMDAwICAgICAgIDAwMDAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIFxuIyAwMDAwMDAwICAgMDAwIDAgMDAwICAwMDAwMDAwMDAgIDAwMDAwMDAwICAgXG4jICAgICAgMDAwICAwMDAgIDAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgICBcbiMgMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAgICAgIFxuXG5wb3N0Lm9uICdkcmFnU3RhcnQnICh3aWQpIC0+IFxuICAgIGRyYWdnaW5nID0gdHJ1ZVxuXG5wb3N0Lm9uICdkcmFnU3RvcCcgICh3aWQpIC0+IFxuICAgIGRyYWdnaW5nID0gZmFsc2VcblxucG9zdC5vbiAnc25hcEthY2hlbCcgKHdpZCkgLT4gXG5cbiAgICB1cGRhdGVJbmZvcygpXG4gICAga2FjaGVsID0gd2luV2l0aElkIHdpZFxuICAgIHNldEthY2hlbEJvdW5kcyBrYWNoZWwsIEJvdW5kcy5zbmFwIGluZm9zLCBrYWNoZWxcblxuIyAwMCAgICAgMDAgICAwMDAwMDAwICAgMDAwICAgMDAwICAwMDAwMDAwMCAgXG4jIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICBcbiMgMDAwMDAwMDAwICAwMDAgICAwMDAgICAwMDAgMDAwICAgMDAwMDAwMCAgIFxuIyAwMDAgMCAwMDAgIDAwMCAgIDAwMCAgICAgMDAwICAgICAwMDAgICAgICAgXG4jIDAwMCAgIDAwMCAgIDAwMDAwMDAgICAgICAgMCAgICAgIDAwMDAwMDAwICBcblxucG9zdC5vbiAna2FjaGVsTW92ZScgKGRpciwgd2lkKSAtPlxuICAgIFxuICAgIGthY2hlbCA9IHdpbldpdGhJZCB3aWRcbiAgICBiID0gQm91bmRzLnZhbGlkQm91bmRzIGthY2hlbFxuICAgICAgICAgIFxuICAgIG5iID0geDpiLngsIHk6Yi55LCB3aWR0aDpiLndpZHRoLCBoZWlnaHQ6Yi5oZWlnaHRcbiAgICBzd2l0Y2ggZGlyIFxuICAgICAgICB3aGVuICd1cCcgICAgICAgdGhlbiBuYi55ID0gYi55IC0gYi5oZWlnaHRcbiAgICAgICAgd2hlbiAnZG93bicgICAgIHRoZW4gbmIueSA9IGIueSArIGIuaGVpZ2h0XG4gICAgICAgIHdoZW4gJ3JpZ2h0JyAgICB0aGVuIG5iLnggPSBiLnggKyBiLndpZHRoIFxuICAgICAgICB3aGVuICdsZWZ0JyAgICAgdGhlbiBuYi54ID0gYi54IC0gYi53aWR0aCBcbiAgICAgICAgXG4gICAgaWYgaW5mbyA9IEJvdW5kcy5vdmVybGFwSW5mbyBpbmZvcywgbmJcbiAgICAgICAgXG4gICAgICAgIGdhcCA9IChzLCBkLCBmLCBiLCBvKSAtPlxuICAgICAgICAgICAgZyA9IGYgYiwgb1xuICAgICAgICAgICAgaWYgZyA+IDBcbiAgICAgICAgICAgICAgICBuYltkXSA9IGJbZF0gKyBzICogZ1xuICAgICAgICAgICAgICAgIHNldEthY2hlbEJvdW5kcyBrYWNoZWwsIG5iXG4gICAgICAgICAgICAgICAgdHJ1ZVxuICAgICAgICAgICAgICAgIFxuICAgICAgICByID0gc3dpdGNoIGRpciBcbiAgICAgICAgICAgIHdoZW4gJ3VwJyAgICB0aGVuIGdhcCAtMSAneScgQm91bmRzLmdhcFVwLCAgICBiLCBpbmZvLmJvdW5kc1xuICAgICAgICAgICAgd2hlbiAnZG93bicgIHRoZW4gZ2FwICsxICd5JyBCb3VuZHMuZ2FwRG93biwgIGIsIGluZm8uYm91bmRzXG4gICAgICAgICAgICB3aGVuICdyaWdodCcgdGhlbiBnYXAgKzEgJ3gnIEJvdW5kcy5nYXBSaWdodCwgYiwgaW5mby5ib3VuZHNcbiAgICAgICAgICAgIHdoZW4gJ2xlZnQnICB0aGVuIGdhcCAtMSAneCcgQm91bmRzLmdhcExlZnQsICBiLCBpbmZvLmJvdW5kc1xuICAgICAgICByZXR1cm4gaWYgclxuICAgICAgICBcbiAgICBpZiBuZWlnaGJvciA9IEJvdW5kcy5uZXh0TmVpZ2hib3IgaW5mb3MsIGthY2hlbCwgZGlyXG4gICAgICAgIGlmIG5laWdoYm9yLmJvdW5kcy53aWR0aCA9PSBiLndpZHRoXG4gICAgICAgICAgICBCb3VuZHMuc2V0Qm91bmRzIGthY2hlbCwgbmVpZ2hib3IuYm91bmRzXG4gICAgICAgICAgICBCb3VuZHMuc2V0Qm91bmRzIG5laWdoYm9yLmthY2hlbCwgYlxuICAgICAgICAgICAgdXBkYXRlSW5mb3MoKVxuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIFxuICAgIHNldEthY2hlbEJvdW5kcyBrYWNoZWwsIEJvdW5kcy5pc09uU2NyZWVuKG5iKSBhbmQgbmIgb3IgYlxuXG5wb3N0Lm9uICdrYWNoZWxCb3VuZHMnICh3aWQsIGthY2hlbElkKSAtPlxuICAgIFxuICAgIGJvdW5kcyA9IHByZWZzLmdldCBcImJvdW5kc+KWuCN7a2FjaGVsSWR9XCJcbiAgICBpZiBib3VuZHM/XG4gICAgICAgIHNldEthY2hlbEJvdW5kcyB3aW5XaXRoSWQod2lkKSwgYm91bmRzXG4gICAgICAgIFxuIyAgMDAwMDAwMCAgMDAwICAwMDAwMDAwICAwMDAwMDAwMCAgXG4jIDAwMCAgICAgICAwMDAgICAgIDAwMCAgIDAwMCAgICAgICBcbiMgMDAwMDAwMCAgIDAwMCAgICAwMDAgICAgMDAwMDAwMCAgIFxuIyAgICAgIDAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgICAgXG4jIDAwMDAwMDAgICAwMDAgIDAwMDAwMDAgIDAwMDAwMDAwICBcblxucG9zdC5vbiAna2FjaGVsU2l6ZScgKGFjdGlvbiwgd2lkKSAtPlxuICAgIFxuICAgIHNpemUgPSAwXG4gICAgd2hpbGUga2FjaGVsU2l6ZXNbc2l6ZV0gPCB3aW5XaXRoSWQod2lkKS5nZXRCb3VuZHMoKS53aWR0aFxuICAgICAgICBzaXplKytcbiAgICBcbiAgICBzd2l0Y2ggYWN0aW9uXG4gICAgICAgIHdoZW4gJ2luY3JlYXNlJyB0aGVuIHNpemUgKz0gMTsgcmV0dXJuIGlmIHNpemUgPiBrYWNoZWxTaXplcy5sZW5ndGgtMVxuICAgICAgICB3aGVuICdkZWNyZWFzZScgdGhlbiBzaXplIC09IDE7IHJldHVybiBpZiBzaXplIDwgMFxuICAgICAgICB3aGVuICdyZXNldCcgICAgdGhlbiByZXR1cm4gaWYgc2l6ZSA9PSAxOyBzaXplID0gMVxuICAgXG4gICAgdyA9IHdpbldpdGhJZCB3aWRcbiAgICBcbiAgICBiID0gdy5nZXRCb3VuZHMoKVxuICAgIGIud2lkdGggID0ga2FjaGVsU2l6ZXNbc2l6ZV1cbiAgICBiLmhlaWdodCA9IGthY2hlbFNpemVzW3NpemVdXG4gICAgc2V0S2FjaGVsQm91bmRzIHcsIEJvdW5kcy5zbmFwIGluZm9zLCB3LCBiXG4gICAgICAgIFxuIyAwMDAwMDAwMCAgICAwMDAwMDAwICAgMDAwICAgMDAwMDAwMCAgMDAwMDAwMDBcbiMgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgMDAwICAgICAgIDAwMCAgICAgXG4jIDAwMDAwMDAgICAgMDAwMDAwMDAwICAwMDAgIDAwMDAwMDAgICAwMDAwMDAwIFxuIyAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgMDAwICAgICBcbiMgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgMDAwMDAwMCAgIDAwMDAwMDAwXG5cbnJhaXNlZCAgPSBmYWxzZVxucmFpc2luZyA9IGZhbHNlXG4gICAgICAgIFxucG9zdC5vbiAncmFpc2VLYWNoZWxuJyAtPlxuICAgIFxuICAgIGZvciB3aW4gaW4ga2FjaGVsbigpXG4gICAgICAgIGlmIG5vdCB3aW4uaXNWaXNpYmxlKClcbiAgICAgICAgICAgIHJhaXNlZCA9IGZhbHNlXG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgXG4gICAgcmFpc2luZyA9IHRydWVcbiAgICBpZiByYWlzZWRcbiAgICAgICAgZm9yIHdpbiBpbiBrYWNoZWxuKClcbiAgICAgICAgICAgIHdpbi5oaWRlKClcbiAgICAgICAgcmFpc2VkICA9IGZhbHNlXG4gICAgICAgIHJhaXNpbmcgPSBmYWxzZVxuICAgICAgICByZXR1cm5cbiAgICAgICAgXG4gICAgZm9yIHdpbiBpbiBrYWNoZWxuKCkuY29uY2F0IFttYWluV2luXVxuICAgICAgICBpZiBvcy5wbGF0Zm9ybSgpID09ICd3aW4zMidcbiAgICAgICAgICAgIHJhaXNlV2luIHdpblxuICAgICAgICBlbHNlXG4gICAgICAgICAgICB3aW4uc2hvd0luYWN0aXZlKClcbiAgICByYWlzZWQgPSB0cnVlXG4gICAgcmFpc2VXaW4gZm9jdXNLYWNoZWwgPyBtYWluV2luXG4gICAgcmFpc2luZyA9IGZhbHNlXG4gICAgXG5yYWlzZVdpbiA9ICh3aW4pIC0+XG4gICAgd2luLnNob3dJbmFjdGl2ZSgpXG4gICAgd2luLmZvY3VzKClcblxucG9zdC5vbiAncXVpdCcgS2FjaGVsQXBwLnF1aXRBcHBcblxuIyAwMDAwMDAwMCAgIDAwMDAwMDAgICAgMDAwMDAwMCAgMDAwICAgMDAwICAgMDAwMDAwMCAgXG4jIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgICAgICBcbiMgMDAwMDAwICAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgIFxuIyAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAgMDAwICAgICAgIDAwMCAgXG4jIDAwMCAgICAgICAgMDAwMDAwMCAgICAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMDAwMDAgICBcblxucG9zdC5vbiAnZm9jdXNLYWNoZWwnICh3aW5JZCwgZGlyZWN0aW9uKSAtPiByYWlzZVdpbiBuZWlnaGJvcldpbiB3aW5JZCwgZGlyZWN0aW9uXG4gICBcbnBvc3Qub24gJ2thY2hlbEZvY3VzJyAod2luSWQpIC0+IFxuICAgIGlmIHdpbklkICE9IG1haW5XaW4uaWQgYW5kIG5vdCByYWlzaW5nXG4gICAgICAgIGZvY3VzS2FjaGVsID0gd2luV2l0aElkIHdpbklkXG4gICAgICAgIFxub25LYWNoZWxDbG9zZSA9IChldmVudCkgLT5cbiAgICBpZiBmb2N1c0thY2hlbCA9PSBldmVudC5zZW5kZXJcbiAgICAgICAgZm9jdXNLYWNoZWwgPSBudWxsIFxuICAgIHNldFRpbWVvdXQgdXBkYXRlSW5mb3MsIDIwMFxuICAgICAgICBcbm9uV2luQmx1ciA9IChldmVudCkgLT4gXG4gICAgaWYgbm90IHJhaXNpbmcgYW5kIGV2ZW50LnNlbmRlciA9PSBmb2N1c0thY2hlbFxuICAgICAgICByYWlzZWQgPSBmYWxzZVxuXG5vbldpbkZvY3VzID0gKGV2ZW50KSAtPiBcbiAgICBpZiBub3QgcmFpc2luZ1xuICAgICAgICByYWlzZWQgPSB0cnVlXG4gICAgICAgICAgICBcbiMgMDAwICAgMDAwICAwMDAgIDAwMCAgIDAwMCAgIDAwMDAwMDAgIFxuIyAwMDAgMCAwMDAgIDAwMCAgMDAwMCAgMDAwICAwMDAgICAgICAgXG4jIDAwMDAwMDAwMCAgMDAwICAwMDAgMCAwMDAgIDAwMDAwMDAgICBcbiMgMDAwICAgMDAwICAwMDAgIDAwMCAgMDAwMCAgICAgICAwMDAgIFxuIyAwMCAgICAgMDAgIDAwMCAgMDAwICAgMDAwICAwMDAwMDAwICAgXG5cbndpbnMgICAgICA9IC0+IEJyb3dzZXJXaW5kb3cuZ2V0QWxsV2luZG93cygpLnNvcnQgKGEsYikgLT4gYS5pZCAtIGIuaWRcbmFjdGl2ZVdpbiA9IC0+IEJyb3dzZXJXaW5kb3cuZ2V0Rm9jdXNlZFdpbmRvdygpXG5rYWNoZWxuICAgPSAtPiB3aW5zKCkuZmlsdGVyICh3KSAtPiB3ICE9IG1haW5XaW5cbndpbldpdGhJZCA9IChpZCkgLT4gQnJvd3NlcldpbmRvdy5mcm9tSWQgaWRcbiAgICBcbm5laWdoYm9yV2luID0gKHdpbklkLCBkaXJlY3Rpb24pIC0+XG4gICAgXG4gICAga2FjaGVsID0gd2luV2l0aElkIHdpbklkXG4gICAga2IgPSBrYWNoZWwuZ2V0Qm91bmRzKClcbiAgICBrcyA9IGthY2hlbG4oKS5maWx0ZXIgKGspIC0+IGsgIT0ga2FjaGVsXG4gICAga3MgPSBrcy5maWx0ZXIgKGspIC0+XG4gICAgICAgIGIgPSBrLmdldEJvdW5kcygpXG4gICAgICAgIHN3aXRjaCBkaXJlY3Rpb25cbiAgICAgICAgICAgIHdoZW4gJ3JpZ2h0JyB0aGVuIGIueCA+PSBrYi54K2tiLndpZHRoXG4gICAgICAgICAgICB3aGVuICdkb3duJyAgdGhlbiBiLnkgPj0ga2IueStrYi5oZWlnaHRcbiAgICAgICAgICAgIHdoZW4gJ2xlZnQnICB0aGVuIGtiLnggPj0gYi54K2Iud2lkdGggXG4gICAgICAgICAgICB3aGVuICd1cCcgICAgdGhlbiBrYi55ID49IGIueStiLmhlaWdodFxuXG4gICAgcmV0dXJuIGthY2hlbCBpZiBlbXB0eSBrc1xuICAgICAgICAgICAgXG4gICAga3Muc29ydCAoYSxiKSAtPlxuICAgICAgICBhYiA9IGEuZ2V0Qm91bmRzKClcbiAgICAgICAgYmIgPSBiLmdldEJvdW5kcygpXG4gICAgICAgIHN3aXRjaCBkaXJlY3Rpb25cbiAgICAgICAgICAgIHdoZW4gJ3JpZ2h0JyBcbiAgICAgICAgICAgICAgICBhID0gTWF0aC5hYnMoKGtiLnkra2IuaGVpZ2h0LzIpIC0gKGFiLnkrYWIuaGVpZ2h0LzIpKSArIChhYi54IC0ga2IueClcbiAgICAgICAgICAgICAgICBiID0gTWF0aC5hYnMoKGtiLnkra2IuaGVpZ2h0LzIpIC0gKGJiLnkrYmIuaGVpZ2h0LzIpKSArIChiYi54IC0ga2IueClcbiAgICAgICAgICAgIHdoZW4gJ2xlZnQnICBcbiAgICAgICAgICAgICAgICBhID0gTWF0aC5hYnMoKGtiLnkra2IuaGVpZ2h0LzIpIC0gKGFiLnkrYWIuaGVpZ2h0LzIpKSArIChrYi54IC0gYWIueClcbiAgICAgICAgICAgICAgICBiID0gTWF0aC5hYnMoKGtiLnkra2IuaGVpZ2h0LzIpIC0gKGJiLnkrYmIuaGVpZ2h0LzIpKSArIChrYi54IC0gYmIueClcbiAgICAgICAgICAgIHdoZW4gJ2Rvd24nICBcbiAgICAgICAgICAgICAgICBhID0gTWF0aC5hYnMoKGtiLngra2Iud2lkdGgvMikgLSAoYWIueCthYi53aWR0aC8yKSkgKyAoYWIueSAtIGtiLnkpXG4gICAgICAgICAgICAgICAgYiA9IE1hdGguYWJzKChrYi54K2tiLndpZHRoLzIpIC0gKGJiLngrYmIud2lkdGgvMikpICsgKGJiLnkgLSBrYi55KVxuICAgICAgICAgICAgd2hlbiAndXAnICAgIFxuICAgICAgICAgICAgICAgIGEgPSBNYXRoLmFicygoa2IueCtrYi53aWR0aC8yKSAtIChhYi54K2FiLndpZHRoLzIpKSArIChrYi55IC0gYWIueSlcbiAgICAgICAgICAgICAgICBiID0gTWF0aC5hYnMoKGtiLngra2Iud2lkdGgvMikgLSAoYmIueCtiYi53aWR0aC8yKSkgKyAoa2IueSAtIGJiLnkpXG4gICAgICAgIGEtYlxuICAgIGtzWzBdXG4gICAgXG5wb3N0Lm9uICdyZXF1ZXN0RGF0YScgKHByb3ZpZGVyLCB3aWQpIC0+XG4gICAgXG4gICAgaWYgbm90IHByb3ZpZGVyc1twcm92aWRlcl1cbiAgICAgICAgcHJvdmlkZXJzW3Byb3ZpZGVyXSA9IG5ldyAocmVxdWlyZSBcIi4vI3twcm92aWRlcn1cIilcbiAgICAgICAgXG4gICAgcHJvdmlkZXJzW3Byb3ZpZGVyXS5hZGRSZWNlaXZlciB3aWRcbiAgICBcbnBvc3Qub25HZXQgJ2dldERhdGEnIChwcm92aWRlcikgLT5cbiAgICBcbiAgICBwcm92aWRlcnNbcHJvdmlkZXJdPy5nZXREYXRhKClcbiAgICAiXX0=
//# sourceURL=../coffee/main.coffee