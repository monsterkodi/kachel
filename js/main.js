// koffee 1.3.0

/*
00     00   0000000   000  000   000
000   000  000   000  000  0000  000
000000000  000000000  000  000 0 000
000 0 000  000   000  000  000  0000
000   000  000   000  000  000   000
 */
var Bounds, BrowserWindow, KachelApp, activeWin, app, clamp, electron, empty, kachelSize, kachelSizes, kacheln, klog, mainWin, neighborWin, onWinBlur, onWinFocus, post, prefs, raiseWin, raised, raising, ref, relWin, shortcut, slash, winEvents, winWithId, wins;

ref = require('kxk'), post = ref.post, prefs = ref.prefs, slash = ref.slash, clamp = ref.clamp, empty = ref.empty, klog = ref.klog, app = ref.app;

Bounds = require('./bounds');

electron = require('electron');

BrowserWindow = electron.BrowserWindow;

kachelSizes = [72, 108, 144, 216];

kachelSize = 1;

mainWin = null;

winEvents = function(win) {
    win.on('focus', onWinFocus);
    win.on('blur', onWinBlur);
    return win.setHasShadow(false);
};

shortcut = slash.win() && 'ctrl+alt+k' || 'command+alt+k';

KachelApp = new app({
    dir: __dirname,
    pkg: require('../package.json'),
    shortcut: shortcut,
    index: 'mainwin.html',
    icon: '../img/app.ico',
    tray: '../img/menu.png',
    about: '../img/about.png',
    minWidth: 50,
    minHeight: 50,
    maxWidth: 50,
    maxHeight: 50,
    width: 50,
    height: 50,
    acceptFirstMouse: true,
    resizable: false,
    maximizable: false,
    saveBounds: false,
    onWinReady: function(win) {
        var kachelData, kachelId, ref1, results;
        mainWin = win;
        winEvents(win);
        ref1 = prefs.get('kacheln', {});
        results = [];
        for (kachelId in ref1) {
            kachelData = ref1[kachelId];
            if (kachelId !== 'appl' && kachelId !== 'folder') {
                results.push(post.emit('newKachel', kachelData));
            } else {
                results.push(void 0);
            }
        }
        return results;
    }
});

post.on('newKachel', function(arg) {
    var data, html, ref1, ref2, win;
    html = (ref1 = arg.html) != null ? ref1 : 'default', data = (ref2 = arg.data) != null ? ref2 : null;
    win = new electron.BrowserWindow({
        movable: true,
        transparent: true,
        autoHideMenuBar: true,
        acceptFirstMouse: true,
        hasShadow: false,
        frame: false,
        resizable: false,
        maximizable: false,
        minimizable: false,
        fullscreen: false,
        show: false,
        transparent: false,
        fullscreenenable: false,
        backgroundColor: '#181818',
        width: kachelSizes[kachelSize],
        height: kachelSizes[kachelSize],
        webPreferences: {
            nodeIntegration: true
        }
    });
    win.loadURL("file://" + __dirname + "/../js/" + html + ".html");
    win.webContents.on('dom-ready', function(event) {
        if (data != null) {
            post.toWin(win.id, 'initData', data);
        }
        return win.show();
    });
    winEvents(win);
    return win;
});

post.on('arrange', function() {
    return Bounds.arrange(kacheln());
});

post.on('snapKachel', function(wid) {
    return Bounds.snap(kacheln(), winWithId(wid));
});

post.on('kachelSize', function(action, wid) {
    var b, i, k, len, results, size, w;
    if (wid) {
        size = 0;
        while (kachelSizes[size] < winWithId(wid).getBounds().width) {
            size++;
        }
    } else {
        size = kachelSize;
    }
    switch (action) {
        case 'increase':
            size += 1;
            break;
        case 'decrease':
            size -= 1;
            break;
        case 'reset':
            size = 1;
    }
    size = clamp(0, kachelSizes.length - 1, size);
    if (wid) {
        k = [winWithId(wid)];
    } else {
        k = kacheln();
        kachelSize = size;
    }
    results = [];
    for (i = 0, len = k.length; i < len; i++) {
        w = k[i];
        b = w.getBounds();
        b.width = kachelSizes[size];
        b.height = kachelSizes[size];
        w.setBounds(b);
        results.push(Bounds.snap(kacheln(), w));
    }
    return results;
});

raised = false;

raising = false;

post.on('raiseKacheln', function() {
    var i, j, len, len1, ref1, ref2, win;
    if (raised) {
        ref1 = kacheln();
        for (i = 0, len = ref1.length; i < len; i++) {
            win = ref1[i];
            win.hide();
        }
        raised = false;
        return;
    }
    raising = true;
    ref2 = kacheln();
    for (j = 0, len1 = ref2.length; j < len1; j++) {
        win = ref2[j];
        raiseWin(win);
    }
    raised = true;
    return raiseWin(mainWin);
});

raiseWin = function(win) {
    win.showInactive();
    return win.focus();
};

post.on('quit', KachelApp.quitApp);

post.on('focusKachel', function(winId, direction) {
    return raiseWin(neighborWin(winId, direction));
});

onWinBlur = function(event) {
    if (event.sender === mainWin) {
        return raised = false;
    }
};

onWinFocus = function(event) {
    if (event.sender === mainWin) {
        if (!raised && !raising) {
            return post.emit('raiseKacheln');
        } else if (raising) {
            raised = true;
            return raising = false;
        }
    }
};

wins = function() {
    return BrowserWindow.getAllWindows().sort(function(a, b) {
        return a.id - b.id;
    });
};

activeWin = function() {
    return BrowserWindow.getFocusedWindow();
};

kacheln = function() {
    return wins().filter(function(w) {
        return w !== mainWin;
    });
};

winWithId = function(id) {
    return BrowserWindow.fromId(id);
};

neighborWin = function(winId, direction) {
    var kachel, kb, ks;
    kachel = winWithId(winId);
    kb = kachel.getBounds();
    ks = kacheln().filter(function(k) {
        return k !== kachel;
    });
    ks = ks.filter(function(k) {
        var b;
        b = k.getBounds();
        switch (direction) {
            case 'right':
                return b.x >= kb.x + kb.width;
            case 'down':
                return b.y >= kb.y + kb.height;
            case 'left':
                return kb.x >= b.x + b.width;
            case 'up':
                return kb.y >= b.y + b.height;
        }
    });
    if (empty(ks)) {
        return kachel;
    }
    ks.sort(function(a, b) {
        var ab, bb;
        ab = a.getBounds();
        bb = b.getBounds();
        switch (direction) {
            case 'right':
                a = Math.abs((kb.y + kb.height / 2) - (ab.y + ab.height / 2)) + (ab.x - kb.x);
                b = Math.abs((kb.y + kb.height / 2) - (bb.y + bb.height / 2)) + (bb.x - kb.x);
                break;
            case 'left':
                a = Math.abs((kb.y + kb.height / 2) - (ab.y + ab.height / 2)) + (kb.x - ab.x);
                b = Math.abs((kb.y + kb.height / 2) - (bb.y + bb.height / 2)) + (kb.x - bb.x);
                break;
            case 'down':
                a = Math.abs((kb.x + kb.width / 2) - (ab.x + ab.width / 2)) + (ab.y - kb.y);
                b = Math.abs((kb.x + kb.width / 2) - (bb.x + bb.width / 2)) + (bb.y - kb.y);
                break;
            case 'up':
                a = Math.abs((kb.x + kb.width / 2) - (ab.x + ab.width / 2)) + (kb.y - ab.y);
                b = Math.abs((kb.x + kb.width / 2) - (bb.x + bb.width / 2)) + (kb.y - bb.y);
        }
        return a - b;
    });
    return ks[0];
};

relWin = function(winId, delta) {
    var w, wi, wl;
    wl = wins();
    w = BrowserWindow.fromId(winId);
    wi = wl.indexOf(w);
    return wl[(wl.length + wi + delta) % wl.length];
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/main.coffee