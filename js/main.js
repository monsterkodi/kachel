// koffee 1.3.0

/*
00     00   0000000   000  000   000
000   000  000   000  000  0000  000
000000000  000000000  000  000 0 000
000 0 000  000   000  000  000  0000
000   000  000   000  000  000   000
 */
var Bounds, BrowserWindow, KachelApp, activeWin, app, clamp, electron, hide, kachelSize, kachelSizes, kacheln, klog, loadKacheln, mainWin, onArrange, onFocusKachel, onHideKacheln, onKachelSize, onNewKachel, onRaiseKacheln, onWinBlur, onWinFocus, post, prefs, raise, raised, raising, ref, relWin, shortcut, slash, winEvents, winWithId, wins;

ref = require('kxk'), post = ref.post, prefs = ref.prefs, slash = ref.slash, clamp = ref.clamp, klog = ref.klog, app = ref.app;

Bounds = require('./bounds');

electron = require('electron');

BrowserWindow = electron.BrowserWindow;

kachelSizes = [72, 108, 144, 216];

kachelSize = 1;

mainWin = null;

winEvents = function(win) {
    win.on('focus', onWinFocus);
    win.on('blur', onWinBlur);
    return win.setHasShadow(false);
};

shortcut = slash.win() && 'ctrl+alt+k' || 'command+alt+k';

KachelApp = new app({
    dir: __dirname,
    pkg: require('../package.json'),
    shortcut: shortcut,
    index: 'mainwin.html',
    icon: '../img/app.ico',
    tray: '../img/menu.png',
    about: '../img/about.png',
    minWidth: 50,
    minHeight: 50,
    maxWidth: 50,
    maxHeight: 50,
    width: 50,
    height: 50,
    resizable: false,
    maximizable: false,
    saveBounds: false,
    onWinReady: function(win) {
        mainWin = win;
        winEvents(win);
        return loadKacheln();
    }
});

loadKacheln = function() {
    var kachelData, kachelId, ref1, results;
    ref1 = prefs.get('kacheln', {});
    results = [];
    for (kachelId in ref1) {
        kachelData = ref1[kachelId];
        if (kachelId !== 'appl') {
            results.push(onNewKachel(kachelData));
        } else {
            results.push(void 0);
        }
    }
    return results;
};

onNewKachel = function(arg) {
    var data, html, ref1, ref2, win;
    html = (ref1 = arg.html) != null ? ref1 : 'default', data = (ref2 = arg.data) != null ? ref2 : null;
    win = new electron.BrowserWindow({
        movable: true,
        transparent: true,
        autoHideMenuBar: true,
        frame: false,
        resizable: false,
        maximizable: false,
        minimizable: false,
        fullscreen: false,
        show: false,
        transparent: false,
        fullscreenenable: false,
        backgroundColor: '#181818',
        width: kachelSizes[kachelSize],
        height: kachelSizes[kachelSize],
        webPreferences: {
            nodeIntegration: true
        }
    });
    win.loadURL("file://" + __dirname + "/../js/" + html + ".html");
    win.webContents.on('dom-ready', function(event) {
        if (data != null) {
            post.toWin(win.id, 'initData', data);
        }
        return win.show();
    });
    winEvents(win);
    return win;
};

post.on('newKachel', onNewKachel);

onArrange = function() {
    var b, i, j, len, len1, ref1, ref2, results, snap, w;
    snap = kachelSizes[kachelSize] / 2;
    ref1 = kacheln();
    for (i = 0, len = ref1.length; i < len; i++) {
        w = ref1[i];
        b = w.getBounds();
        b = Bounds.onScreen(b);
        b = Bounds.onGrid(b);
        w.setBounds(b);
    }
    ref2 = kacheln();
    results = [];
    for (j = 0, len1 = ref2.length; j < len1; j++) {
        w = ref2[j];
        results.push(post.toWin(w.id, 'saveBounds'));
    }
    return results;
};

post.on('arrange', onArrange);

onKachelSize = function(action, wid) {
    var b, i, k, len, size, w;
    if (wid) {
        size = 0;
        while (kachelSizes[size] < winWithId(wid).getBounds().width) {
            size++;
        }
    } else {
        size = kachelSize;
    }
    switch (action) {
        case 'increase':
            size += 1;
            break;
        case 'decrease':
            size -= 1;
            break;
        case 'reset':
            size = 1;
    }
    size = clamp(0, kachelSizes.length - 1, size);
    if (wid) {
        k = [winWithId(wid)];
    } else {
        k = kacheln();
        kachelSize = size;
    }
    for (i = 0, len = k.length; i < len; i++) {
        w = k[i];
        b = w.getBounds();
        b.width = kachelSizes[size];
        b.height = kachelSizes[size];
        w.setBounds(b);
    }
    return onArrange();
};

post.on('kachelSize', onKachelSize);

raised = false;

raising = false;

raise = function(win) {
    win.showInactive();
    return win.focus();
};

hide = function(win) {
    return win.hide();
};

onWinBlur = function(event) {
    if (event.sender === mainWin) {
        return raised = false;
    }
};

onWinFocus = function(event) {
    if (event.sender === mainWin) {
        if (!raised && !raising) {
            return onRaiseKacheln();
        } else if (raising) {
            raised = true;
            return raising = false;
        }
    }
};

onHideKacheln = function() {
    var i, len, ref1, win;
    ref1 = kacheln();
    for (i = 0, len = ref1.length; i < len; i++) {
        win = ref1[i];
        hide(win);
    }
    return raised = false;
};

onRaiseKacheln = function() {
    var i, len, ref1, win;
    if (raised) {
        onHideKacheln();
        return;
    }
    raising = true;
    ref1 = kacheln();
    for (i = 0, len = ref1.length; i < len; i++) {
        win = ref1[i];
        raise(win);
    }
    raised = true;
    return raise(mainWin);
};

post.on('raiseKacheln', onRaiseKacheln);

post.on('quit', KachelApp.quitApp);

onFocusKachel = function(winId, direction) {
    switch (direction) {
        case 'left':
        case 'up':
            return raise(relWin(winId, -1));
        case 'right':
        case 'down':
            return raise(relWin(winId, 1));
    }
};

post.on('focusKachel', onFocusKachel);

wins = function() {
    return BrowserWindow.getAllWindows().sort(function(a, b) {
        return a.id - b.id;
    });
};

activeWin = function() {
    return BrowserWindow.getFocusedWindow();
};

kacheln = function() {
    return wins().filter(function(w) {
        return w !== mainWin;
    });
};

winWithId = function(id) {
    return BrowserWindow.fromId(id);
};

relWin = function(winId, delta) {
    var w, wi, wl;
    wl = wins();
    w = BrowserWindow.fromId(winId);
    wi = wl.indexOf(w);
    return wl[(wl.length + wi + delta) % wl.length];
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIuIiwic291cmNlcyI6WyIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7OztBQUFBLElBQUE7O0FBUUEsTUFBMkMsT0FBQSxDQUFRLEtBQVIsQ0FBM0MsRUFBRSxlQUFGLEVBQVEsaUJBQVIsRUFBZSxpQkFBZixFQUFzQixpQkFBdEIsRUFBNkIsZUFBN0IsRUFBbUM7O0FBRW5DLE1BQUEsR0FBVyxPQUFBLENBQVEsVUFBUjs7QUFDWCxRQUFBLEdBQVcsT0FBQSxDQUFRLFVBQVI7O0FBQ1gsYUFBQSxHQUFnQixRQUFRLENBQUM7O0FBRXpCLFdBQUEsR0FBYyxDQUFDLEVBQUQsRUFBSSxHQUFKLEVBQVEsR0FBUixFQUFZLEdBQVo7O0FBQ2QsVUFBQSxHQUFjOztBQUNkLE9BQUEsR0FBVTs7QUFFVixTQUFBLEdBQVksU0FBQyxHQUFEO0lBQ1IsR0FBRyxDQUFDLEVBQUosQ0FBTyxPQUFQLEVBQWdCLFVBQWhCO0lBQ0EsR0FBRyxDQUFDLEVBQUosQ0FBTyxNQUFQLEVBQWdCLFNBQWhCO1dBQ0EsR0FBRyxDQUFDLFlBQUosQ0FBaUIsS0FBakI7QUFIUTs7QUFLWixRQUFBLEdBQVcsS0FBSyxDQUFDLEdBQU4sQ0FBQSxDQUFBLElBQWdCLFlBQWhCLElBQWdDOztBQUUzQyxTQUFBLEdBQVksSUFBSSxHQUFKLENBQ1I7SUFBQSxHQUFBLEVBQWdCLFNBQWhCO0lBQ0EsR0FBQSxFQUFnQixPQUFBLENBQVEsaUJBQVIsQ0FEaEI7SUFFQSxRQUFBLEVBQWdCLFFBRmhCO0lBR0EsS0FBQSxFQUFnQixjQUhoQjtJQUlBLElBQUEsRUFBZ0IsZ0JBSmhCO0lBS0EsSUFBQSxFQUFnQixpQkFMaEI7SUFNQSxLQUFBLEVBQWdCLGtCQU5oQjtJQU9BLFFBQUEsRUFBZ0IsRUFQaEI7SUFRQSxTQUFBLEVBQWdCLEVBUmhCO0lBU0EsUUFBQSxFQUFnQixFQVRoQjtJQVVBLFNBQUEsRUFBZ0IsRUFWaEI7SUFXQSxLQUFBLEVBQWdCLEVBWGhCO0lBWUEsTUFBQSxFQUFnQixFQVpoQjtJQWFBLFNBQUEsRUFBZ0IsS0FiaEI7SUFjQSxXQUFBLEVBQWdCLEtBZGhCO0lBZUEsVUFBQSxFQUFnQixLQWZoQjtJQWdCQSxVQUFBLEVBQWdCLFNBQUMsR0FBRDtRQUNaLE9BQUEsR0FBVTtRQUNWLFNBQUEsQ0FBVSxHQUFWO2VBQ0EsV0FBQSxDQUFBO0lBSFksQ0FoQmhCO0NBRFE7O0FBc0JaLFdBQUEsR0FBYyxTQUFBO0FBRVYsUUFBQTtBQUFBO0FBQUE7U0FBQSxnQkFBQTs7UUFDSSxJQUFHLFFBQUEsS0FBWSxNQUFmO3lCQUNJLFdBQUEsQ0FBWSxVQUFaLEdBREo7U0FBQSxNQUFBO2lDQUFBOztBQURKOztBQUZVOztBQVlkLFdBQUEsR0FBYyxTQUFDLEdBQUQ7QUFFVixRQUFBO0lBRlcsMENBQUssV0FBVywwQ0FBRztJQUU5QixHQUFBLEdBQU0sSUFBSSxRQUFRLENBQUMsYUFBYixDQUVGO1FBQUEsT0FBQSxFQUFpQixJQUFqQjtRQUNBLFdBQUEsRUFBaUIsSUFEakI7UUFFQSxlQUFBLEVBQWlCLElBRmpCO1FBR0EsS0FBQSxFQUFpQixLQUhqQjtRQUlBLFNBQUEsRUFBaUIsS0FKakI7UUFLQSxXQUFBLEVBQWlCLEtBTGpCO1FBTUEsV0FBQSxFQUFpQixLQU5qQjtRQU9BLFVBQUEsRUFBaUIsS0FQakI7UUFRQSxJQUFBLEVBQWlCLEtBUmpCO1FBU0EsV0FBQSxFQUFpQixLQVRqQjtRQVVBLGdCQUFBLEVBQWtCLEtBVmxCO1FBV0EsZUFBQSxFQUFpQixTQVhqQjtRQVlBLEtBQUEsRUFBaUIsV0FBWSxDQUFBLFVBQUEsQ0FaN0I7UUFhQSxNQUFBLEVBQWlCLFdBQVksQ0FBQSxVQUFBLENBYjdCO1FBY0EsY0FBQSxFQUNJO1lBQUEsZUFBQSxFQUFpQixJQUFqQjtTQWZKO0tBRkU7SUFtQk4sR0FBRyxDQUFDLE9BQUosQ0FBWSxTQUFBLEdBQVUsU0FBVixHQUFvQixTQUFwQixHQUE2QixJQUE3QixHQUFrQyxPQUE5QztJQUVBLEdBQUcsQ0FBQyxXQUFXLENBQUMsRUFBaEIsQ0FBbUIsV0FBbkIsRUFBK0IsU0FBQyxLQUFEO1FBQzNCLElBQXNDLFlBQXRDO1lBQUEsSUFBSSxDQUFDLEtBQUwsQ0FBVyxHQUFHLENBQUMsRUFBZixFQUFtQixVQUFuQixFQUE4QixJQUE5QixFQUFBOztlQUNBLEdBQUcsQ0FBQyxJQUFKLENBQUE7SUFGMkIsQ0FBL0I7SUFJQSxTQUFBLENBQVUsR0FBVjtXQUNBO0FBNUJVOztBQThCZCxJQUFJLENBQUMsRUFBTCxDQUFRLFdBQVIsRUFBb0IsV0FBcEI7O0FBUUEsU0FBQSxHQUFZLFNBQUE7QUFFUixRQUFBO0lBQUEsSUFBQSxHQUFPLFdBQVksQ0FBQSxVQUFBLENBQVosR0FBd0I7QUFFL0I7QUFBQSxTQUFBLHNDQUFBOztRQUVJLENBQUEsR0FBSSxDQUFDLENBQUMsU0FBRixDQUFBO1FBQ0osQ0FBQSxHQUFJLE1BQU0sQ0FBQyxRQUFQLENBQWdCLENBQWhCO1FBQ0osQ0FBQSxHQUFJLE1BQU0sQ0FBQyxNQUFQLENBQWMsQ0FBZDtRQUVKLENBQUMsQ0FBQyxTQUFGLENBQVksQ0FBWjtBQU5KO0FBUUE7QUFBQTtTQUFBLHdDQUFBOztxQkFDSSxJQUFJLENBQUMsS0FBTCxDQUFXLENBQUMsQ0FBQyxFQUFiLEVBQWlCLFlBQWpCO0FBREo7O0FBWlE7O0FBZVosSUFBSSxDQUFDLEVBQUwsQ0FBUSxTQUFSLEVBQWtCLFNBQWxCOztBQVFBLFlBQUEsR0FBZSxTQUFDLE1BQUQsRUFBUyxHQUFUO0FBRVgsUUFBQTtJQUFBLElBQUcsR0FBSDtRQUNJLElBQUEsR0FBTztBQUNQLGVBQU0sV0FBWSxDQUFBLElBQUEsQ0FBWixHQUFvQixTQUFBLENBQVUsR0FBVixDQUFjLENBQUMsU0FBZixDQUFBLENBQTBCLENBQUMsS0FBckQ7WUFDSSxJQUFBO1FBREosQ0FGSjtLQUFBLE1BQUE7UUFLSSxJQUFBLEdBQU8sV0FMWDs7QUFPQSxZQUFPLE1BQVA7QUFBQSxhQUNTLFVBRFQ7WUFDeUIsSUFBQSxJQUFRO0FBQXhCO0FBRFQsYUFFUyxVQUZUO1lBRXlCLElBQUEsSUFBUTtBQUF4QjtBQUZULGFBR1MsT0FIVDtZQUd5QixJQUFBLEdBQVE7QUFIakM7SUFLQSxJQUFBLEdBQU8sS0FBQSxDQUFNLENBQU4sRUFBUSxXQUFXLENBQUMsTUFBWixHQUFtQixDQUEzQixFQUE2QixJQUE3QjtJQUVQLElBQUcsR0FBSDtRQUNJLENBQUEsR0FBSSxDQUFDLFNBQUEsQ0FBVSxHQUFWLENBQUQsRUFEUjtLQUFBLE1BQUE7UUFHSSxDQUFBLEdBQUksT0FBQSxDQUFBO1FBQ0osVUFBQSxHQUFhLEtBSmpCOztBQU1BLFNBQUEsbUNBQUE7O1FBQ0ksQ0FBQSxHQUFJLENBQUMsQ0FBQyxTQUFGLENBQUE7UUFDSixDQUFDLENBQUMsS0FBRixHQUFXLFdBQVksQ0FBQSxJQUFBO1FBQ3ZCLENBQUMsQ0FBQyxNQUFGLEdBQVcsV0FBWSxDQUFBLElBQUE7UUFDdkIsQ0FBQyxDQUFDLFNBQUYsQ0FBWSxDQUFaO0FBSko7V0FNQSxTQUFBLENBQUE7QUE1Qlc7O0FBOEJmLElBQUksQ0FBQyxFQUFMLENBQVEsWUFBUixFQUFxQixZQUFyQjs7QUFRQSxNQUFBLEdBQVU7O0FBQ1YsT0FBQSxHQUFVOztBQUVWLEtBQUEsR0FBUSxTQUFDLEdBQUQ7SUFDSixHQUFHLENBQUMsWUFBSixDQUFBO1dBQ0EsR0FBRyxDQUFDLEtBQUosQ0FBQTtBQUZJOztBQUlSLElBQUEsR0FBTyxTQUFDLEdBQUQ7V0FDSCxHQUFHLENBQUMsSUFBSixDQUFBO0FBREc7O0FBR1AsU0FBQSxHQUFZLFNBQUMsS0FBRDtJQUNSLElBQUcsS0FBSyxDQUFDLE1BQU4sS0FBZ0IsT0FBbkI7ZUFDSSxNQUFBLEdBQVMsTUFEYjs7QUFEUTs7QUFJWixVQUFBLEdBQWEsU0FBQyxLQUFEO0lBQ1QsSUFBRyxLQUFLLENBQUMsTUFBTixLQUFnQixPQUFuQjtRQUNJLElBQUcsQ0FBSSxNQUFKLElBQWUsQ0FBSSxPQUF0QjttQkFDSSxjQUFBLENBQUEsRUFESjtTQUFBLE1BRUssSUFBRyxPQUFIO1lBQ0QsTUFBQSxHQUFTO21CQUNULE9BQUEsR0FBVSxNQUZUO1NBSFQ7O0FBRFM7O0FBUWIsYUFBQSxHQUFnQixTQUFBO0FBRVosUUFBQTtBQUFBO0FBQUEsU0FBQSxzQ0FBQTs7UUFDSSxJQUFBLENBQUssR0FBTDtBQURKO1dBRUEsTUFBQSxHQUFTO0FBSkc7O0FBTWhCLGNBQUEsR0FBaUIsU0FBQTtBQUViLFFBQUE7SUFBQSxJQUFHLE1BQUg7UUFDSSxhQUFBLENBQUE7QUFDQSxlQUZKOztJQUdBLE9BQUEsR0FBVTtBQUNWO0FBQUEsU0FBQSxzQ0FBQTs7UUFDSSxLQUFBLENBQU0sR0FBTjtBQURKO0lBRUEsTUFBQSxHQUFTO1dBQ1QsS0FBQSxDQUFNLE9BQU47QUFUYTs7QUFXakIsSUFBSSxDQUFDLEVBQUwsQ0FBUSxjQUFSLEVBQXVCLGNBQXZCOztBQUVBLElBQUksQ0FBQyxFQUFMLENBQVEsTUFBUixFQUFlLFNBQVMsQ0FBQyxPQUF6Qjs7QUFRQSxhQUFBLEdBQWdCLFNBQUMsS0FBRCxFQUFRLFNBQVI7QUFDWixZQUFPLFNBQVA7QUFBQSxhQUNTLE1BRFQ7QUFBQSxhQUNlLElBRGY7bUJBQzRCLEtBQUEsQ0FBTSxNQUFBLENBQU8sS0FBUCxFQUFjLENBQUMsQ0FBZixDQUFOO0FBRDVCLGFBRVMsT0FGVDtBQUFBLGFBRWdCLE1BRmhCO21CQUU0QixLQUFBLENBQU0sTUFBQSxDQUFPLEtBQVAsRUFBZSxDQUFmLENBQU47QUFGNUI7QUFEWTs7QUFLaEIsSUFBSSxDQUFDLEVBQUwsQ0FBUSxhQUFSLEVBQXNCLGFBQXRCOztBQVVBLElBQUEsR0FBWSxTQUFBO1dBQUcsYUFBYSxDQUFDLGFBQWQsQ0FBQSxDQUE2QixDQUFDLElBQTlCLENBQW1DLFNBQUMsQ0FBRCxFQUFHLENBQUg7ZUFBUyxDQUFDLENBQUMsRUFBRixHQUFPLENBQUMsQ0FBQztJQUFsQixDQUFuQztBQUFIOztBQUNaLFNBQUEsR0FBWSxTQUFBO1dBQUcsYUFBYSxDQUFDLGdCQUFkLENBQUE7QUFBSDs7QUFDWixPQUFBLEdBQVksU0FBQTtXQUFHLElBQUEsQ0FBQSxDQUFNLENBQUMsTUFBUCxDQUFjLFNBQUMsQ0FBRDtlQUFPLENBQUEsS0FBSztJQUFaLENBQWQ7QUFBSDs7QUFDWixTQUFBLEdBQVksU0FBQyxFQUFEO1dBQVEsYUFBYSxDQUFDLE1BQWQsQ0FBcUIsRUFBckI7QUFBUjs7QUFFWixNQUFBLEdBQVMsU0FBQyxLQUFELEVBQVEsS0FBUjtBQUNMLFFBQUE7SUFBQSxFQUFBLEdBQUssSUFBQSxDQUFBO0lBQ0wsQ0FBQSxHQUFJLGFBQWEsQ0FBQyxNQUFkLENBQXFCLEtBQXJCO0lBQ0osRUFBQSxHQUFLLEVBQUUsQ0FBQyxPQUFILENBQVcsQ0FBWDtXQUNMLEVBQUcsQ0FBQSxDQUFDLEVBQUUsQ0FBQyxNQUFILEdBQVUsRUFBVixHQUFhLEtBQWQsQ0FBQSxHQUFxQixFQUFFLENBQUMsTUFBeEI7QUFKRSIsInNvdXJjZXNDb250ZW50IjpbIiMjI1xuMDAgICAgIDAwICAgMDAwMDAwMCAgIDAwMCAgMDAwICAgMDAwXG4wMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAwMDAwICAwMDBcbjAwMDAwMDAwMCAgMDAwMDAwMDAwICAwMDAgIDAwMCAwIDAwMFxuMDAwIDAgMDAwICAwMDAgICAwMDAgIDAwMCAgMDAwICAwMDAwXG4wMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAwMDAgICAwMDBcbiMjI1xuXG57IHBvc3QsIHByZWZzLCBzbGFzaCwgY2xhbXAsIGtsb2csIGFwcCB9ID0gcmVxdWlyZSAna3hrJ1xuXG5Cb3VuZHMgICA9IHJlcXVpcmUgJy4vYm91bmRzJ1xuZWxlY3Ryb24gPSByZXF1aXJlICdlbGVjdHJvbidcbkJyb3dzZXJXaW5kb3cgPSBlbGVjdHJvbi5Ccm93c2VyV2luZG93XG5cbmthY2hlbFNpemVzID0gWzcyLDEwOCwxNDQsMjE2XVxua2FjaGVsU2l6ZSAgPSAxXG5tYWluV2luID0gbnVsbFxuXG53aW5FdmVudHMgPSAod2luKSAtPlxuICAgIHdpbi5vbiAnZm9jdXMnICBvbldpbkZvY3VzXG4gICAgd2luLm9uICdibHVyJyAgIG9uV2luQmx1clxuICAgIHdpbi5zZXRIYXNTaGFkb3cgZmFsc2VcbiAgICBcbnNob3J0Y3V0ID0gc2xhc2gud2luKCkgYW5kICdjdHJsK2FsdCtrJyBvciAnY29tbWFuZCthbHQraydcblxuS2FjaGVsQXBwID0gbmV3IGFwcFxuICAgIGRpcjogICAgICAgICAgICBfX2Rpcm5hbWVcbiAgICBwa2c6ICAgICAgICAgICAgcmVxdWlyZSAnLi4vcGFja2FnZS5qc29uJ1xuICAgIHNob3J0Y3V0OiAgICAgICBzaG9ydGN1dFxuICAgIGluZGV4OiAgICAgICAgICAnbWFpbndpbi5odG1sJ1xuICAgIGljb246ICAgICAgICAgICAnLi4vaW1nL2FwcC5pY28nXG4gICAgdHJheTogICAgICAgICAgICcuLi9pbWcvbWVudS5wbmcnXG4gICAgYWJvdXQ6ICAgICAgICAgICcuLi9pbWcvYWJvdXQucG5nJ1xuICAgIG1pbldpZHRoOiAgICAgICA1MFxuICAgIG1pbkhlaWdodDogICAgICA1MFxuICAgIG1heFdpZHRoOiAgICAgICA1MFxuICAgIG1heEhlaWdodDogICAgICA1MFxuICAgIHdpZHRoOiAgICAgICAgICA1MFxuICAgIGhlaWdodDogICAgICAgICA1MFxuICAgIHJlc2l6YWJsZTogICAgICBmYWxzZSAjdHJ1ZVxuICAgIG1heGltaXphYmxlOiAgICBmYWxzZVxuICAgIHNhdmVCb3VuZHM6ICAgICBmYWxzZVxuICAgIG9uV2luUmVhZHk6ICAgICAod2luKSAtPlxuICAgICAgICBtYWluV2luID0gd2luXG4gICAgICAgIHdpbkV2ZW50cyB3aW5cbiAgICAgICAgbG9hZEthY2hlbG4oKVxuXG5sb2FkS2FjaGVsbiA9IC0+XG4gICAgXG4gICAgZm9yIGthY2hlbElkLGthY2hlbERhdGEgb2YgcHJlZnMuZ2V0ICdrYWNoZWxuJyB7fVxuICAgICAgICBpZiBrYWNoZWxJZCAhPSAnYXBwbCdcbiAgICAgICAgICAgIG9uTmV3S2FjaGVsIGthY2hlbERhdGFcblxuIyAwMDAgICAwMDAgICAwMDAwMDAwICAgIDAwMDAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMDAgIDAwMCAgICAgIFxuIyAwMDAgIDAwMCAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgICAgIFxuIyAwMDAwMDAwICAgIDAwMDAwMDAwMCAgMDAwICAgICAgIDAwMDAwMDAwMCAgMDAwMDAwMCAgIDAwMCAgICAgIFxuIyAwMDAgIDAwMCAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgICAgIFxuIyAwMDAgICAwMDAgIDAwMCAgIDAwMCAgIDAwMDAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMDAgIDAwMDAwMDAgIFxuXG5vbk5ld0thY2hlbCA9IChodG1sOidkZWZhdWx0JywgZGF0YTopIC0+XG5cbiAgICB3aW4gPSBuZXcgZWxlY3Ryb24uQnJvd3NlcldpbmRvd1xuICAgICAgICBcbiAgICAgICAgbW92YWJsZTogICAgICAgICB0cnVlXG4gICAgICAgIHRyYW5zcGFyZW50OiAgICAgdHJ1ZVxuICAgICAgICBhdXRvSGlkZU1lbnVCYXI6IHRydWVcbiAgICAgICAgZnJhbWU6ICAgICAgICAgICBmYWxzZVxuICAgICAgICByZXNpemFibGU6ICAgICAgIGZhbHNlXG4gICAgICAgIG1heGltaXphYmxlOiAgICAgZmFsc2VcbiAgICAgICAgbWluaW1pemFibGU6ICAgICBmYWxzZVxuICAgICAgICBmdWxsc2NyZWVuOiAgICAgIGZhbHNlXG4gICAgICAgIHNob3c6ICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgdHJhbnNwYXJlbnQ6ICAgICBmYWxzZVxuICAgICAgICBmdWxsc2NyZWVuZW5hYmxlOiBmYWxzZVxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjMTgxODE4J1xuICAgICAgICB3aWR0aDogICAgICAgICAgIGthY2hlbFNpemVzW2thY2hlbFNpemVdXG4gICAgICAgIGhlaWdodDogICAgICAgICAga2FjaGVsU2l6ZXNba2FjaGVsU2l6ZV1cbiAgICAgICAgd2ViUHJlZmVyZW5jZXM6XG4gICAgICAgICAgICBub2RlSW50ZWdyYXRpb246IHRydWVcbiAgICBcbiAgICB3aW4ubG9hZFVSTCBcImZpbGU6Ly8je19fZGlybmFtZX0vLi4vanMvI3todG1sfS5odG1sXCJcbiAgICBcbiAgICB3aW4ud2ViQ29udGVudHMub24gJ2RvbS1yZWFkeScgKGV2ZW50KSAtPlxuICAgICAgICBwb3N0LnRvV2luIHdpbi5pZCwgJ2luaXREYXRhJyBkYXRhIGlmIGRhdGE/XG4gICAgICAgIHdpbi5zaG93KClcbiAgICAgICAgXG4gICAgd2luRXZlbnRzIHdpblxuICAgIHdpblxuICAgICAgICBcbnBvc3Qub24gJ25ld0thY2hlbCcgb25OZXdLYWNoZWxcblxuIyAgMDAwMDAwMCAgIDAwMDAwMDAwICAgMDAwMDAwMDAgICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwMCAgXG4jIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwMCAgMDAwICAwMDAgICAgICAgIDAwMCAgICAgICBcbiMgMDAwMDAwMDAwICAwMDAwMDAwICAgIDAwMDAwMDAgICAgMDAwMDAwMDAwICAwMDAgMCAwMDAgIDAwMCAgMDAwMCAgMDAwMDAwMCAgIFxuIyAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgMDAwMCAgMDAwICAgMDAwICAwMDAgICAgICAgXG4jIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAgMDAwMDAwMCAgIDAwMDAwMDAwICBcblxub25BcnJhbmdlID0gLT5cbiAgICBcbiAgICBzbmFwID0ga2FjaGVsU2l6ZXNba2FjaGVsU2l6ZV0vMlxuICAgIFxuICAgIGZvciB3IGluIGthY2hlbG4oKVxuICAgICAgICBcbiAgICAgICAgYiA9IHcuZ2V0Qm91bmRzKClcbiAgICAgICAgYiA9IEJvdW5kcy5vblNjcmVlbiBiXG4gICAgICAgIGIgPSBCb3VuZHMub25HcmlkIGJcbiAgICAgICAgXG4gICAgICAgIHcuc2V0Qm91bmRzIGJcbiAgICAgICAgXG4gICAgZm9yIHcgaW4ga2FjaGVsbigpXG4gICAgICAgIHBvc3QudG9XaW4gdy5pZCwgJ3NhdmVCb3VuZHMnXG5cbnBvc3Qub24gJ2FycmFuZ2UnIG9uQXJyYW5nZVxuXG4jICAwMDAwMDAwICAwMDAgIDAwMDAwMDAgIDAwMDAwMDAwICBcbiMgMDAwICAgICAgIDAwMCAgICAgMDAwICAgMDAwICAgICAgIFxuIyAwMDAwMDAwICAgMDAwICAgIDAwMCAgICAwMDAwMDAwICAgXG4jICAgICAgMDAwICAwMDAgICAwMDAgICAgIDAwMCAgICAgICBcbiMgMDAwMDAwMCAgIDAwMCAgMDAwMDAwMCAgMDAwMDAwMDAgIFxuXG5vbkthY2hlbFNpemUgPSAoYWN0aW9uLCB3aWQpIC0+XG4gICAgXG4gICAgaWYgd2lkXG4gICAgICAgIHNpemUgPSAwXG4gICAgICAgIHdoaWxlIGthY2hlbFNpemVzW3NpemVdIDwgd2luV2l0aElkKHdpZCkuZ2V0Qm91bmRzKCkud2lkdGhcbiAgICAgICAgICAgIHNpemUrK1xuICAgIGVsc2VcbiAgICAgICAgc2l6ZSA9IGthY2hlbFNpemVcbiAgICBcbiAgICBzd2l0Y2ggYWN0aW9uXG4gICAgICAgIHdoZW4gJ2luY3JlYXNlJyB0aGVuIHNpemUgKz0gMVxuICAgICAgICB3aGVuICdkZWNyZWFzZScgdGhlbiBzaXplIC09IDFcbiAgICAgICAgd2hlbiAncmVzZXQnICAgIHRoZW4gc2l6ZSAgPSAxXG4gICBcbiAgICBzaXplID0gY2xhbXAgMCBrYWNoZWxTaXplcy5sZW5ndGgtMSBzaXplXG4gICAgICAgIFxuICAgIGlmIHdpZFxuICAgICAgICBrID0gW3dpbldpdGhJZCB3aWRdXG4gICAgZWxzZVxuICAgICAgICBrID0ga2FjaGVsbigpXG4gICAgICAgIGthY2hlbFNpemUgPSBzaXplXG4gICAgXG4gICAgZm9yIHcgaW4ga1xuICAgICAgICBiID0gdy5nZXRCb3VuZHMoKVxuICAgICAgICBiLndpZHRoICA9IGthY2hlbFNpemVzW3NpemVdXG4gICAgICAgIGIuaGVpZ2h0ID0ga2FjaGVsU2l6ZXNbc2l6ZV1cbiAgICAgICAgdy5zZXRCb3VuZHMgYlxuICAgICAgICBcbiAgICBvbkFycmFuZ2UoKVxuXG5wb3N0Lm9uICdrYWNoZWxTaXplJyBvbkthY2hlbFNpemVcblxuIyAwMDAwMDAwMCAgICAwMDAwMDAwICAgMDAwICAgMDAwMDAwMCAgMDAwMDAwMDBcbiMgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgMDAwICAgICAgIDAwMCAgICAgXG4jIDAwMDAwMDAgICAgMDAwMDAwMDAwICAwMDAgIDAwMDAwMDAgICAwMDAwMDAwIFxuIyAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgMDAwICAgICBcbiMgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgMDAwMDAwMCAgIDAwMDAwMDAwXG5cbnJhaXNlZCAgPSBmYWxzZVxucmFpc2luZyA9IGZhbHNlXG5cbnJhaXNlID0gKHdpbikgLT5cbiAgICB3aW4uc2hvd0luYWN0aXZlKClcbiAgICB3aW4uZm9jdXMoKVxuICAgIFxuaGlkZSA9ICh3aW4pIC0+XG4gICAgd2luLmhpZGUoKVxuXG5vbldpbkJsdXIgPSAoZXZlbnQpIC0+IFxuICAgIGlmIGV2ZW50LnNlbmRlciA9PSBtYWluV2luIFxuICAgICAgICByYWlzZWQgPSBmYWxzZVxuXG5vbldpbkZvY3VzID0gKGV2ZW50KSAtPiBcbiAgICBpZiBldmVudC5zZW5kZXIgPT0gbWFpbldpblxuICAgICAgICBpZiBub3QgcmFpc2VkIGFuZCBub3QgcmFpc2luZ1xuICAgICAgICAgICAgb25SYWlzZUthY2hlbG4oKVxuICAgICAgICBlbHNlIGlmIHJhaXNpbmdcbiAgICAgICAgICAgIHJhaXNlZCA9IHRydWVcbiAgICAgICAgICAgIHJhaXNpbmcgPSBmYWxzZVxuICAgIFxub25IaWRlS2FjaGVsbiA9IC0+XG4gICAgXG4gICAgZm9yIHdpbiBpbiBrYWNoZWxuKClcbiAgICAgICAgaGlkZSB3aW5cbiAgICByYWlzZWQgPSBmYWxzZVxuXG5vblJhaXNlS2FjaGVsbiA9IC0+XG4gICAgXG4gICAgaWYgcmFpc2VkXG4gICAgICAgIG9uSGlkZUthY2hlbG4oKVxuICAgICAgICByZXR1cm5cbiAgICByYWlzaW5nID0gdHJ1ZVxuICAgIGZvciB3aW4gaW4ga2FjaGVsbigpXG4gICAgICAgIHJhaXNlIHdpblxuICAgIHJhaXNlZCA9IHRydWVcbiAgICByYWlzZSBtYWluV2luXG5cbnBvc3Qub24gJ3JhaXNlS2FjaGVsbicgb25SYWlzZUthY2hlbG4gICAgICAgIFxuXG5wb3N0Lm9uICdxdWl0JyBLYWNoZWxBcHAucXVpdEFwcFxuXG4jIDAwMDAwMDAwICAgMDAwMDAwMCAgICAwMDAwMDAwICAwMDAgICAwMDAgICAwMDAwMDAwICBcbiMgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgICAgIFxuIyAwMDAwMDAgICAgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAgMDAwICAwMDAwMDAwICAgXG4jIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAwMDAgICAgICAgMDAwICBcbiMgMDAwICAgICAgICAwMDAwMDAwICAgIDAwMDAwMDAgICAwMDAwMDAwICAgMDAwMDAwMCAgIFxuXG5vbkZvY3VzS2FjaGVsID0gKHdpbklkLCBkaXJlY3Rpb24pIC0+XG4gICAgc3dpdGNoIGRpcmVjdGlvblxuICAgICAgICB3aGVuICdsZWZ0Jyd1cCcgICAgdGhlbiByYWlzZSByZWxXaW4gd2luSWQsIC0xXG4gICAgICAgIHdoZW4gJ3JpZ2h0Jydkb3duJyB0aGVuIHJhaXNlIHJlbFdpbiB3aW5JZCwgIDFcblxucG9zdC5vbiAnZm9jdXNLYWNoZWwnIG9uRm9jdXNLYWNoZWxcbiAgICAgICAgXG4jIGthY2hlbENsb3NlZCA9IChldmVudCkgLT4gIyBsb2cgJ2thY2hlbENsb3NlZCdcbiAgICBcbiMgMDAwICAgMDAwICAwMDAgIDAwMCAgIDAwMCAgIDAwMDAwMDAgIFxuIyAwMDAgMCAwMDAgIDAwMCAgMDAwMCAgMDAwICAwMDAgICAgICAgXG4jIDAwMDAwMDAwMCAgMDAwICAwMDAgMCAwMDAgIDAwMDAwMDAgICBcbiMgMDAwICAgMDAwICAwMDAgIDAwMCAgMDAwMCAgICAgICAwMDAgIFxuIyAwMCAgICAgMDAgIDAwMCAgMDAwICAgMDAwICAwMDAwMDAwICAgXG5cbndpbnMgICAgICA9IC0+IEJyb3dzZXJXaW5kb3cuZ2V0QWxsV2luZG93cygpLnNvcnQgKGEsYikgLT4gYS5pZCAtIGIuaWRcbmFjdGl2ZVdpbiA9IC0+IEJyb3dzZXJXaW5kb3cuZ2V0Rm9jdXNlZFdpbmRvdygpXG5rYWNoZWxuICAgPSAtPiB3aW5zKCkuZmlsdGVyICh3KSAtPiB3ICE9IG1haW5XaW5cbndpbldpdGhJZCA9IChpZCkgLT4gQnJvd3NlcldpbmRvdy5mcm9tSWQgaWRcbiAgICBcbnJlbFdpbiA9ICh3aW5JZCwgZGVsdGEpIC0+XG4gICAgd2wgPSB3aW5zKClcbiAgICB3ID0gQnJvd3NlcldpbmRvdy5mcm9tSWQgd2luSWRcbiAgICB3aSA9IHdsLmluZGV4T2Ygd1xuICAgIHdsWyh3bC5sZW5ndGgrd2krZGVsdGEpJXdsLmxlbmd0aF1cbiJdfQ==
//# sourceURL=../coffee/main.coffee