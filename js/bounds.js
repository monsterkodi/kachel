// koffee 1.3.0

/*
0000000     0000000   000   000  000   000  0000000     0000000
000   000  000   000  000   000  0000  000  000   000  000     
0000000    000   000  000   000  000 0 000  000   000  0000000 
000   000  000   000  000   000  000  0000  000   000       000
0000000     0000000    0000000   000   000  0000000    0000000
 */
var Bounds, clamp, electron, klog, post, ref;

ref = require('kxk'), post = ref.post, clamp = ref.clamp, klog = ref.klog;

electron = require('electron');

Bounds = (function() {
    function Bounds() {}

    Bounds.sw = function() {
        return electron.screen.getPrimaryDisplay().workAreaSize.width;
    };

    Bounds.sh = function() {
        return electron.screen.getPrimaryDisplay().workAreaSize.height;
    };

    Bounds.sy = function() {
        return electron.screen.getPrimaryDisplay().workArea.y;
    };

    Bounds.onScreen = function(b) {
        var sh, sw, sy;
        sw = this.sw();
        sh = this.sh();
        sy = this.sy();
        b.x = clamp(0, sw - b.width, b.x);
        b.y = clamp(0, sh - b.height, b.y);
        if (b.x + b.width > sw - b.width) {
            b.x = sw - b.width;
        }
        if (b.y + b.height > sh - b.height) {
            b.y = sh - b.height;
        }
        if (b.x < b.width) {
            b.x = 0;
        }
        if (b.y - sy < b.height) {
            b.y = sy;
        }
        return b;
    };

    Bounds.overlap = function(a, b) {
        return !(a.x > b.x + b.width || b.x > a.x + a.width || a.y > b.y + b.height || b.y > a.y + a.height);
    };

    Bounds.borderDist = function(b) {
        var dx, dy;
        dx = b.x < this.sw() / 2 ? b.x : this.sw() - (b.x + b.width);
        dy = b.y < this.sh() / 2 ? b.y : this.sh() - (b.y + b.height);
        return Math.min(dx, dy);
    };

    Bounds.getInfos = function(kacheln) {
        var index, infos;
        index = 0;
        infos = kacheln.map((function(_this) {
            return function(k) {
                return {
                    kachel: k,
                    index: index++,
                    bounds: _this.onScreen(k.getBounds())
                };
            };
        })(this));
        infos.sort((function(_this) {
            return function(a, b) {
                return _this.borderDist(a.bounds) - _this.borderDist(b.bounds);
            };
        })(this));
        return infos;
    };

    Bounds.gapRight = function(a, b) {
        return b.x - (a.x + a.width);
    };

    Bounds.gapLeft = function(a, b) {
        return a.x - (b.x + b.width);
    };

    Bounds.gapUp = function(a, b) {
        return a.y - (b.y + b.height);
    };

    Bounds.gapDown = function(a, b) {
        return b.y - (a.y + a.height);
    };

    Bounds.isCloseNeighbor = function(bounds, info, dir) {
        var ref1, ref2, ref3, ref4;
        switch (dir) {
            case 'right':
                return (0 <= (ref1 = this.gapRight(bounds, info.bounds)) && ref1 < bounds.width);
            case 'left':
                return (0 <= (ref2 = this.gapLeft(bounds, info.bounds)) && ref2 < bounds.width);
            case 'down':
                return (0 <= (ref3 = this.gapDown(bounds, info.bounds)) && ref3 < bounds.height);
            case 'up':
                return (0 <= (ref4 = this.gapUp(bounds, info.bounds)) && ref4 < bounds.height);
        }
    };

    Bounds.closeNeighbor = function(infos, kachel, dir) {
        var i, info, kb, len;
        kb = kachel.getBounds();
        for (i = 0, len = infos.length; i < len; i++) {
            info = infos[i];
            if (info.kachel === kachel) {
                continue;
            }
            if (this.isCloseNeighbor(kb, info, dir)) {
                return info;
            }
        }
    };

    Bounds.snap = function(kacheln, kachel) {
        var b, i, info, infos, len, n;
        infos = this.getInfos(kacheln);
        b = kachel.getBounds();
        for (i = 0, len = infos.length; i < len; i++) {
            info = infos[i];
            if (info.kachel === kachel) {
                continue;
            }
            if (this.overlap(b, info.bounds)) {
                b.y = info.bounds.y + info.bounds.height;
            }
        }
        if (n = this.closeNeighbor(infos, kachel, 'up')) {
            b.y = n.bounds.y + n.bounds.height;
        } else if (n = this.closeNeighbor(infos, kachel, 'down')) {
            b.y = n.bounds.y - b.height;
        }
        if (n = this.closeNeighbor(infos, kachel, 'right')) {
            b.x = n.bounds.x - b.width;
        } else if (n = this.closeNeighbor(infos, kachel, 'left')) {
            b.x = n.bounds.x + n.bounds.width;
        }
        kachel.setBounds(b);
        return post.toWin(kachel.id, 'saveBounds');
    };

    Bounds.arrange = function(kacheln) {
        var check, i, index, info, infos, j, k, l, len, len1, pb, pinned, ref1, results;
        infos = this.getInfos(kacheln);
        for (index = i = 0, ref1 = infos.length; 0 <= ref1 ? i < ref1 : i > ref1; index = 0 <= ref1 ? ++i : --i) {
            pinned = infos.slice(0, +index + 1 || 9e9);
            check = infos.slice(index + 1);
            pb = pinned.slice(-1)[0].bounds;
            for (j = 0, len = check.length; j < len; j++) {
                k = check[j];
                if (this.overlap(pb, k.bounds)) {
                    k.bounds.y = pb.y + pb.height;
                }
            }
        }
        results = [];
        for (l = 0, len1 = infos.length; l < len1; l++) {
            info = infos[l];
            info.kachel.setBounds(info.bounds);
            results.push(post.toWin(info.kachel.id, 'saveBounds'));
        }
        return results;
    };

    return Bounds;

})();

module.exports = Bounds;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/bounds.coffee