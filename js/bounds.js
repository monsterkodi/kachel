// koffee 1.3.0

/*
0000000     0000000   000   000  000   000  0000000     0000000
000   000  000   000  000   000  0000  000  000   000  000     
0000000    000   000  000   000  000 0 000  000   000  0000000 
000   000  000   000  000   000  000  0000  000   000       000
0000000     0000000    0000000   000   000  0000000    0000000
 */
var Bounds, clamp, electron, klog, kpos, os, post, ref, wxw;

ref = require('kxk'), post = ref.post, clamp = ref.clamp, klog = ref.klog, kpos = ref.kpos, os = ref.os;

if (os.platform() === 'win32') {
    wxw = require('wxw');
}

electron = require('electron');

Bounds = (function() {
    function Bounds() {}

    Bounds.infos = null;

    Bounds.screenWidth = 0;

    Bounds.screenHeight = 0;

    Bounds.screenTop = 0;

    Bounds.setBounds = function(kachel, b) {
        klog('setBounds', b);
        kachel.setBounds(b);
        post.toWin(kachel.id, 'saveBounds');
        return post.emit('bounds', kachel, b);
    };

    Bounds.init = function() {
        Bounds.updateScreenSize();
        return Bounds.getInfos();
    };

    Bounds.updateScreenSize = function() {
        var sp, ss, vs;
        if (os.platform() === 'win32') {
            ss = wxw('screen', 'user');
            sp = {
                x: ss.width,
                y: ss.height
            };
            vs = kpos(electron.screen.screenToDipPoint(sp)).rounded();
            this.screenWidth = vs.x;
            this.screenHeight = vs.y;
            return this.screenTop = 0;
        } else {
            this.screenWidth = electron.screen.getPrimaryDisplay().workAreaSize.width;
            this.screenHeight = electron.screen.getPrimaryDisplay().workAreaSize.height;
            return this.screenTop = electron.screen.getPrimaryDisplay().workArea.y;
        }
    };

    Bounds.getInfos = function(kacheln) {
        var infos, maxX, maxY, minX, minY;
        if (kacheln != null) {
            kacheln;
        } else {
            kacheln = electron.BrowserWindow.getAllWindows();
        }
        minX = minY = 9999;
        maxX = maxY = 0;
        infos = kacheln.map((function(_this) {
            return function(k) {
                var b;
                b = _this.validBounds(k);
                minX = Math.min(minX, b.x);
                minY = Math.min(minY, b.y);
                maxX = Math.max(maxX, b.x + b.width);
                maxY = Math.max(maxY, b.y + b.height);
                return {
                    kachel: k,
                    bounds: b
                };
            };
        })(this));
        infos.sort((function(_this) {
            return function(a, b) {
                return _this.borderDist(a.bounds) - _this.borderDist(b.bounds);
            };
        })(this));
        infos.kachelBounds = {
            x: minX,
            y: minY,
            width: maxX - minX,
            height: maxY - minY
        };
        this.infos = infos;
        return this.infos;
    };

    Bounds.validBounds = function(kachel) {
        return this.onScreen(kachel.getBounds());
    };

    Bounds.onScreen = function(b) {
        b.x = clamp(0, this.screenWidth - b.width, b.x);
        b.y = clamp(0, this.screenHeight - b.height, b.y);
        if (b.x + b.width > this.screenWidth - b.width) {
            b.x = this.screenWidth - b.width;
        }
        if (b.y + b.height > this.screenTop + this.screenHeight - b.height) {
            b.y = this.screenTop + this.screenHeight - b.height;
        }
        if (b.x < b.width) {
            b.x = 0;
        }
        if (b.y - this.screenTop < b.height) {
            b.y = this.screenTop;
        }
        return b;
    };

    Bounds.isOnScreen = function(b) {
        if (b.y < 0 || b.x < 0) {
            return false;
        }
        if (b.x + b.width > this.screenWidth) {
            return false;
        }
        if (b.y + b.height > this.screenTop + this.screenHeight) {
            return false;
        }
        return true;
    };

    Bounds.overlap = function(a, b) {
        if (!a || !b) {
            return false;
        }
        return !(a.x > b.x + b.width - 1 || b.x > a.x + a.width - 1 || a.y > b.y + b.height - 1 || b.y > a.y + a.height - 1);
    };

    Bounds.overlapInfo = function(b) {
        var i, info, len, ref1;
        ref1 = this.infos;
        for (i = 0, len = ref1.length; i < len; i++) {
            info = ref1[i];
            if (this.overlap(info.bounds, b)) {
                return info;
            }
        }
    };

    Bounds.borderDist = function(b) {
        var dx, dy;
        dx = b.x < this.screenWidth / 2 ? b.x : this.screenWidth - (b.x + b.width);
        dy = b.y < this.screenHeight / 2 ? b.y : this.screenHeight - (b.y + b.height);
        return Math.min(dx, dy);
    };

    Bounds.posInBounds = function(p, b) {
        return p.x >= b.x && p.x <= b.x + b.width && p.y >= b.y && p.y <= b.y + b.height;
    };

    Bounds.kachelAtPos = function(p) {
        var i, k, len, ref1;
        ref1 = this.infos;
        for (i = 0, len = ref1.length; i < len; i++) {
            k = ref1[i];
            if (this.posInBounds(p, k.bounds)) {
                return k;
            }
        }
    };

    Bounds.gapRight = function(a, b) {
        return b.x - (a.x + a.width);
    };

    Bounds.gapLeft = function(a, b) {
        return a.x - (b.x + b.width);
    };

    Bounds.gapUp = function(a, b) {
        return a.y - (b.y + b.height);
    };

    Bounds.gapDown = function(a, b) {
        return b.y - (a.y + a.height);
    };

    Bounds.isCloseNeighbor = function(bounds, info, dir) {
        var ref1, ref2, ref3, ref4;
        switch (dir) {
            case 'right':
                return (0 <= (ref1 = this.gapRight(bounds, info.bounds)) && ref1 < bounds.width);
            case 'left':
                return (0 <= (ref2 = this.gapLeft(bounds, info.bounds)) && ref2 < bounds.width);
            case 'down':
                return (0 <= (ref3 = this.gapDown(bounds, info.bounds)) && ref3 < bounds.height);
            case 'up':
                return (0 <= (ref4 = this.gapUp(bounds, info.bounds)) && ref4 < bounds.height);
        }
    };

    Bounds.closeNeighbor = function(kachel, dir) {
        var i, info, infos, kb, len;
        kb = kachel.getBounds();
        infos = Array.from(this.infos);
        infos.sort(function(a, b) {
            switch (dir) {
                case 'left':
                case 'right':
                    return Math.abs(a.bounds.y - kb.y) - Math.abs(b.bounds.y - kb.y);
                case 'up':
                case 'down':
                    return Math.abs(a.bounds.x - kb.x) - Math.abs(b.bounds.x - kb.x);
            }
        });
        for (i = 0, len = infos.length; i < len; i++) {
            info = infos[i];
            if (info.kachel === kachel) {
                continue;
            }
            if (this.isCloseNeighbor(kb, info, dir)) {
                return info;
            }
        }
    };

    Bounds.nextNeighbor = function(kachel, dir) {
        var kb, neighbor;
        if (neighbor = this.closeNeighbor(kachel, dir)) {
            kb = kachel.getBounds();
            switch (dir) {
                case 'left':
                case 'right':
                    if (neighbor.bounds.y === kb.y) {
                        return neighbor;
                    }
                    break;
                case 'up':
                case 'down':
                    if (neighbor.bounds.x === kb.x) {
                        return neighbor;
                    }
            }
        }
    };

    Bounds.snap = function(kachel, b) {
        var horz, i, info, len, n, ref1, vert;
        if (b != null) {
            b;
        } else {
            b = kachel.getBounds();
        }
        klog('snap', kachel.id, b);
        horz = false;
        vert = false;
        if (b.x < 0 || b.x < 72) {
            horz = true;
            b.x = 0;
        } else if (b.x + b.width > this.screenWidth || b.x + b.width > this.screenWidth - 72) {
            horz = true;
            b.x = this.screenWidth - b.width;
        }
        if (b.y < 0 || b.y < 72) {
            vert = true;
            b.y = 0;
        } else if (b.y + b.height > this.screenTop + this.screenHeight || b.y + b.height > this.screenTop + this.screenHeight - 72) {
            vert = true;
            b.y = this.screenTop + this.screenHeight - b.height;
        }
        this.getInfos();
        ref1 = this.infos;
        for (i = 0, len = ref1.length; i < len; i++) {
            info = ref1[i];
            if (info.kachel === kachel) {
                continue;
            }
            if (this.overlap(b, info.bounds)) {
                b.y = info.bounds.y + info.bounds.height;
            }
        }
        if (!vert) {
            if (n = this.closeNeighbor(kachel, 'up')) {
                b.y = n.bounds.y + n.bounds.height;
            } else if (n = this.closeNeighbor(kachel, 'down')) {
                b.y = n.bounds.y - b.height;
            }
        }
        if (!horz) {
            if (n = this.closeNeighbor(kachel, 'right')) {
                b.x = n.bounds.x - b.width;
            } else if (n = this.closeNeighbor(kachel, 'left')) {
                b.x = n.bounds.x + n.bounds.width;
            }
        }
        klog('snap', kachel.id, b);
        return b;
    };

    return Bounds;

})();

module.exports = Bounds;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/bounds.coffee