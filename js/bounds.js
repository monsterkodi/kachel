// koffee 1.3.0

/*
0000000     0000000   000   000  000   000  0000000     0000000
000   000  000   000  000   000  0000  000  000   000  000     
0000000    000   000  000   000  000 0 000  000   000  0000000 
000   000  000   000  000   000  000  0000  000   000       000
0000000     0000000    0000000   000   000  0000000    0000000
 */
var Bounds, clamp, electron, klog, os, post, ref, wxw;

ref = require('kxk'), post = ref.post, clamp = ref.clamp, klog = ref.klog, os = ref.os;

if (os.platform() === 'win32') {
    wxw = require('wxw');
}

electron = require('electron');

Bounds = (function() {
    function Bounds() {}

    Bounds.screenWidth = 0;

    Bounds.screenHeight = 0;

    Bounds.screenTop = 0;

    Bounds.setBounds = function(kachel, b) {
        kachel.setBounds(b);
        return post.toWin(kachel.id, 'saveBounds');
    };

    Bounds.updateScreenSize = function() {
        if (os.platform() === 'win32') {
            this.screenWidth = wxw('screen', 'user').width;
            this.screenHeight = wxw('screen', 'user').height;
            return this.screenTop = 0;
        } else {
            this.screenWidth = electron.screen.getPrimaryDisplay().workAreaSize.width;
            this.screenHeight = electron.screen.getPrimaryDisplay().workAreaSize.height;
            return this.screenTop = electron.screen.getPrimaryDisplay().workArea.y;
        }
    };

    Bounds.sw = function() {
        return this.screenWidth;
    };

    Bounds.sh = function() {
        return this.screenHeight;
    };

    Bounds.sy = function() {
        return this.screenTop;
    };

    Bounds.getInfos = function(kacheln) {
        var index, infos, maxX, maxY, minX, minY;
        index = 0;
        minX = minY = 9999;
        maxX = maxY = 0;
        infos = kacheln.map((function(_this) {
            return function(k) {
                var b;
                b = _this.validBounds(k);
                minX = Math.min(minX, b.x);
                minY = Math.min(minY, b.y);
                maxX = Math.max(maxX, b.x + b.width);
                maxY = Math.max(maxY, b.y + b.height);
                return {
                    kachel: k,
                    index: index++,
                    bounds: b
                };
            };
        })(this));
        infos.sort((function(_this) {
            return function(a, b) {
                return _this.borderDist(a.bounds) - _this.borderDist(b.bounds);
            };
        })(this));
        infos.kachelBounds = {
            x: minX,
            y: minY,
            width: maxX - minX,
            height: maxY - minY
        };
        return infos;
    };

    Bounds.validBounds = function(kachel) {
        return this.onScreen(kachel.getBounds());
    };

    Bounds.onScreen = function(b) {
        var sh, sw, sy;
        sw = this.sw();
        sh = this.sh();
        sy = this.sy();
        b.x = clamp(0, sw - b.width, b.x);
        b.y = clamp(0, sh - b.height, b.y);
        if (b.x + b.width > sw - b.width) {
            b.x = sw - b.width;
        }
        if (b.y + b.height > sy + sh - b.height) {
            b.y = sy + sh - b.height;
        }
        if (b.x < b.width) {
            b.x = 0;
        }
        if (b.y - sy < b.height) {
            b.y = sy;
        }
        return b;
    };

    Bounds.isOnScreen = function(b) {
        var sh, sw, sy;
        if (b.y < 0 || b.x < 0) {
            return false;
        }
        sw = this.sw();
        sh = this.sh();
        sy = this.sy();
        if (b.x + b.width > sw) {
            return false;
        }
        if (b.y + b.height > sy + sh) {
            return false;
        }
        return true;
    };

    Bounds.overlap = function(a, b) {
        if (!a || !b) {
            return false;
        }
        return !(a.x > b.x + b.width - 1 || b.x > a.x + a.width - 1 || a.y > b.y + b.height - 1 || b.y > a.y + a.height - 1);
    };

    Bounds.overlapInfo = function(infos, b) {
        var i, info, len;
        for (i = 0, len = infos.length; i < len; i++) {
            info = infos[i];
            if (this.overlap(info.bounds, b)) {
                return info;
            }
        }
    };

    Bounds.borderDist = function(b) {
        var dx, dy;
        dx = b.x < this.sw() / 2 ? b.x : this.sw() - (b.x + b.width);
        dy = b.y < this.sh() / 2 ? b.y : this.sh() - (b.y + b.height);
        return Math.min(dx, dy);
    };

    Bounds.contains = function(b, p) {
        return p.x >= b.x && p.x <= b.x + b.width && p.y >= b.y && p.y <= b.y + b.height;
    };

    Bounds.kachelAtPos = function(infos, p) {
        var i, k, len;
        for (i = 0, len = infos.length; i < len; i++) {
            k = infos[i];
            if (this.contains(k.bounds, p)) {
                return k;
            }
        }
    };

    Bounds.gapRight = function(a, b) {
        return b.x - (a.x + a.width);
    };

    Bounds.gapLeft = function(a, b) {
        return a.x - (b.x + b.width);
    };

    Bounds.gapUp = function(a, b) {
        return a.y - (b.y + b.height);
    };

    Bounds.gapDown = function(a, b) {
        return b.y - (a.y + a.height);
    };

    Bounds.isCloseNeighbor = function(bounds, info, dir) {
        var ref1, ref2, ref3, ref4;
        switch (dir) {
            case 'right':
                return (0 <= (ref1 = this.gapRight(bounds, info.bounds)) && ref1 < bounds.width);
            case 'left':
                return (0 <= (ref2 = this.gapLeft(bounds, info.bounds)) && ref2 < bounds.width);
            case 'down':
                return (0 <= (ref3 = this.gapDown(bounds, info.bounds)) && ref3 < bounds.height);
            case 'up':
                return (0 <= (ref4 = this.gapUp(bounds, info.bounds)) && ref4 < bounds.height);
        }
    };

    Bounds.closeNeighbor = function(infos, kachel, dir) {
        var i, info, kb, len;
        kb = kachel.getBounds();
        infos.sort(function(a, b) {
            switch (dir) {
                case 'left':
                case 'right':
                    return Math.abs(a.bounds.y - kb.y) - Math.abs(b.bounds.y - kb.y);
                case 'up':
                case 'down':
                    return Math.abs(a.bounds.x - kb.x) - Math.abs(b.bounds.x - kb.x);
            }
        });
        for (i = 0, len = infos.length; i < len; i++) {
            info = infos[i];
            if (info.kachel === kachel) {
                continue;
            }
            if (this.isCloseNeighbor(kb, info, dir)) {
                return info;
            }
        }
    };

    Bounds.nextNeighbor = function(infos, kachel, dir) {
        var kb, neighbor;
        if (neighbor = this.closeNeighbor(infos, kachel, dir)) {
            kb = kachel.getBounds();
            switch (dir) {
                case 'left':
                case 'right':
                    if (neighbor.bounds.y === kb.y) {
                        return neighbor;
                    }
                    break;
                case 'up':
                case 'down':
                    if (neighbor.bounds.x === kb.x) {
                        return neighbor;
                    }
            }
        }
    };

    Bounds.snap = function(infos, kachel, b) {
        var horz, i, info, len, n, sh, sw, sy, vert;
        if (b != null) {
            b;
        } else {
            b = kachel.getBounds();
        }
        horz = false;
        vert = false;
        sw = this.sw();
        sh = this.sh();
        sy = this.sy();
        if (b.x < 0 || b.x < 72) {
            horz = true;
            b.x = 0;
        } else if (b.x + b.width > sw || b.x + b.width > sw - 72) {
            horz = true;
            b.x = sw - b.width;
        }
        if (b.y < 0 || b.y < 72) {
            vert = true;
            b.y = 0;
        } else if (b.y + b.height > sh + sy || b.y + b.height > sh + sy - 72) {
            vert = true;
            b.y = sh + sy - b.height;
        }
        for (i = 0, len = infos.length; i < len; i++) {
            info = infos[i];
            if (info.kachel === kachel) {
                continue;
            }
            if (this.overlap(b, info.bounds)) {
                b.y = info.bounds.y + info.bounds.height;
            }
        }
        if (!vert) {
            if (n = this.closeNeighbor(infos, kachel, 'up')) {
                b.y = n.bounds.y + n.bounds.height;
            } else if (n = this.closeNeighbor(infos, kachel, 'down')) {
                b.y = n.bounds.y - b.height;
            }
        }
        if (!horz) {
            if (n = this.closeNeighbor(infos, kachel, 'right')) {
                b.x = n.bounds.x - b.width;
            } else if (n = this.closeNeighbor(infos, kachel, 'left')) {
                b.x = n.bounds.x + n.bounds.width;
            }
        }
        return b;
    };

    return Bounds;

})();

module.exports = Bounds;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/bounds.coffee