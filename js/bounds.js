// koffee 1.3.0

/*
0000000     0000000   000   000  000   000  0000000     0000000
000   000  000   000  000   000  0000  000  000   000  000     
0000000    000   000  000   000  000 0 000  000   000  0000000 
000   000  000   000  000   000  000  0000  000   000       000
0000000     0000000    0000000   000   000  0000000    0000000
 */
var Bounds, clamp, electron, klog, ref;

ref = require('kxk'), clamp = ref.clamp, klog = ref.klog;

electron = require('electron');

Bounds = (function() {
    function Bounds() {}

    Bounds.sw = function() {
        return electron.screen.getPrimaryDisplay().workAreaSize.width;
    };

    Bounds.sh = function() {
        return electron.screen.getPrimaryDisplay().workAreaSize.height;
    };

    Bounds.sy = function() {
        return electron.screen.getPrimaryDisplay().workAreaSize.y;
    };

    Bounds.onScreen = function(b) {
        var sh, sw, sy;
        sw = this.sw();
        sh = this.sh();
        sy = this.sy();
        b.x = clamp(0, sw - b.width, b.x);
        b.y = clamp(0, sh - b.height, b.y);
        if (b.x + b.width > sw - b.width) {
            b.x = sw - b.width;
        }
        if (b.y + b.height > sh - b.height) {
            b.y = sh - b.height;
        }
        if (b.x < b.width) {
            b.x = 0;
        }
        if (b.y - sy < b.height) {
            b.y = sy;
        }
        return b;
    };

    Bounds.onGrid = function(b) {
        var snap;
        klog('size', this.sw(), this.sh(), this.sy(), electron.screen.getPrimaryDisplay().workAreaSize);
        snap = 32;
        klog('snap', b.x, b.x % snap);
        if (b.x % snap) {
            klog('mod', b.x % snap);
        }
        return b;
    };

    Bounds.onGrid2 = function(b) {
        var d, snap;
        snap = parseInt(b.width / 2);
        if (Math.abs(b.x) < snap) {
            d = b.x;
            b.x -= d;
        } else if (Math.abs(b.x + b.width - this.sw()) < snap) {
            d = Math.abs(b.x + b.width - this.sw());
            b.x += d;
        }
        if (Math.abs(b.y) < snap) {
            d = b.y;
            b.y -= d;
        } else if (Math.abs(b.y + b.height - this.sh()) < snap) {
            d = Math.abs(b.y + b.height - this.sh());
            b.y += d;
        }
        return b;
    };

    Bounds.noOverlap = function(b) {
        return b;
    };

    return Bounds;

})();

module.exports = Bounds;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm91bmRzLmpzIiwic291cmNlUm9vdCI6Ii4iLCJzb3VyY2VzIjpbIiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOzs7Ozs7O0FBQUEsSUFBQTs7QUFRQSxNQUFrQixPQUFBLENBQVEsS0FBUixDQUFsQixFQUFFLGlCQUFGLEVBQVM7O0FBRVQsUUFBQSxHQUFXLE9BQUEsQ0FBUSxVQUFSOztBQUVMOzs7SUFFRixNQUFDLENBQUEsRUFBRCxHQUFLLFNBQUE7ZUFBRyxRQUFRLENBQUMsTUFBTSxDQUFDLGlCQUFoQixDQUFBLENBQW1DLENBQUMsWUFBWSxDQUFDO0lBQXBEOztJQUNMLE1BQUMsQ0FBQSxFQUFELEdBQUssU0FBQTtlQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsaUJBQWhCLENBQUEsQ0FBbUMsQ0FBQyxZQUFZLENBQUM7SUFBcEQ7O0lBQ0wsTUFBQyxDQUFBLEVBQUQsR0FBSyxTQUFBO2VBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxpQkFBaEIsQ0FBQSxDQUFtQyxDQUFDLFlBQVksQ0FBQztJQUFwRDs7SUFFTCxNQUFDLENBQUEsUUFBRCxHQUFXLFNBQUMsQ0FBRDtBQUNQLFlBQUE7UUFBQSxFQUFBLEdBQUssSUFBQyxDQUFBLEVBQUQsQ0FBQTtRQUNMLEVBQUEsR0FBSyxJQUFDLENBQUEsRUFBRCxDQUFBO1FBQ0wsRUFBQSxHQUFLLElBQUMsQ0FBQSxFQUFELENBQUE7UUFFTCxDQUFDLENBQUMsQ0FBRixHQUFNLEtBQUEsQ0FBTSxDQUFOLEVBQVMsRUFBQSxHQUFLLENBQUMsQ0FBQyxLQUFoQixFQUF3QixDQUFDLENBQUMsQ0FBMUI7UUFDTixDQUFDLENBQUMsQ0FBRixHQUFNLEtBQUEsQ0FBTSxDQUFOLEVBQVMsRUFBQSxHQUFLLENBQUMsQ0FBQyxNQUFoQixFQUF3QixDQUFDLENBQUMsQ0FBMUI7UUFFTixJQUFHLENBQUMsQ0FBQyxDQUFGLEdBQU0sQ0FBQyxDQUFDLEtBQVIsR0FBaUIsRUFBQSxHQUFLLENBQUMsQ0FBQyxLQUEzQjtZQUFzQyxDQUFDLENBQUMsQ0FBRixHQUFNLEVBQUEsR0FBRyxDQUFDLENBQUMsTUFBakQ7O1FBQ0EsSUFBRyxDQUFDLENBQUMsQ0FBRixHQUFNLENBQUMsQ0FBQyxNQUFSLEdBQWlCLEVBQUEsR0FBSyxDQUFDLENBQUMsTUFBM0I7WUFBdUMsQ0FBQyxDQUFDLENBQUYsR0FBTSxFQUFBLEdBQUcsQ0FBQyxDQUFDLE9BQWxEOztRQUNBLElBQUcsQ0FBQyxDQUFDLENBQUYsR0FBTSxDQUFDLENBQUMsS0FBWDtZQUF1QixDQUFDLENBQUMsQ0FBRixHQUFNLEVBQTdCOztRQUNBLElBQUcsQ0FBQyxDQUFDLENBQUYsR0FBTSxFQUFOLEdBQVcsQ0FBQyxDQUFDLE1BQWhCO1lBQTRCLENBQUMsQ0FBQyxDQUFGLEdBQU0sR0FBbEM7O2VBRUE7SUFiTzs7SUFlWCxNQUFDLENBQUEsTUFBRCxHQUFTLFNBQUMsQ0FBRDtBQUNMLFlBQUE7UUFBQSxJQUFBLENBQUssTUFBTCxFQUFZLElBQUMsQ0FBQSxFQUFELENBQUEsQ0FBWixFQUFtQixJQUFDLENBQUEsRUFBRCxDQUFBLENBQW5CLEVBQTBCLElBQUMsQ0FBQSxFQUFELENBQUEsQ0FBMUIsRUFBaUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxpQkFBaEIsQ0FBQSxDQUFtQyxDQUFDLFlBQXJFO1FBQ0EsSUFBQSxHQUFPO1FBQ1AsSUFBQSxDQUFLLE1BQUwsRUFBWSxDQUFDLENBQUMsQ0FBZCxFQUFpQixDQUFDLENBQUMsQ0FBRixHQUFNLElBQXZCO1FBQ0EsSUFBRyxDQUFDLENBQUMsQ0FBRixHQUFNLElBQVQ7WUFDSSxJQUFBLENBQUssS0FBTCxFQUFXLENBQUMsQ0FBQyxDQUFGLEdBQU0sSUFBakIsRUFESjs7ZUFHQTtJQVBLOztJQVNULE1BQUMsQ0FBQSxPQUFELEdBQVUsU0FBQyxDQUFEO0FBRU4sWUFBQTtRQUFBLElBQUEsR0FBTyxRQUFBLENBQVMsQ0FBQyxDQUFDLEtBQUYsR0FBUSxDQUFqQjtRQUVQLElBQUcsSUFBSSxDQUFDLEdBQUwsQ0FBUyxDQUFDLENBQUMsQ0FBWCxDQUFBLEdBQWdCLElBQW5CO1lBQ0ksQ0FBQSxHQUFJLENBQUMsQ0FBQztZQUNOLENBQUMsQ0FBQyxDQUFGLElBQU8sRUFGWDtTQUFBLE1BR0ssSUFBRyxJQUFJLENBQUMsR0FBTCxDQUFTLENBQUMsQ0FBQyxDQUFGLEdBQU0sQ0FBQyxDQUFDLEtBQVIsR0FBZ0IsSUFBQyxDQUFBLEVBQUQsQ0FBQSxDQUF6QixDQUFBLEdBQWtDLElBQXJDO1lBQ0QsQ0FBQSxHQUFJLElBQUksQ0FBQyxHQUFMLENBQVMsQ0FBQyxDQUFDLENBQUYsR0FBTSxDQUFDLENBQUMsS0FBUixHQUFnQixJQUFDLENBQUEsRUFBRCxDQUFBLENBQXpCO1lBQ0osQ0FBQyxDQUFDLENBQUYsSUFBTyxFQUZOOztRQUlMLElBQUcsSUFBSSxDQUFDLEdBQUwsQ0FBUyxDQUFDLENBQUMsQ0FBWCxDQUFBLEdBQWdCLElBQW5CO1lBQ0ksQ0FBQSxHQUFJLENBQUMsQ0FBQztZQUNOLENBQUMsQ0FBQyxDQUFGLElBQU8sRUFGWDtTQUFBLE1BR0ssSUFBRyxJQUFJLENBQUMsR0FBTCxDQUFTLENBQUMsQ0FBQyxDQUFGLEdBQU0sQ0FBQyxDQUFDLE1BQVIsR0FBaUIsSUFBQyxDQUFBLEVBQUQsQ0FBQSxDQUExQixDQUFBLEdBQW1DLElBQXRDO1lBQ0QsQ0FBQSxHQUFJLElBQUksQ0FBQyxHQUFMLENBQVMsQ0FBQyxDQUFDLENBQUYsR0FBTSxDQUFDLENBQUMsTUFBUixHQUFpQixJQUFDLENBQUEsRUFBRCxDQUFBLENBQTFCO1lBQ0osQ0FBQyxDQUFDLENBQUYsSUFBTyxFQUZOOztlQUdMO0lBakJNOztJQW1CVixNQUFDLENBQUEsU0FBRCxHQUFZLFNBQUMsQ0FBRDtlQUFPO0lBQVA7Ozs7OztBQUVoQixNQUFNLENBQUMsT0FBUCxHQUFpQiIsInNvdXJjZXNDb250ZW50IjpbIiMjI1xuMDAwMDAwMCAgICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAwMDAwICAgICAwMDAwMDAwXG4wMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAwICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICBcbjAwMDAwMDAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAwIDAwMCAgMDAwICAgMDAwICAwMDAwMDAwIFxuMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAwMDAwICAwMDAgICAwMDAgICAgICAgMDAwXG4wMDAwMDAwICAgICAwMDAwMDAwICAgIDAwMDAwMDAgICAwMDAgICAwMDAgIDAwMDAwMDAgICAgMDAwMDAwMCBcbiMjI1xuXG57IGNsYW1wLCBrbG9nIH0gPSByZXF1aXJlICdreGsnXG5cbmVsZWN0cm9uID0gcmVxdWlyZSAnZWxlY3Ryb24nXG5cbmNsYXNzIEJvdW5kc1xuICAgIFxuICAgIEBzdzogLT4gZWxlY3Ryb24uc2NyZWVuLmdldFByaW1hcnlEaXNwbGF5KCkud29ya0FyZWFTaXplLndpZHRoXG4gICAgQHNoOiAtPiBlbGVjdHJvbi5zY3JlZW4uZ2V0UHJpbWFyeURpc3BsYXkoKS53b3JrQXJlYVNpemUuaGVpZ2h0XG4gICAgQHN5OiAtPiBlbGVjdHJvbi5zY3JlZW4uZ2V0UHJpbWFyeURpc3BsYXkoKS53b3JrQXJlYVNpemUueVxuXG4gICAgQG9uU2NyZWVuOiAoYikgLT5cbiAgICAgICAgc3cgPSBAc3coKVxuICAgICAgICBzaCA9IEBzaCgpXG4gICAgICAgIHN5ID0gQHN5KClcbiAgICAgICAgXG4gICAgICAgIGIueCA9IGNsYW1wIDAsIHN3IC0gYi53aWR0aCwgIGIueFxuICAgICAgICBiLnkgPSBjbGFtcCAwLCBzaCAtIGIuaGVpZ2h0LCBiLnlcbiAgICAgICAgXG4gICAgICAgIGlmIGIueCArIGIud2lkdGggID4gc3cgLSBiLndpZHRoIHRoZW4gYi54ID0gc3ctYi53aWR0aFxuICAgICAgICBpZiBiLnkgKyBiLmhlaWdodCA+IHNoIC0gYi5oZWlnaHQgdGhlbiBiLnkgPSBzaC1iLmhlaWdodFxuICAgICAgICBpZiBiLnggPCBiLndpZHRoICB0aGVuIGIueCA9IDBcbiAgICAgICAgaWYgYi55IC0gc3kgPCBiLmhlaWdodCB0aGVuIGIueSA9IHN5XG4gICAgICAgIFxuICAgICAgICBiXG4gICAgICAgIFxuICAgIEBvbkdyaWQ6IChiKSAtPlxuICAgICAgICBrbG9nICdzaXplJyBAc3coKSwgQHNoKCksIEBzeSgpLCBlbGVjdHJvbi5zY3JlZW4uZ2V0UHJpbWFyeURpc3BsYXkoKS53b3JrQXJlYVNpemVcbiAgICAgICAgc25hcCA9IDMyXG4gICAgICAgIGtsb2cgJ3NuYXAnIGIueCwgYi54ICUgc25hcFxuICAgICAgICBpZiBiLnggJSBzbmFwXG4gICAgICAgICAgICBrbG9nICdtb2QnIGIueCAlIHNuYXBcbiAgICAgICAgICAgICMgYi54IC09IGIueCAlIHNuYXBcbiAgICAgICAgYlxuICAgICAgICBcbiAgICBAb25HcmlkMjogKGIpIC0+XG4gICAgICAgIFxuICAgICAgICBzbmFwID0gcGFyc2VJbnQgYi53aWR0aC8yXG4gICAgICAgIFxuICAgICAgICBpZiBNYXRoLmFicyhiLngpIDwgc25hcCBcbiAgICAgICAgICAgIGQgPSBiLnhcbiAgICAgICAgICAgIGIueCAtPSBkXG4gICAgICAgIGVsc2UgaWYgTWF0aC5hYnMoYi54ICsgYi53aWR0aCAtIEBzdygpKSA8IHNuYXAgXG4gICAgICAgICAgICBkID0gTWF0aC5hYnMoYi54ICsgYi53aWR0aCAtIEBzdygpKVxuICAgICAgICAgICAgYi54ICs9IGRcblxuICAgICAgICBpZiBNYXRoLmFicyhiLnkpIDwgc25hcCBcbiAgICAgICAgICAgIGQgPSBiLnlcbiAgICAgICAgICAgIGIueSAtPSBkXG4gICAgICAgIGVsc2UgaWYgTWF0aC5hYnMoYi55ICsgYi5oZWlnaHQgLSBAc2goKSkgPCBzbmFwIFxuICAgICAgICAgICAgZCA9IE1hdGguYWJzKGIueSArIGIuaGVpZ2h0IC0gQHNoKCkpXG4gICAgICAgICAgICBiLnkgKz0gZFxuICAgICAgICBiXG4gICAgICAgIFxuICAgIEBub092ZXJsYXA6IChiKSAtPiBiXG5cbm1vZHVsZS5leHBvcnRzID0gQm91bmRzXG4iXX0=
//# sourceURL=../coffee/bounds.coffee