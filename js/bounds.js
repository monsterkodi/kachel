// koffee 1.3.0

/*
0000000     0000000   000   000  000   000  0000000     0000000
000   000  000   000  000   000  0000  000  000   000  000     
0000000    000   000  000   000  000 0 000  000   000  0000000 
000   000  000   000  000   000  000  0000  000   000       000
0000000     0000000    0000000   000   000  0000000    0000000
 */
var Bounds, clamp, electron, klog, ref;

ref = require('kxk'), clamp = ref.clamp, klog = ref.klog;

electron = require('electron');

Bounds = (function() {
    function Bounds() {}

    Bounds.sw = function() {
        return electron.screen.getPrimaryDisplay().workAreaSize.width;
    };

    Bounds.sh = function() {
        return electron.screen.getPrimaryDisplay().workAreaSize.height;
    };

    Bounds.sy = function() {
        return electron.screen.getPrimaryDisplay().workAreaSize.y;
    };

    Bounds.onScreen = function(b) {
        var sh, sw, sy;
        sw = this.sw();
        sh = this.sh();
        sy = this.sy();
        b.x = clamp(0, sw - b.width, b.x);
        b.y = clamp(0, sh - b.height, b.y);
        if (b.x + b.width > sw - b.width) {
            b.x = sw - b.width;
        }
        if (b.y + b.height > sh - b.height) {
            b.y = sh - b.height;
        }
        if (b.x < b.width) {
            b.x = 0;
        }
        if (b.y - sy < b.height) {
            b.y = sy;
        }
        return b;
    };

    Bounds.onGrid = function(b) {
        var snap;
        snap = 32;
        return b;
    };

    Bounds.onGrid2 = function(b) {
        var d, snap;
        snap = parseInt(b.width / 2);
        if (Math.abs(b.x) < snap) {
            d = b.x;
            b.x -= d;
        } else if (Math.abs(b.x + b.width - this.sw()) < snap) {
            d = Math.abs(b.x + b.width - this.sw());
            b.x += d;
        }
        if (Math.abs(b.y) < snap) {
            d = b.y;
            b.y -= d;
        } else if (Math.abs(b.y + b.height - this.sh()) < snap) {
            d = Math.abs(b.y + b.height - this.sh());
            b.y += d;
        }
        return b;
    };

    Bounds.noOverlap = function(b) {
        return b;
    };

    return Bounds;

})();

module.exports = Bounds;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm91bmRzLmpzIiwic291cmNlUm9vdCI6Ii4iLCJzb3VyY2VzIjpbIiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOzs7Ozs7O0FBQUEsSUFBQTs7QUFRQSxNQUFrQixPQUFBLENBQVEsS0FBUixDQUFsQixFQUFFLGlCQUFGLEVBQVM7O0FBRVQsUUFBQSxHQUFXLE9BQUEsQ0FBUSxVQUFSOztBQUVMOzs7SUFFRixNQUFDLENBQUEsRUFBRCxHQUFLLFNBQUE7ZUFBRyxRQUFRLENBQUMsTUFBTSxDQUFDLGlCQUFoQixDQUFBLENBQW1DLENBQUMsWUFBWSxDQUFDO0lBQXBEOztJQUNMLE1BQUMsQ0FBQSxFQUFELEdBQUssU0FBQTtlQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsaUJBQWhCLENBQUEsQ0FBbUMsQ0FBQyxZQUFZLENBQUM7SUFBcEQ7O0lBQ0wsTUFBQyxDQUFBLEVBQUQsR0FBSyxTQUFBO2VBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxpQkFBaEIsQ0FBQSxDQUFtQyxDQUFDLFlBQVksQ0FBQztJQUFwRDs7SUFFTCxNQUFDLENBQUEsUUFBRCxHQUFXLFNBQUMsQ0FBRDtBQUVQLFlBQUE7UUFBQSxFQUFBLEdBQUssSUFBQyxDQUFBLEVBQUQsQ0FBQTtRQUNMLEVBQUEsR0FBSyxJQUFDLENBQUEsRUFBRCxDQUFBO1FBQ0wsRUFBQSxHQUFLLElBQUMsQ0FBQSxFQUFELENBQUE7UUFFTCxDQUFDLENBQUMsQ0FBRixHQUFNLEtBQUEsQ0FBTSxDQUFOLEVBQVMsRUFBQSxHQUFLLENBQUMsQ0FBQyxLQUFoQixFQUF3QixDQUFDLENBQUMsQ0FBMUI7UUFDTixDQUFDLENBQUMsQ0FBRixHQUFNLEtBQUEsQ0FBTSxDQUFOLEVBQVMsRUFBQSxHQUFLLENBQUMsQ0FBQyxNQUFoQixFQUF3QixDQUFDLENBQUMsQ0FBMUI7UUFFTixJQUFHLENBQUMsQ0FBQyxDQUFGLEdBQU0sQ0FBQyxDQUFDLEtBQVIsR0FBaUIsRUFBQSxHQUFLLENBQUMsQ0FBQyxLQUEzQjtZQUF1QyxDQUFDLENBQUMsQ0FBRixHQUFNLEVBQUEsR0FBRyxDQUFDLENBQUMsTUFBbEQ7O1FBQ0EsSUFBRyxDQUFDLENBQUMsQ0FBRixHQUFNLENBQUMsQ0FBQyxNQUFSLEdBQWlCLEVBQUEsR0FBSyxDQUFDLENBQUMsTUFBM0I7WUFBdUMsQ0FBQyxDQUFDLENBQUYsR0FBTSxFQUFBLEdBQUcsQ0FBQyxDQUFDLE9BQWxEOztRQUNBLElBQUcsQ0FBQyxDQUFDLENBQUYsR0FBVyxDQUFDLENBQUMsS0FBaEI7WUFBNEIsQ0FBQyxDQUFDLENBQUYsR0FBTSxFQUFsQzs7UUFDQSxJQUFHLENBQUMsQ0FBQyxDQUFGLEdBQU0sRUFBTixHQUFXLENBQUMsQ0FBQyxNQUFoQjtZQUE0QixDQUFDLENBQUMsQ0FBRixHQUFNLEdBQWxDOztlQUVBO0lBZE87O0lBZ0JYLE1BQUMsQ0FBQSxNQUFELEdBQVMsU0FBQyxDQUFEO0FBRUwsWUFBQTtRQUFBLElBQUEsR0FBTztlQUtQO0lBUEs7O0lBU1QsTUFBQyxDQUFBLE9BQUQsR0FBVSxTQUFDLENBQUQ7QUFFTixZQUFBO1FBQUEsSUFBQSxHQUFPLFFBQUEsQ0FBUyxDQUFDLENBQUMsS0FBRixHQUFRLENBQWpCO1FBRVAsSUFBRyxJQUFJLENBQUMsR0FBTCxDQUFTLENBQUMsQ0FBQyxDQUFYLENBQUEsR0FBZ0IsSUFBbkI7WUFDSSxDQUFBLEdBQUksQ0FBQyxDQUFDO1lBQ04sQ0FBQyxDQUFDLENBQUYsSUFBTyxFQUZYO1NBQUEsTUFHSyxJQUFHLElBQUksQ0FBQyxHQUFMLENBQVMsQ0FBQyxDQUFDLENBQUYsR0FBTSxDQUFDLENBQUMsS0FBUixHQUFnQixJQUFDLENBQUEsRUFBRCxDQUFBLENBQXpCLENBQUEsR0FBa0MsSUFBckM7WUFDRCxDQUFBLEdBQUksSUFBSSxDQUFDLEdBQUwsQ0FBUyxDQUFDLENBQUMsQ0FBRixHQUFNLENBQUMsQ0FBQyxLQUFSLEdBQWdCLElBQUMsQ0FBQSxFQUFELENBQUEsQ0FBekI7WUFDSixDQUFDLENBQUMsQ0FBRixJQUFPLEVBRk47O1FBSUwsSUFBRyxJQUFJLENBQUMsR0FBTCxDQUFTLENBQUMsQ0FBQyxDQUFYLENBQUEsR0FBZ0IsSUFBbkI7WUFDSSxDQUFBLEdBQUksQ0FBQyxDQUFDO1lBQ04sQ0FBQyxDQUFDLENBQUYsSUFBTyxFQUZYO1NBQUEsTUFHSyxJQUFHLElBQUksQ0FBQyxHQUFMLENBQVMsQ0FBQyxDQUFDLENBQUYsR0FBTSxDQUFDLENBQUMsTUFBUixHQUFpQixJQUFDLENBQUEsRUFBRCxDQUFBLENBQTFCLENBQUEsR0FBbUMsSUFBdEM7WUFDRCxDQUFBLEdBQUksSUFBSSxDQUFDLEdBQUwsQ0FBUyxDQUFDLENBQUMsQ0FBRixHQUFNLENBQUMsQ0FBQyxNQUFSLEdBQWlCLElBQUMsQ0FBQSxFQUFELENBQUEsQ0FBMUI7WUFDSixDQUFDLENBQUMsQ0FBRixJQUFPLEVBRk47O2VBR0w7SUFqQk07O0lBbUJWLE1BQUMsQ0FBQSxTQUFELEdBQVksU0FBQyxDQUFEO2VBQU87SUFBUDs7Ozs7O0FBRWhCLE1BQU0sQ0FBQyxPQUFQLEdBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiIyMjXG4wMDAwMDAwICAgICAwMDAwMDAwICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMDAwMDAgICAgIDAwMDAwMDBcbjAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMDAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAgIFxuMDAwMDAwMCAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwIDAgMDAwICAwMDAgICAwMDAgIDAwMDAwMDAgXG4wMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgIDAwMDAgIDAwMCAgIDAwMCAgICAgICAwMDBcbjAwMDAwMDAgICAgIDAwMDAwMDAgICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgICAwMDAwMDAwIFxuIyMjXG5cbnsgY2xhbXAsIGtsb2cgfSA9IHJlcXVpcmUgJ2t4aydcblxuZWxlY3Ryb24gPSByZXF1aXJlICdlbGVjdHJvbidcblxuY2xhc3MgQm91bmRzXG4gICAgXG4gICAgQHN3OiAtPiBlbGVjdHJvbi5zY3JlZW4uZ2V0UHJpbWFyeURpc3BsYXkoKS53b3JrQXJlYVNpemUud2lkdGhcbiAgICBAc2g6IC0+IGVsZWN0cm9uLnNjcmVlbi5nZXRQcmltYXJ5RGlzcGxheSgpLndvcmtBcmVhU2l6ZS5oZWlnaHRcbiAgICBAc3k6IC0+IGVsZWN0cm9uLnNjcmVlbi5nZXRQcmltYXJ5RGlzcGxheSgpLndvcmtBcmVhU2l6ZS55XG5cbiAgICBAb25TY3JlZW46IChiKSAtPlxuICAgICAgICBcbiAgICAgICAgc3cgPSBAc3coKVxuICAgICAgICBzaCA9IEBzaCgpXG4gICAgICAgIHN5ID0gQHN5KClcbiAgICAgICAgXG4gICAgICAgIGIueCA9IGNsYW1wIDAsIHN3IC0gYi53aWR0aCwgIGIueFxuICAgICAgICBiLnkgPSBjbGFtcCAwLCBzaCAtIGIuaGVpZ2h0LCBiLnlcbiAgICAgICAgXG4gICAgICAgIGlmIGIueCArIGIud2lkdGggID4gc3cgLSBiLndpZHRoICB0aGVuIGIueCA9IHN3LWIud2lkdGhcbiAgICAgICAgaWYgYi55ICsgYi5oZWlnaHQgPiBzaCAtIGIuaGVpZ2h0IHRoZW4gYi55ID0gc2gtYi5oZWlnaHRcbiAgICAgICAgaWYgYi54ICAgICAgPCBiLndpZHRoICB0aGVuIGIueCA9IDBcbiAgICAgICAgaWYgYi55IC0gc3kgPCBiLmhlaWdodCB0aGVuIGIueSA9IHN5XG4gICAgICAgIFxuICAgICAgICBiXG4gICAgICAgIFxuICAgIEBvbkdyaWQ6IChiKSAtPlxuICAgICAgICAjIGtsb2cgJ3NpemUnIEBzdygpLCBAc2goKSwgQHN5KCksIGVsZWN0cm9uLnNjcmVlbi5nZXRQcmltYXJ5RGlzcGxheSgpLndvcmtBcmVhU2l6ZVxuICAgICAgICBzbmFwID0gMzJcbiAgICAgICAgIyBrbG9nICdzbmFwJyBiLngsIGIueCAlIHNuYXBcbiAgICAgICAgIyBpZiBiLnggJSBzbmFwXG4gICAgICAgICAgICAjIGtsb2cgJ21vZCcgYi54ICUgc25hcFxuICAgICAgICAgICAgIyBiLnggLT0gYi54ICUgc25hcFxuICAgICAgICBiXG4gICAgICAgIFxuICAgIEBvbkdyaWQyOiAoYikgLT5cbiAgICAgICAgXG4gICAgICAgIHNuYXAgPSBwYXJzZUludCBiLndpZHRoLzJcbiAgICAgICAgXG4gICAgICAgIGlmIE1hdGguYWJzKGIueCkgPCBzbmFwIFxuICAgICAgICAgICAgZCA9IGIueFxuICAgICAgICAgICAgYi54IC09IGRcbiAgICAgICAgZWxzZSBpZiBNYXRoLmFicyhiLnggKyBiLndpZHRoIC0gQHN3KCkpIDwgc25hcCBcbiAgICAgICAgICAgIGQgPSBNYXRoLmFicyhiLnggKyBiLndpZHRoIC0gQHN3KCkpXG4gICAgICAgICAgICBiLnggKz0gZFxuXG4gICAgICAgIGlmIE1hdGguYWJzKGIueSkgPCBzbmFwIFxuICAgICAgICAgICAgZCA9IGIueVxuICAgICAgICAgICAgYi55IC09IGRcbiAgICAgICAgZWxzZSBpZiBNYXRoLmFicyhiLnkgKyBiLmhlaWdodCAtIEBzaCgpKSA8IHNuYXAgXG4gICAgICAgICAgICBkID0gTWF0aC5hYnMoYi55ICsgYi5oZWlnaHQgLSBAc2goKSlcbiAgICAgICAgICAgIGIueSArPSBkXG4gICAgICAgIGJcbiAgICAgICAgXG4gICAgQG5vT3ZlcmxhcDogKGIpIC0+IGJcblxubW9kdWxlLmV4cG9ydHMgPSBCb3VuZHNcbiJdfQ==
//# sourceURL=../coffee/bounds.coffee