// koffee 1.12.0

/*
000   000  00000000   000   000  000   000  000      
000  000   000   000  000  000   000  000   000      
0000000    0000000    0000000    0000000    000      
000  000   000   000  000  000   000  000   000      
000   000  000   000  000   000  000   000  0000000
 */
var Krkkl, clamp, electron, elem, fs, keyinfo, klog, kpos, randInt, randIntRange, randRange, ref, slash,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ref = require('kxk'), elem = ref.elem, slash = ref.slash, kpos = ref.kpos, clamp = ref.clamp, keyinfo = ref.keyinfo, randRange = ref.randRange, randInt = ref.randInt, randIntRange = ref.randIntRange, klog = ref.klog, fs = ref.fs;

electron = require('electron');

Krkkl = (function() {
    function Krkkl() {
        this.animation = bind(this.animation, this);
        this.blackOut = bind(this.blackOut, this);
        this.fadeOut = bind(this.fadeOut, this);
        this.close = bind(this.close, this);
        this.onKeyDown = bind(this.onKeyDown, this);
        this.onMouseMove = bind(this.onMouseMove, this);
        var display, sh, sw, xo, yo;
        window.onerror = function(msg, source, line, col, err) {
            electron.remote.getCurrentWindow().openDevTools({
                mode: 'detach'
            });
            klog('window.onerror', msg, source, line, col);
            console.error('window.onerror', msg, source, line, col);
            return true;
        };
        document.body.addEventListener('mousedown', this.close);
        document.body.addEventListener('keydown', this.onKeyDown);
        document.body.addEventListener('mousemove', this.onMouseMove);
        document.body.focus();
        this.chooseOptions = [[1, 2, 4, 5], [0, 2, 3, 5], [0, 3, 4], [1, 2], [0, 1, 2], [0, 1, 2, 4]];
        this.fadeSteps = 128;
        this.fade = 0;
        display = electron.remote.screen.getPrimaryDisplay();
        sw = display.size.width;
        sh = display.size.height;
        this.scalef = display.scaleFactor;
        this.width = sw * this.scalef;
        this.height = sh * this.scalef;
        this.canvas = elem('canvas', {
            width: this.width,
            height: this.height
        });
        this.ctx = this.canvas.getContext('2d');
        if (this.scalef !== 1) {
            xo = -this.width / 2 + sw / 2;
            yo = -this.height / 2 + sh / 2;
            this.canvas.style.transform = "translate3d(" + xo + "px, " + yo + "px, 0px) scale3d(" + (1 / this.scalef) + ", " + (1 / this.scalef) + ", 1)";
        }
        document.body.appendChild(this.canvas);
        this.fadeOut();
    }

    Krkkl.prototype.nextRun = function() {
        this.fill('rgb(0,0,0)');
        this.cubeSize = randIntRange(6, 32);
        this.size = kpos(parseInt(this.width / this.cubeSize), parseInt(this.height / this.cubeSize));
        this.cubesPerF = parseInt(Math.max(1, (33 - this.cubeSize) * randRange(0.1, 0.3)));
        this.cubesMax = parseInt(randIntRange(400000, 600000) / this.cubeSize);
        this.dirCounts = [10, 10, 10, 10, 10, 10];
        this.dirProb = randRange(0.001, 0.9);
        this.colorSpeed = randRange(0.003, 0.1);
        this.red = 0;
        this.green = 0;
        this.blue = 0;
        this.lastDir = 0;
        this.cubeCount = 0;
        this.pos = kpos(parseInt((this.width / this.cubeSize) / 2), parseInt((this.height / this.cubeSize) / 2));
        return this.animation();
    };

    Krkkl.prototype.onMouseMove = function(event) {
        if (this.startpos != null) {
            this.startpos;
        } else {
            this.startpos = kpos(event);
        }
        if (kpos(event).dist(this.startpos) > 10) {
            return this.close();
        }
    };

    Krkkl.prototype.onKeyDown = function(event) {
        var combo, key, ref1, win;
        ref1 = keyinfo.forEvent(event), key = ref1.key, combo = ref1.combo;
        switch (combo) {
            case 'n':
                return this.cubeCount = this.cubesMax;
            case 'f3':
                win = electron.remote.getCurrentWindow();
                win.capturePage((function(_this) {
                    return function(img) {
                        var file;
                        file = slash.resolve("~/Desktop/krkkl-screenshot.png");
                        return fs.writeFile(file, img.toPNG(), function(err) {});
                    };
                })(this));
                return;
            default:
                klog('combo', combo);
        }
        return this.close();
    };

    Krkkl.prototype.close = function() {
        var w;
        document.body.removeEventListener('keydown', this.close);
        document.body.removeEventListener('mousedown', this.close);
        document.body.removeEventListener('mousemove', this.close);
        w = electron.remote.getCurrentWindow();
        return w.close();
    };

    Krkkl.prototype.fadeOut = function() {
        if (this.fade < this.fadeSteps) {
            this.canvas.width = this.canvas.width;
            this.fade += 1;
            this.fill("rgba(0,0,0," + (this.fade / this.fadeSteps) + ")");
            return window.requestAnimationFrame(this.fadeOut);
        } else {
            this.fadeSteps = 40;
            this.fade = 0;
            return this.nextRun();
        }
    };

    Krkkl.prototype.blackOut = function() {
        if (this.fade < this.fadeSteps) {
            this.fade += 1;
            this.fill("rgba(0,0,0,0.1)");
            return window.setTimeout(this.blackOut, 40);
        } else {
            this.fadeSteps = 40;
            this.fade = 0;
            return this.nextRun();
        }
    };

    Krkkl.prototype.fill = function(color) {
        this.ctx.fillStyle = color;
        return this.ctx.fillRect(0, 0, this.width, this.height);
    };

    Krkkl.prototype.animation = function() {
        if (this.onFrame()) {
            return window.requestAnimationFrame(this.animation);
        }
    };

    Krkkl.prototype.onFrame = function() {
        var c, j, nextDir, ref1, skip;
        for (c = j = 0, ref1 = this.cubesPerF; 0 <= ref1 ? j < ref1 : j > ref1; c = 0 <= ref1 ? ++j : --j) {
            if (Math.random() < this.dirProb) {
                nextDir = this.changeDirection(this.lastDir);
            } else {
                nextDir = this.lastDir;
            }
            this.nextPos(nextDir);
            if (this.pos.x < 1 || this.pos.y < 2 || this.pos.x >= this.size.x || this.pos.y >= this.size.y) {
                nextDir = randInt(6);
                if (this.pos.x < 1) {
                    this.pos.x = this.size.x - 1;
                } else if (this.pos.x > this.size.x - 1) {
                    this.pos.x = 1;
                }
                if (this.pos.y < 2) {
                    this.pos.y = this.size.y - 2;
                } else if (this.pos.y > this.size.y - 1) {
                    this.pos.y = 2;
                }
            }
            this.nextColor(nextDir);
            skip = null;
            if (this.cubeCount) {
                switch (nextDir) {
                    case 3:
                        skip = 0;
                        break;
                    case 4:
                        skip = 1;
                        break;
                    case 5:
                        skip = 2;
                }
            }
            this.drawCube(skip);
            this.cubeCount += 1;
            this.lastDir = nextDir;
        }
        if (this.cubeCount >= this.cubesMax) {
            this.blackOut();
            return false;
        }
        return true;
    };

    Krkkl.prototype.changeDirection = function(lastDir) {
        var i, inv, nextDir, options, r, s;
        options = this.chooseOptions[lastDir];
        i = 0;
        s = 0;
        while (i < options.length) {
            inv = 1.0 / this.dirCounts[options[i]];
            s += inv;
            i++;
        }
        r = Math.random() * s;
        i = options.length - 1;
        s -= 1.0 / this.dirCounts[options[i]];
        while (i > 0 && r < s) {
            s -= 1.0 / this.dirCounts[options[--i]];
        }
        nextDir = options[i];
        this.dirCounts[nextDir]++;
        return nextDir;
    };

    Krkkl.prototype.nextPos = function(nextDir) {
        switch (nextDir) {
            case 0:
                return this.pos.y -= 1;
            case 1:
                if (this.pos.x % 2 === 0) {
                    this.pos.y += 1;
                }
                return this.pos.x -= 1;
            case 2:
                if (this.pos.x % 2 === 0) {
                    this.pos.y += 1;
                }
                return this.pos.x += 1;
            case 3:
                return this.pos.y += 1;
            case 4:
                if (this.pos.x % 2 === 1) {
                    this.pos.y -= 1;
                }
                return this.pos.x += 1;
            case 5:
                if (this.pos.x % 2 === 1) {
                    this.pos.y -= 1;
                }
                return this.pos.x -= 1;
        }
    };

    Krkkl.prototype.nextColor = function(nextDir) {
        var hd, ld;
        hd = this.colorSpeed;
        ld = this.colorSpeed * 0.1;
        switch (nextDir) {
            case 0:
                this.red = clamp(0, 1, this.red + hd);
                this.green = clamp(0, 1, this.green - ld);
                return this.blue = clamp(0, 1, this.blue - ld);
            case 3:
                this.red = clamp(0, 1, this.red + hd);
                this.green = clamp(0, 1, this.green - hd);
                return this.blue = clamp(0, 1, this.blue - hd);
            case 1:
                this.red = clamp(0, 1, this.red - ld);
                this.green = clamp(0, 1, this.green + hd);
                return this.blue = clamp(0, 1, this.blue - ld);
            case 4:
                this.red = clamp(0, 1, this.red - hd);
                this.green = clamp(0, 1, this.green + hd);
                return this.blue = clamp(0, 1, this.blue - hd);
            case 2:
                this.red = clamp(0, 1, this.red - ld);
                this.green = clamp(0, 1, this.green - ld);
                return this.blue = clamp(0, 1, this.blue + hd);
            case 5:
                this.red = clamp(0, 1, this.red - hd);
                this.green = clamp(0, 1, this.green - hd);
                return this.blue = clamp(0, 1, this.blue + hd);
        }
    };

    Krkkl.prototype.drawCube = function(skip) {
        var s, x, y;
        s = this.cubeSize / 2;
        x = this.pos.x * this.cubeSize;
        y = (this.pos.x % 2 === 0) && (this.pos.y * this.cubeSize) || (this.pos.y * this.cubeSize - s);
        if (skip !== 0) {
            this.ctx.fillStyle = "rgb(" + (this.red * 255) + ", " + (this.green * 255) + ", " + (this.blue * 255) + ")";
            this.ctx.beginPath();
            this.ctx.moveTo(x, y);
            this.ctx.lineTo(x + this.cubeSize, y - s);
            this.ctx.lineTo(x, y - this.cubeSize);
            this.ctx.lineTo(x - this.cubeSize, y - s);
            this.ctx.closePath();
            this.ctx.fill();
        }
        if (skip !== 1) {
            this.ctx.fillStyle = "rgb(" + (this.red * 255 * 0.5) + ", " + (this.green * 255 * 0.5) + ", " + (this.blue * 255 * 0.5) + ")";
            this.ctx.beginPath();
            this.ctx.moveTo(x, y);
            this.ctx.lineTo(x - this.cubeSize, y - s);
            this.ctx.lineTo(x - this.cubeSize, y + s);
            this.ctx.lineTo(x, y + this.cubeSize);
            this.ctx.closePath();
            this.ctx.fill();
        }
        if (skip !== 2) {
            this.ctx.fillStyle = "rgb(" + (this.red * 255 * 0.2) + ", " + (this.green * 255 * 0.2) + ", " + (this.blue * 255 * 0.2) + ")";
            this.ctx.beginPath();
            this.ctx.moveTo(x, y);
            this.ctx.lineTo(x + this.cubeSize, y - s);
            this.ctx.lineTo(x + this.cubeSize, y + s);
            this.ctx.lineTo(x, y + this.cubeSize);
            this.ctx.closePath();
            return this.ctx.fill();
        }
    };

    return Krkkl;

})();

module.exports = Krkkl;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/krkkl.coffee