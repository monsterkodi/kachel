// koffee 1.4.0

/*
 0000000  000   000   0000000  0000000    000   0000000  000   000  
000        000 000   000       000   000  000  000       000   000  
0000000     00000    0000000   000   000  000  0000000   000000000  
     000     000          000  000   000  000       000  000   000  
0000000      000     0000000   0000000    000  0000000   000   000
 */
var Kachel, Sysdish, _, clamp, deg2rad, elem, empty, klog, post, ref, utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

ref = require('kxk'), post = ref.post, empty = ref.empty, clamp = ref.clamp, deg2rad = ref.deg2rad, elem = ref.elem, klog = ref.klog, _ = ref._;

utils = require('./utils');

Kachel = require('./kachel');

Sysdish = (function(superClass) {
    extend(Sysdish, superClass);

    function Sysdish(arg) {
        var ref1;
        this.kachelId = (ref1 = arg.kachelId) != null ? ref1 : 'sysdish';
        this.animDish = bind(this.animDish, this);
        this.onData = bind(this.onData, this);
        this.onClick = bind(this.onClick, this);
        this.onContextMenu = bind(this.onContextMenu, this);
        arguments[0] = _.defaults({kachelId:this.kachelId}, arguments[0]); Sysdish.__super__.constructor.apply(this, arguments);
        this.animCount = 0;
        this.history = {
            net: [],
            dsk: [],
            cpu: []
        };
        this.max = {
            net: [100, 100],
            dsk: [1, 1],
            cpu: [1, 1]
        };
        this.colors = {
            dsk: [[128, 128, 255], [64, 64, 255]],
            net: [[0, 150, 0], [0, 255, 0]],
            cpu: [[255, 255, 0], [255, 100, 0]]
        };
        this.tops = {
            net: '0%',
            dsk: '33%',
            cpu: '66%'
        };
        this.requestData('sysinfo');
        this.dishMode();
    }

    Sysdish.prototype.onContextMenu = function() {
        return this.onClick();
    };

    Sysdish.prototype.onClick = function() {
        if (this.mode === 'dish') {
            return this.graphMode();
        } else {
            return this.dishMode();
        }
    };

    Sysdish.prototype.graphMode = function() {
        this.mode = 'graph';
        this.onBounds();
        return this.drawGraph();
    };

    Sysdish.prototype.dishMode = function() {
        this.mode = 'dish';
        this.initDish();
        this.drawDish();
        return this.animDish();
    };

    Sysdish.prototype.onData = function(data) {
        var hist, j, len, n, ref1;
        this.data = data;
        ref1 = ['dsk', 'net', 'cpu'];
        for (j = 0, len = ref1.length; j < len; j++) {
            n = ref1[j];
            hist = this.history[n];
            switch (n) {
                case 'dsk':
                    if (this.data.dsk != null) {
                        hist.push([this.data.dsk.r_sec, this.data.dsk.w_sec]);
                    } else {
                        hist.push([this.data.mem.active / this.data.mem.total, this.data.mem.used / this.data.mem.total]);
                    }
                    break;
                case 'cpu':
                    hist.push([this.data.cpu.sys, this.data.cpu.usr]);
                    break;
                case 'net':
                    hist.push([this.data.net.rx_sec, this.data.net.tx_sec]);
            }
            while (hist.length > this.width) {
                hist.shift();
            }
        }
        if (this.mode === 'dish') {
            this.drawDish();
            return this.animDish();
        } else {
            return this.drawGraph();
        }
    };

    Sysdish.prototype.drawGraph = function() {
        var canvas, ctx, h, hist, i, j, l, len, m, max, n, ref1, results;
        ref1 = ['dsk', 'net', 'cpu'];
        results = [];
        for (j = 0, len = ref1.length; j < len; j++) {
            n = ref1[j];
            hist = this.history[n];
            if (empty(hist)) {
                continue;
            }
            canvas = this.canvas[n];
            canvas.height = canvas.height;
            ctx = canvas.getContext('2d');
            max = [this.max[n][0], this.max[n][1]];
            results.push((function() {
                var k, len1, ref2, results1;
                ref2 = [0, 1];
                results1 = [];
                for (k = 0, len1 = ref2.length; k < len1; k++) {
                    m = ref2[k];
                    ctx.fillStyle = "rgb(" + this.colors[n][m][0] + ", " + this.colors[n][m][1] + ", " + this.colors[n][m][2] + ")";
                    results1.push((function() {
                        var o, ref3, results2;
                        results2 = [];
                        for (i = o = 0, ref3 = hist.length; 0 <= ref3 ? o < ref3 : o > ref3; i = 0 <= ref3 ? ++o : --o) {
                            if (n === 'cpu') {
                                if (m) {
                                    h = this.height * (hist[i][0] - hist[i][1]);
                                    l = this.height * hist[i][0];
                                    results2.push(ctx.fillRect(this.width - hist.length + i, this.height - l, 1, h));
                                } else {
                                    h = this.height * hist[i][1];
                                    results2.push(ctx.fillRect(this.width - hist.length + i, this.height - h, 2, h));
                                }
                            } else {
                                this.max[n][m] = Math.max(hist[i][m], this.max[n][m]);
                                h = (hist[i][m] / max[m]) * this.height / 2;
                                if (m) {
                                    results2.push(ctx.fillRect(this.width - hist.length + i, this.height / 2 - h, 2, h));
                                } else {
                                    results2.push(ctx.fillRect(this.width - hist.length + i, this.height / 2, 2, h));
                                }
                            }
                        }
                        return results2;
                    }).call(this));
                }
                return results1;
            }).call(this));
        }
        return results;
    };

    Sysdish.prototype.animDish = function() {
        var pie180, pie360;
        clearTimeout(this.animTimer);
        if (!this.data) {
            return;
        }
        this.animCount += 1;
        if (this.animCount <= 30) {
            pie180 = function(pie, radius, angle, start) {
                var ex, ey, sx, sy;
                if (start == null) {
                    start = 0;
                }
                angle = clamp(0, 180, angle);
                sx = radius * Math.sin(deg2rad(start + angle));
                sy = -radius * Math.cos(deg2rad(start + angle));
                ex = radius * Math.sin(deg2rad(start));
                ey = -radius * Math.cos(deg2rad(start));
                return pie.setAttribute('d', "M 0 0 L " + sx + " " + sy + " A " + radius + " " + radius + " " + start + " 0 0 " + ex + " " + ey + " z");
            };
            pie360 = function(pie, radius, angle) {
                var ex, ey, f, sx, sy;
                angle = clamp(0, 359, angle);
                sx = radius * Math.sin(deg2rad(angle));
                sy = -radius * Math.cos(deg2rad(angle));
                ex = 0;
                ey = -radius;
                f = angle <= 180 && '0 0' || '1 0';
                return pie.setAttribute('d', "M 0 0 L " + sx + " " + sy + " A " + radius + " " + radius + " 0 " + f + " " + ex + " " + ey + " z");
            };
            if (this.data.dsk != null) {
                this.dskrNow += (this.dskrNew - this.dskrOld) / 30;
                this.dskwNow += (this.dskwNew - this.dskwOld) / 30;
                pie180(this.dskrPie, 50, this.dskrNow);
                pie180(this.dskwPie, 50, this.dskwNow, 180);
            }
            this.netrNow += (this.netrNew - this.netrOld) / 30;
            this.nettNow += (this.nettNew - this.nettOld) / 30;
            pie180(this.netrPie, 47, this.netrNow);
            pie180(this.nettPie, 47, this.nettNow, 180);
            this.sysNow += (this.sysNew - this.sysOld) / 30;
            this.usrNow += (this.usrNew - this.usrOld) / 30;
            pie360(this.usrPie, 44, this.usrNow);
            pie360(this.sysPie, 44, this.sysNow);
            this.memuNow += (this.memuNew - this.memuOld) / 30;
            this.memaNow += (this.memaNew - this.memaOld) / 30;
            pie360(this.memuPie, 18, this.memuNow);
            pie360(this.memaPie, 18, this.memaNow);
        }
        if (this.mode === 'dish') {
            return this.animTimer = setTimeout(this.animDish, 1000 / 30);
        }
    };

    Sysdish.prototype.initDish = function() {
        var pie, svg;
        this.main.innerHTML = '';
        svg = utils.svg({
            clss: 'clock'
        });
        this.main.appendChild(svg);
        pie = utils.circle({
            clss: 'sysdish_disk_bgr',
            svg: svg
        });
        this.dskrPie = utils.pie({
            svg: pie,
            radius: 50,
            clss: 'sysdish_disk_read',
            angle: 0
        });
        this.dskwPie = utils.pie({
            svg: pie,
            radius: 50,
            clss: 'sysdish_disk_write',
            angle: 0,
            start: 180
        });
        pie = utils.circle({
            radius: 47,
            clss: 'sysdish_net_bgr',
            svg: svg
        });
        this.netrPie = utils.pie({
            svg: pie,
            radius: 47,
            clss: 'sysdish_net_recv',
            angle: 0
        });
        this.nettPie = utils.pie({
            svg: pie,
            radius: 47,
            clss: 'sysdish_net_send',
            angle: 0,
            start: 180
        });
        pie = utils.circle({
            radius: 44,
            clss: 'sysdish_load_bgr',
            svg: svg
        });
        this.sysPie = utils.pie({
            svg: pie,
            radius: 44,
            clss: 'sysdish_load_sys',
            angle: 0
        });
        this.usrPie = utils.pie({
            svg: pie,
            radius: 44,
            clss: 'sysdish_load_usr',
            angle: 0
        });
        pie = utils.circle({
            radius: 18,
            clss: 'sysdish_mem_bgr',
            svg: svg
        });
        this.memuPie = utils.pie({
            svg: pie,
            radius: 18,
            clss: 'sysdish_mem_used',
            angle: 0
        });
        return this.memaPie = utils.pie({
            svg: pie,
            radius: 18,
            clss: 'sysdish_mem_active',
            angle: 0
        });
    };

    Sysdish.prototype.drawDish = function() {
        if (!this.data) {
            return;
        }
        this.animCount = 0;
        if (this.data.dsk != null) {
            this.dskrOld = this.dskrNow = this.dskrNew;
            this.dskwOld = this.dskwNow = this.dskwNew;
            this.dskrNew = 180 * this.data.dsk.r_sec / this.data.dsk.r_max;
            this.dskwNew = 180 * this.data.dsk.w_sec / this.data.dsk.w_max;
        }
        this.netrOld = this.netrNow = this.netrNew;
        this.nettOld = this.nettNow = this.nettNew;
        this.netrNew = 180 * this.data.net.rx_sec / this.data.net.rx_max;
        this.nettNew = 180 * this.data.net.tx_sec / this.data.net.tx_max;
        this.sysOld = this.sysNow = this.sysNew;
        this.usrOld = this.usrNow = this.usrNew;
        this.sysNew = 360 * this.data.cpu.sys;
        this.usrNew = 360 * this.data.cpu.usr;
        this.memuOld = this.memuNow = this.memuNew;
        this.memaOld = this.memaNow = this.memaNew;
        this.memuNew = 360 * this.data.mem.used / this.data.mem.total;
        return this.memaNew = 360 * this.data.mem.active / this.data.mem.total;
    };

    Sysdish.prototype.onBounds = function() {
        var br, canvas, h, j, len, n, ref1, results, w, x, y;
        if (this.mode !== 'graph') {
            return;
        }
        this.main.innerHTML = '';
        br = this.main.getBoundingClientRect();
        w = parseInt(br.width);
        h = parseInt(br.height / 3);
        this.width = w * 2;
        this.height = h * 2;
        this.canvas = {};
        ref1 = ['dsk', 'net', 'cpu'];
        results = [];
        for (j = 0, len = ref1.length; j < len; j++) {
            n = ref1[j];
            canvas = elem('canvas', {
                "class": "histCanvas",
                width: this.width - 1,
                height: this.height
            });
            x = parseInt(-this.width / 4);
            y = parseInt(-this.height / 4);
            canvas.style.transform = "translate3d(" + x + "px, " + y + "px, 0px) scale3d(0.5, 0.5, 1)";
            canvas.style.top = this.tops[n];
            this.main.appendChild(canvas);
            results.push(this.canvas[n] = canvas);
        }
        return results;
    };

    return Sysdish;

})(Kachel);

module.exports = Sysdish;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/sysdish.coffee