// koffee 1.4.0

/*
 0000000  000   000   0000000  0000000    000   0000000  000   000  
000        000 000   000       000   000  000  000       000   000  
0000000     00000    0000000   000   000  000  0000000   000000000  
     000     000          000  000   000  000       000  000   000  
0000000      000     0000000   0000000    000  0000000   000   000
 */
var Kachel, Sysdish, _, clamp, deg2rad, elem, empty, klog, last, post, ref, utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

ref = require('kxk'), post = ref.post, empty = ref.empty, clamp = ref.clamp, last = ref.last, deg2rad = ref.deg2rad, elem = ref.elem, klog = ref.klog, _ = ref._;

utils = require('./utils');

Kachel = require('./kachel');

Sysdish = (function(superClass) {
    extend(Sysdish, superClass);

    function Sysdish(arg) {
        var ref1;
        this.kachelId = (ref1 = arg.kachelId) != null ? ref1 : 'sysdish';
        this.animDish = bind(this.animDish, this);
        this.onData = bind(this.onData, this);
        this.onLeftClick = bind(this.onLeftClick, this);
        this.onRightClick = bind(this.onRightClick, this);
        arguments[0] = _.defaults({kachelId:this.kachelId}, arguments[0]); Sysdish.__super__.constructor.apply(this, arguments);
        this.animCount = 0;
        this.history = {
            net: [],
            dsk: [],
            cpu: []
        };
        this.max = {
            net: [100, 100],
            dsk: [1, 1],
            cpu: [1, 1]
        };
        this.colors = {
            dsk: [[128, 128, 255], [64, 64, 255]],
            net: [[0, 150, 0], [0, 255, 0]],
            cpu: [[255, 255, 0], [255, 100, 0]]
        };
        this.tops = {
            net: '0%',
            dsk: '33%',
            cpu: '66%'
        };
        this.requestData('sysinfo');
        this.dishMode();
    }

    Sysdish.prototype.onRightClick = function() {
        return this.onLeftClick();
    };

    Sysdish.prototype.onLeftClick = function() {
        if (this.mode === 'dish') {
            return this.graphMode();
        } else {
            return this.dishMode();
        }
    };

    Sysdish.prototype.graphMode = function() {
        this.mode = 'graph';
        this.onBounds();
        return this.drawGraph();
    };

    Sysdish.prototype.dishMode = function() {
        this.mode = 'dish';
        this.initDish();
        this.drawDish();
        return this.animDish();
    };

    Sysdish.prototype.onData = function(data) {
        var hist, j, k, len, m, n, ref1;
        this.data = data;
        ref1 = ['dsk', 'net', 'cpu'];
        for (j = 0, len = ref1.length; j < len; j++) {
            n = ref1[j];
            hist = this.history[n];
            switch (n) {
                case 'dsk':
                    if (this.data.dsk != null) {
                        hist.push([this.data.dsk.r_sec, this.data.dsk.w_sec]);
                    } else {
                        hist.push([this.data.mem.active / this.data.mem.total, this.data.mem.used / this.data.mem.total]);
                    }
                    break;
                case 'cpu':
                    hist.push([this.data.cpu.sys, this.data.cpu.usr]);
                    break;
                case 'net':
                    hist.push([this.data.net.rx_sec, this.data.net.tx_sec]);
            }
            for (m = k = 0; k <= 1; m = ++k) {
                this.max[n][m] = Math.max(last(hist)[m], this.max[n][m]);
            }
            while (hist.length > this.width) {
                hist.shift();
            }
        }
        if (this.mode === 'dish') {
            this.drawDish();
            return this.animDish();
        } else {
            return this.drawGraph();
        }
    };

    Sysdish.prototype.drawGraph = function() {
        var canvas, ctx, h, hist, i, j, l, len, m, max, n, ref1, results;
        ref1 = ['dsk', 'net', 'cpu'];
        results = [];
        for (j = 0, len = ref1.length; j < len; j++) {
            n = ref1[j];
            hist = this.history[n];
            if (empty(hist)) {
                continue;
            }
            canvas = this.canvas[n];
            canvas.height = canvas.height;
            ctx = canvas.getContext('2d');
            results.push((function() {
                var k, len1, ref2, results1;
                ref2 = [0, 1];
                results1 = [];
                for (k = 0, len1 = ref2.length; k < len1; k++) {
                    m = ref2[k];
                    ctx.fillStyle = "rgb(" + this.colors[n][m][0] + ", " + this.colors[n][m][1] + ", " + this.colors[n][m][2] + ")";
                    results1.push((function() {
                        var o, ref3, results2;
                        results2 = [];
                        for (i = o = 0, ref3 = hist.length; 0 <= ref3 ? o < ref3 : o > ref3; i = 0 <= ref3 ? ++o : --o) {
                            if (n === 'cpu') {
                                if (m) {
                                    h = this.height * (hist[i][0] - hist[i][1]);
                                    l = this.height * hist[i][0];
                                    results2.push(ctx.fillRect(this.width - hist.length + i, this.height - l, 1, h));
                                } else {
                                    h = this.height * hist[i][1];
                                    results2.push(ctx.fillRect(this.width - hist.length + i, this.height - h, 2, h));
                                }
                            } else {
                                max = [this.max[n][0], this.max[n][1]];
                                h = (hist[i][m] / max[m]) * this.height / 2;
                                if (m) {
                                    results2.push(ctx.fillRect(this.width - hist.length + i, this.height / 2 - h, 2, h));
                                } else {
                                    results2.push(ctx.fillRect(this.width - hist.length + i, this.height / 2, 2, h));
                                }
                            }
                        }
                        return results2;
                    }).call(this));
                }
                return results1;
            }).call(this));
        }
        return results;
    };

    Sysdish.prototype.animDish = function() {
        var pie180, pie360;
        clearTimeout(this.animTimer);
        if (!this.data) {
            return;
        }
        this.animCount += 1;
        if (this.animCount <= 30) {
            pie180 = function(pie, radius, angle, start) {
                var ex, ey, sx, sy;
                if (start == null) {
                    start = 0;
                }
                angle = clamp(0, 180, angle);
                sx = radius * Math.sin(deg2rad(start + angle));
                sy = -radius * Math.cos(deg2rad(start + angle));
                ex = radius * Math.sin(deg2rad(start));
                ey = -radius * Math.cos(deg2rad(start));
                return pie.setAttribute('d', "M 0 0 L " + sx + " " + sy + " A " + radius + " " + radius + " " + start + " 0 0 " + ex + " " + ey + " z");
            };
            pie360 = function(pie, radius, angle) {
                var ex, ey, f, sx, sy;
                angle = clamp(0, 359, angle);
                sx = radius * Math.sin(deg2rad(angle));
                sy = -radius * Math.cos(deg2rad(angle));
                ex = 0;
                ey = -radius;
                f = angle <= 180 && '0 0' || '1 0';
                return pie.setAttribute('d', "M 0 0 L " + sx + " " + sy + " A " + radius + " " + radius + " 0 " + f + " " + ex + " " + ey + " z");
            };
            if (this.data.dsk != null) {
                this.dskrNow += (this.dskrNew - this.dskrOld) / 30;
                this.dskwNow += (this.dskwNew - this.dskwOld) / 30;
                pie180(this.dskrPie, 50, this.dskrNow);
                pie180(this.dskwPie, 50, this.dskwNow, 180);
            }
            this.netrNow += (this.netrNew - this.netrOld) / 30;
            this.nettNow += (this.nettNew - this.nettOld) / 30;
            pie180(this.netrPie, 47, this.netrNow);
            pie180(this.nettPie, 47, this.nettNow, 180);
            this.sysNow += (this.sysNew - this.sysOld) / 30;
            this.usrNow += (this.usrNew - this.usrOld) / 30;
            pie360(this.usrPie, 44, this.usrNow);
            pie360(this.sysPie, 44, this.sysNow);
            this.memuNow += (this.memuNew - this.memuOld) / 30;
            this.memaNow += (this.memaNew - this.memaOld) / 30;
            pie360(this.memuPie, 18, this.memuNow);
            pie360(this.memaPie, 18, this.memaNow);
        }
        if (this.mode === 'dish') {
            return this.animTimer = setTimeout(this.animDish, 1000 / 30);
        }
    };

    Sysdish.prototype.initDish = function() {
        var pie, svg;
        this.main.innerHTML = '';
        svg = utils.svg({
            clss: 'clock'
        });
        this.main.appendChild(svg);
        pie = utils.circle({
            clss: 'sysdish_disk_bgr',
            svg: svg
        });
        this.dskrPie = utils.pie({
            svg: pie,
            radius: 50,
            clss: 'sysdish_disk_read',
            angle: 0
        });
        this.dskwPie = utils.pie({
            svg: pie,
            radius: 50,
            clss: 'sysdish_disk_write',
            angle: 0,
            start: 180
        });
        pie = utils.circle({
            radius: 47,
            clss: 'sysdish_net_bgr',
            svg: svg
        });
        this.netrPie = utils.pie({
            svg: pie,
            radius: 47,
            clss: 'sysdish_net_recv',
            angle: 0
        });
        this.nettPie = utils.pie({
            svg: pie,
            radius: 47,
            clss: 'sysdish_net_send',
            angle: 0,
            start: 180
        });
        pie = utils.circle({
            radius: 44,
            clss: 'sysdish_load_bgr',
            svg: svg
        });
        this.sysPie = utils.pie({
            svg: pie,
            radius: 44,
            clss: 'sysdish_load_sys',
            angle: 0
        });
        this.usrPie = utils.pie({
            svg: pie,
            radius: 44,
            clss: 'sysdish_load_usr',
            angle: 0
        });
        pie = utils.circle({
            radius: 18,
            clss: 'sysdish_mem_bgr',
            svg: svg
        });
        this.memuPie = utils.pie({
            svg: pie,
            radius: 18,
            clss: 'sysdish_mem_used',
            angle: 0
        });
        return this.memaPie = utils.pie({
            svg: pie,
            radius: 18,
            clss: 'sysdish_mem_active',
            angle: 0
        });
    };

    Sysdish.prototype.drawDish = function() {
        if (!this.data) {
            return;
        }
        this.animCount = 0;
        if (this.data.dsk != null) {
            this.dskrOld = this.dskrNow = this.dskrNew;
            this.dskwOld = this.dskwNow = this.dskwNew;
            this.dskrNew = 180 * this.data.dsk.r_sec / this.data.dsk.r_max;
            this.dskwNew = 180 * this.data.dsk.w_sec / this.data.dsk.w_max;
        }
        this.netrOld = this.netrNow = this.netrNew;
        this.nettOld = this.nettNow = this.nettNew;
        this.netrNew = 180 * this.data.net.rx_sec / this.data.net.rx_max;
        this.nettNew = 180 * this.data.net.tx_sec / this.data.net.tx_max;
        this.sysOld = this.sysNow = this.sysNew;
        this.usrOld = this.usrNow = this.usrNew;
        this.sysNew = 360 * this.data.cpu.sys;
        this.usrNew = 360 * this.data.cpu.usr;
        this.memuOld = this.memuNow = this.memuNew;
        this.memaOld = this.memaNow = this.memaNew;
        this.memuNew = 360 * this.data.mem.used / this.data.mem.total;
        return this.memaNew = 360 * this.data.mem.active / this.data.mem.total;
    };

    Sysdish.prototype.onBounds = function() {
        var br, canvas, h, j, len, n, ref1, results, w, x, y;
        if (this.mode !== 'graph') {
            return;
        }
        this.main.innerHTML = '';
        br = this.main.getBoundingClientRect();
        w = parseInt(br.width);
        h = parseInt(br.height / 3);
        this.width = w * 2;
        this.height = h * 2;
        this.canvas = {};
        ref1 = ['dsk', 'net', 'cpu'];
        results = [];
        for (j = 0, len = ref1.length; j < len; j++) {
            n = ref1[j];
            canvas = elem('canvas', {
                "class": "histCanvas",
                width: this.width - 1,
                height: this.height
            });
            x = parseInt(-this.width / 4);
            y = parseInt(-this.height / 4);
            canvas.style.transform = "translate3d(" + x + "px, " + y + "px, 0px) scale3d(0.5, 0.5, 1)";
            canvas.style.top = this.tops[n];
            this.main.appendChild(canvas);
            results.push(this.canvas[n] = canvas);
        }
        return results;
    };

    return Sysdish;

})(Kachel);

module.exports = Sysdish;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3lzZGlzaC5qcyIsInNvdXJjZVJvb3QiOiIuIiwic291cmNlcyI6WyIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7OztBQUFBLElBQUEsNkVBQUE7SUFBQTs7OztBQVFBLE1BQXVELE9BQUEsQ0FBUSxLQUFSLENBQXZELEVBQUUsZUFBRixFQUFRLGlCQUFSLEVBQWUsaUJBQWYsRUFBc0IsZUFBdEIsRUFBNEIscUJBQTVCLEVBQXFDLGVBQXJDLEVBQTJDLGVBQTNDLEVBQWlEOztBQUVqRCxLQUFBLEdBQVUsT0FBQSxDQUFRLFNBQVI7O0FBQ1YsTUFBQSxHQUFVLE9BQUEsQ0FBUSxVQUFSOztBQUVKOzs7SUFFQyxpQkFBQyxHQUFEO0FBRUMsWUFBQTtRQUZBLElBQUMsQ0FBQSxrREFBUzs7Ozs7UUFFViw2R0FBQSxTQUFBO1FBRUEsSUFBQyxDQUFBLFNBQUQsR0FBYTtRQUViLElBQUMsQ0FBQSxPQUFELEdBQ0k7WUFBQSxHQUFBLEVBQUssRUFBTDtZQUNBLEdBQUEsRUFBSyxFQURMO1lBRUEsR0FBQSxFQUFLLEVBRkw7O1FBSUosSUFBQyxDQUFBLEdBQUQsR0FDSTtZQUFBLEdBQUEsRUFBSyxDQUFDLEdBQUQsRUFBSyxHQUFMLENBQUw7WUFDQSxHQUFBLEVBQUssQ0FBQyxDQUFELEVBQUcsQ0FBSCxDQURMO1lBRUEsR0FBQSxFQUFLLENBQUMsQ0FBRCxFQUFHLENBQUgsQ0FGTDs7UUFJSixJQUFDLENBQUEsTUFBRCxHQUNJO1lBQUEsR0FBQSxFQUFLLENBQUMsQ0FBQyxHQUFELEVBQUssR0FBTCxFQUFTLEdBQVQsQ0FBRCxFQUFlLENBQUUsRUFBRixFQUFNLEVBQU4sRUFBUyxHQUFULENBQWYsQ0FBTDtZQUNBLEdBQUEsRUFBSyxDQUFDLENBQUcsQ0FBSCxFQUFLLEdBQUwsRUFBVyxDQUFYLENBQUQsRUFBZSxDQUFHLENBQUgsRUFBSyxHQUFMLEVBQVcsQ0FBWCxDQUFmLENBREw7WUFFQSxHQUFBLEVBQUssQ0FBQyxDQUFDLEdBQUQsRUFBSyxH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YixHQUF5QixjQUFBLEdBQWUsQ0FBZixHQUFpQixNQUFqQixHQUF1QixDQUF2QixHQUF5QjtZQUNsRCxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQWIsR0FBbUIsSUFBQyxDQUFBLElBQUssQ0FBQSxDQUFBO1lBQ3pCLElBQUMsQ0FBQSxJQUFJLENBQUMsV0FBTixDQUFrQixNQUFsQjt5QkFDQSxJQUFDLENBQUEsTUFBTyxDQUFBLENBQUEsQ0FBUixHQUFhO0FBUGpCOztJQWRNOzs7O0dBalFROztBQXdSdEIsTUFBTSxDQUFDLE9BQVAsR0FBaUIiLCJzb3VyY2VzQ29udGVudCI6WyIjIyNcbiAwMDAwMDAwICAwMDAgICAwMDAgICAwMDAwMDAwICAwMDAwMDAwICAgIDAwMCAgIDAwMDAwMDAgIDAwMCAgIDAwMCAgXG4wMDAgICAgICAgIDAwMCAwMDAgICAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgIDAwMCAgICAgICAwMDAgICAwMDAgIFxuMDAwMDAwMCAgICAgMDAwMDAgICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwICAwMDAwMDAwICAgMDAwMDAwMDAwICBcbiAgICAgMDAwICAgICAwMDAgICAgICAgICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgIDAwMCAgIDAwMCAgXG4wMDAwMDAwICAgICAgMDAwICAgICAwMDAwMDAwICAgMDAwMDAwMCAgICAwMDAgIDAwMDAwMDAgICAwMDAgICAwMDAgIFxuIyMjXG5cbnsgcG9zdCwgZW1wdHksIGNsYW1wLCBsYXN0LCBkZWcycmFkLCBlbGVtLCBrbG9nLCBfIH0gPSByZXF1aXJlICdreGsnXG5cbnV0aWxzICAgPSByZXF1aXJlICcuL3V0aWxzJ1xuS2FjaGVsICA9IHJlcXVpcmUgJy4va2FjaGVsJ1xuXG5jbGFzcyBTeXNkaXNoIGV4dGVuZHMgS2FjaGVsXG4gICAgICAgIFxuICAgIEA6IChAa2FjaGVsSWQ6J3N5c2Rpc2gnKSAtPiBcbiAgICAgICAgXG4gICAgICAgIHN1cGVyXG4gICAgICAgIFxuICAgICAgICBAYW5pbUNvdW50ID0gMFxuICAgICAgICBcbiAgICAgICAgQGhpc3RvcnkgPSBcbiAgICAgICAgICAgIG5ldDogW11cbiAgICAgICAgICAgIGRzazogW11cbiAgICAgICAgICAgIGNwdTogW11cbiAgICAgICAgICAgIFxuICAgICAgICBAbWF4ID0gXG4gICAgICAgICAgICBuZXQ6IFsxMDAgMTAwXVxuICAgICAgICAgICAgZHNrOiBbMSAxXVxuICAgICAgICAgICAgY3B1OiBbMSAxXVxuICAgICAgICAgICAgXG4gICAgICAgIEBjb2xvcnMgPVxuICAgICAgICAgICAgZHNrOiBbWzEyOCAxMjggMjU1XSBbIDY0ICA2NCAyNTVdXVxuICAgICAgICAgICAgbmV0OiBbWyAgMCAxNTAgICAwXSBbICAwIDI1NSAgIDBdXVxuICAgICAgICAgICAgY3B1OiBbWzI1NSAyNTUgICAwXSBbMjU1IDEwMCAgIDBdXVxuICAgICAgICAgICAgXG4gICAgICAgIEB0b3BzID0gXG4gICAgICAgICAgICBuZXQ6ICcwJSdcbiAgICAgICAgICAgIGRzazogJzMzJSdcbiAgICAgICAgICAgIGNwdTogJzY2JSdcbiAgICAgICAgXG4gICAgICAgIEByZXF1ZXN0RGF0YSAnc3lzaW5mbydcbiAgICAgICAgXG4gICAgICAgIEBkaXNoTW9kZSgpXG4gICAgXG4gICAgIyAgMDAwMDAwMCAgMDAwICAgICAgMDAwICAgMDAwMDAwMCAgMDAwICAgMDAwICBcbiAgICAjIDAwMCAgICAgICAwMDAgICAgICAwMDAgIDAwMCAgICAgICAwMDAgIDAwMCAgIFxuICAgICMgMDAwICAgICAgIDAwMCAgICAgIDAwMCAgMDAwICAgICAgIDAwMDAwMDAgICAgXG4gICAgIyAwMDAgICAgICAgMDAwICAgICAgMDAwICAwMDAgICAgICAgMDAwICAwMDAgICBcbiAgICAjICAwMDAwMDAwICAwMDAwMDAwICAwMDAgICAwMDAwMDAwICAwMDAgICAwMDAgIFxuICAgIFxuICAgIG9uUmlnaHRDbGljazogPT4gQG9uTGVmdENsaWNrKClcbiAgICBvbkxlZnRDbGljazogPT5cbiAgICAgICAgXG4gICAgICAgIGlmIEBtb2RlID09ICdkaXNoJyB0aGVuIEBncmFwaE1vZGUoKVxuICAgICAgICBlbHNlIEBkaXNoTW9kZSgpXG4gICAgICAgIFxuICAgIGdyYXBoTW9kZTogLT5cbiAgICAgICAgXG4gICAgICAgIEBtb2RlID0gJ2dyYXBoJ1xuICAgICAgICBAb25Cb3VuZHMoKVxuICAgICAgICBAZHJhd0dyYXBoKClcbiAgICAgICAgXG4gICAgZGlzaE1vZGU6IC0+XG4gICAgICAgICAgICAgICAgXG4gICAgICAgIEBtb2RlID0gJ2Rpc2gnXG4gICAgICAgIEBpbml0RGlzaCgpXG4gICAgICAgIEBkcmF3RGlzaCgpXG4gICAgICAgIEBhbmltRGlzaCgpXG4gICAgICAgIFxuICAgICMgIDAwMDAwMDAgICAwMDAgICAwMDAgIDAwMDAwMDAgICAgIDAwMDAwMDAgICAwMDAwMDAwMDAgICAwMDAwMDAwICAgXG4gICAgIyAwMDAgICAwMDAgIDAwMDAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgICAgIDAwMCAgICAgMDAwICAgMDAwICBcbiAgICAjIDAwMCAgIDAwMCAgMDAwIDAgMDAwICAwMDAgICAwMDAgIDAwMDAwMDAwMCAgICAgMDAwICAgICAwMDAwMDAwMDAgIFxuICAgICMgMDAwICAgMDAwICAwMDAgIDAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgIDAwMCAgIDAwMCAgXG4gICAgIyAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgICAwMDAgICAwMDAgICAgIDAwMCAgICAgMDAwICAgMDAwICBcbiAgICBcbiAgICBvbkRhdGE6IChAZGF0YSkgPT5cbiAgICAgICAgXG4gICAgICAgIGZvciBuIGluIFsnZHNrJyAnbmV0JyAnY3B1J11cbiAgICAgICAgICAgIGhpc3QgPSBAaGlzdG9yeVtuXVxuICAgICAgICAgICAgc3dpdGNoIG5cbiAgICAgICAgICAgICAgICB3aGVuICdkc2snIFxuICAgICAgICAgICAgICAgICAgICBpZiBAZGF0YS5kc2s/IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaXN0LnB1c2ggW0BkYXRhLmRzay5yX3NlYywgIEBkYXRhLmRzay53X3NlY11cbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaXN0LnB1c2ggW0BkYXRhLm1lbS5hY3RpdmUvQGRhdGEubWVtLnRvdGFsLCBAZGF0YS5tZW0udXNlZC9AZGF0YS5tZW0udG90YWxdXG4gICAgICAgICAgICAgICAgd2hlbiAnY3B1JyB0aGVuIGhpc3QucHVzaCBbQGRhdGEuY3B1LnN5cywgICAgQGRhdGEuY3B1LnVzcl1cbiAgICAgICAgICAgICAgICB3aGVuICduZXQnIHRoZW4gaGlzdC5wdXNoIFtAZGF0YS5uZXQucnhfc2VjLCBAZGF0YS5uZXQudHhfc2VjXVxuICAgICAgICAgICAgIFxuICAgICAgICAgICAgZm9yIG0gaW4gWzAuLjFdXG4gICAgICAgICAgICAgICAgQG1heFtuXVttXSA9IE1hdGgubWF4IGxhc3QoaGlzdClbbV0sIEBtYXhbbl1bbV1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIGhpc3Quc2hpZnQoKSB3aGlsZSBoaXN0Lmxlbmd0aCA+IEB3aWR0aFxuICAgICAgICAgICAgICAgIFxuICAgICAgICBpZiBAbW9kZSA9PSAnZGlzaCdcbiAgICAgICAgICAgIEBkcmF3RGlzaCgpXG4gICAgICAgICAgICBAYW5pbURpc2goKVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBAZHJhd0dyYXBoKClcbiAgICAgICAgXG4gICAgIyAwMDAwMDAwICAgIDAwMDAwMDAwICAgIDAwMDAwMDAgICAwMDAgICAwMDAgICAwMDAwMDAwICAgMDAwMDAwMDAgICAgMDAwMDAwMCAgIDAwMDAwMDAwICAgMDAwICAgMDAwICBcbiAgICAjIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAwIDAwMCAgMDAwICAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIFxuICAgICMgMDAwICAgMDAwICAwMDAwMDAwICAgIDAwMDAwMDAwMCAgMDAwMDAwMDAwICAwMDAgIDAwMDAgIDAwMDAwMDAgICAgMDAwMDAwMDAwICAwMDAwMDAwMCAgIDAwMDAwMDAwMCAgXG4gICAgIyAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICAgMDAwICAgMDAwICBcbiAgICAjIDAwMDAwMDAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwICAgICAwMCAgIDAwMDAwMDAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgICAwMDAgICAwMDAgIFxuICAgIFxuICAgIGRyYXdHcmFwaDogLT5cbiAgICAgICAgXG4gICAgICAgIGZvciBuIGluIFsnZHNrJyAnbmV0JyAnY3B1J11cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaGlzdCA9IEBoaXN0b3J5W25dXG4gICAgICAgICAgICBjb250aW51ZSBpZiBlbXB0eSBoaXN0XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIGNhbnZhcyA9IEBjYW52YXNbbl1cbiAgICAgICAgICAgIGNhbnZhcy5oZWlnaHQgPSBjYW52YXMuaGVpZ2h0XG4gICAgICAgICAgICBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCAnMmQnXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGZvciBtIGluIFswLDFdXG4gICAgICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IFwicmdiKCN7QGNvbG9yc1tuXVttXVswXX0sICN7QGNvbG9yc1tuXVttXVsxXX0sICN7QGNvbG9yc1tuXVttXVsyXX0pXCJcbiAgICAgICAgICAgICAgICBmb3IgaSBpbiBbMC4uLmhpc3QubGVuZ3RoXVxuICAgICAgICAgICAgICAgICAgICBpZiBuID09ICdjcHUnXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiBtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaCA9IEBoZWlnaHQgKiAoaGlzdFtpXVswXS1oaXN0W2ldWzFdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwgPSBAaGVpZ2h0ICogaGlzdFtpXVswXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5maWxsUmVjdCBAd2lkdGgtaGlzdC5sZW5ndGgraSwgQGhlaWdodC1sLCAxLCBoXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaCA9IEBoZWlnaHQgKiBoaXN0W2ldWzFdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3R4LmZpbGxSZWN0IEB3aWR0aC1oaXN0Lmxlbmd0aCtpLCBAaGVpZ2h0LWgsIDIsIGhcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4ID0gW0BtYXhbbl1bMF0sIEBtYXhbbl1bMV1dXG4gICAgICAgICAgICAgICAgICAgICAgICBoID0gKGhpc3RbaV1bbV0gLyBtYXhbbV0pICogQGhlaWdodC8yXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiBtIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5maWxsUmVjdCBAd2lkdGgtaGlzdC5sZW5ndGgraSwgQGhlaWdodC8yLWgsIDIsIGhcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHguZmlsbFJlY3QgQHdpZHRoLWhpc3QubGVuZ3RoK2ksIEBoZWlnaHQvMiwgMiwgaFxuICAgICAgICAgICAgICAgIFxuICAgICMgIDAwMDAwMDAgICAwMDAgICAwMDAgIDAwMCAgMDAgICAgIDAwICAwMDAwMDAwICAgIDAwMCAgIDAwMDAwMDAgIDAwMCAgIDAwMCAgXG4gICAgIyAwMDAgICAwMDAgIDAwMDAgIDAwMCAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAwMDAgICAgICAgMDAwICAgMDAwICBcbiAgICAjIDAwMDAwMDAwMCAgMDAwIDAgMDAwICAwMDAgIDAwMDAwMDAwMCAgMDAwICAgMDAwICAwMDAgIDAwMDAwMDAgICAwMDAwMDAwMDAgIFxuICAgICMgMDAwICAgMDAwICAwMDAgIDAwMDAgIDAwMCAgMDAwIDAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgIDAwMCAgIDAwMCAgXG4gICAgIyAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAwMDAgICAwMDAgIDAwMDAwMDAgICAgMDAwICAwMDAwMDAwICAgMDAwICAgMDAwICBcbiAgICBcbiAgICBhbmltRGlzaDogPT5cbiAgICAgICAgXG4gICAgICAgIGNsZWFyVGltZW91dCBAYW5pbVRpbWVyXG4gICAgICAgIFxuICAgICAgICByZXR1cm4gaWYgbm90IEBkYXRhXG4gICAgICAgIFxuICAgICAgICBAYW5pbUNvdW50ICs9IDFcbiAgICAgICAgaWYgQGFuaW1Db3VudCA8PSAzMFxuXG4gICAgICAgICAgICBwaWUxODAgPSAocGllLCByYWRpdXMsIGFuZ2xlLCBzdGFydD0wKSAtPlxuICAgICAgICAgICAgICAgIGFuZ2xlID0gY2xhbXAgMCwgMTgwLCBhbmdsZVxuICAgICAgICAgICAgICAgIHN4ID0gIHJhZGl1cyAqIE1hdGguc2luIGRlZzJyYWQgc3RhcnQrYW5nbGVcbiAgICAgICAgICAgICAgICBzeSA9IC1yYWRpdXMgKiBNYXRoLmNvcyBkZWcycmFkIHN0YXJ0K2FuZ2xlXG4gICAgICAgICAgICAgICAgZXggPSAgcmFkaXVzICogTWF0aC5zaW4gZGVnMnJhZCBzdGFydFxuICAgICAgICAgICAgICAgIGV5ID0gLXJhZGl1cyAqIE1hdGguY29zIGRlZzJyYWQgc3RhcnRcbiAgICAgICAgICAgICAgICBwaWUuc2V0QXR0cmlidXRlICdkJyBcIk0gMCAwIEwgI3tzeH0gI3tzeX0gQSAje3JhZGl1c30gI3tyYWRpdXN9ICN7c3RhcnR9IDAgMCAje2V4fSAje2V5fSB6XCJcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcGllMzYwID0gKHBpZSwgcmFkaXVzLCBhbmdsZSkgLT5cbiAgICAgICAgICAgICAgICBhbmdsZSA9IGNsYW1wIDAsIDM1OSwgYW5nbGVcbiAgICAgICAgICAgICAgICBzeCA9ICByYWRpdXMgKiBNYXRoLnNpbiBkZWcycmFkIGFuZ2xlXG4gICAgICAgICAgICAgICAgc3kgPSAtcmFkaXVzICogTWF0aC5jb3MgZGVnMnJhZCBhbmdsZVxuICAgICAgICAgICAgICAgIGV4ID0gIDBcbiAgICAgICAgICAgICAgICBleSA9IC1yYWRpdXNcbiAgICAgICAgICAgICAgICBmID0gYW5nbGUgPD0gMTgwIGFuZCAnMCAwJyBvciAnMSAwJ1xuICAgICAgICAgICAgICAgIHBpZS5zZXRBdHRyaWJ1dGUgJ2QnIFwiTSAwIDAgTCAje3N4fSAje3N5fSBBICN7cmFkaXVzfSAje3JhZGl1c30gMCAje2Z9ICN7ZXh9ICN7ZXl9IHpcIlxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiBAZGF0YS5kc2s/XG4gICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIEBkc2tyTm93ICs9IChAZHNrck5ldyAtIEBkc2tyT2xkKSAvIDMwXG4gICAgICAgICAgICAgICAgQGRza3dOb3cgKz0gKEBkc2t3TmV3IC0gQGRza3dPbGQpIC8gMzBcbiAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgcGllMTgwIEBkc2tyUGllLCA1MCwgQGRza3JOb3dcbiAgICAgICAgICAgICAgICBwaWUxODAgQGRza3dQaWUsIDUwLCBAZHNrd05vdywgMTgwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgQG5ldHJOb3cgKz0gKEBuZXRyTmV3IC0gQG5ldHJPbGQpIC8gMzBcbiAgICAgICAgICAgIEBuZXR0Tm93ICs9IChAbmV0dE5ldyAtIEBuZXR0T2xkKSAvIDMwXG4gICAgICAgICAgICAgXG4gICAgICAgICAgICBwaWUxODAgQG5ldHJQaWUsIDQ3LCBAbmV0ck5vd1xuICAgICAgICAgICAgcGllMTgwIEBuZXR0UGllLCA0NywgQG5ldHROb3csIDE4MFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBAc3lzTm93ICs9IChAc3lzTmV3IC0gQHN5c09sZCkgLyAzMFxuICAgICAgICAgICAgQHVzck5vdyArPSAoQHVzck5ldyAtIEB1c3JPbGQpIC8gMzBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcGllMzYwIEB1c3JQaWUsIDQ0LCBAdXNyTm93XG4gICAgICAgICAgICBwaWUzNjAgQHN5c1BpZSwgNDQsIEBzeXNOb3dcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgQG1lbXVOb3cgKz0gKEBtZW11TmV3IC0gQG1lbXVPbGQpIC8gMzBcbiAgICAgICAgICAgIEBtZW1hTm93ICs9IChAbWVtYU5ldyAtIEBtZW1hT2xkKSAvIDMwXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHBpZTM2MCBAbWVtdVBpZSwgMTgsIEBtZW11Tm93XG4gICAgICAgICAgICBwaWUzNjAgQG1lbWFQaWUsIDE4LCBAbWVtYU5vd1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICBpZiBAbW9kZSA9PSAnZGlzaCdcbiAgICAgICAgICAgIEBhbmltVGltZXIgPSBzZXRUaW1lb3V0IEBhbmltRGlzaCwgMTAwMCAvIDMwXG4gICAgXG4gICAgIyAwMDAgIDAwMCAgIDAwMCAgMDAwICAwMDAwMDAwMDAgIDAwMDAwMDAgICAgMDAwICAgMDAwMDAwMCAgMDAwICAgMDAwICBcbiAgICAjIDAwMCAgMDAwMCAgMDAwICAwMDAgICAgIDAwMCAgICAgMDAwICAgMDAwICAwMDAgIDAwMCAgICAgICAwMDAgICAwMDAgIFxuICAgICMgMDAwICAwMDAgMCAwMDAgIDAwMCAgICAgMDAwICAgICAwMDAgICAwMDAgIDAwMCAgMDAwMDAwMCAgIDAwMDAwMDAwMCAgXG4gICAgIyAwMDAgIDAwMCAgMDAwMCAgMDAwICAgICAwMDAgICAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgMDAwICAgMDAwICBcbiAgICAjIDAwMCAgMDAwICAgMDAwICAwMDAgICAgIDAwMCAgICAgMDAwMDAwMCAgICAwMDAgIDAwMDAwMDAgICAwMDAgICAwMDAgIFxuICAgIFxuICAgIGluaXREaXNoOiAtPlxuICAgICAgICBcbiAgICAgICAgQG1haW4uaW5uZXJIVE1MID0gJydcbiAgICAgICAgc3ZnID0gdXRpbHMuc3ZnIGNsc3M6J2Nsb2NrJ1xuICAgICAgICBAbWFpbi5hcHBlbmRDaGlsZCBzdmdcbiAgICAgICAgXG4gICAgICAgIHBpZSA9IHV0aWxzLmNpcmNsZSBjbHNzOidzeXNkaXNoX2Rpc2tfYmdyJyBzdmc6c3ZnXG4gICAgICAgIEBkc2tyUGllID0gdXRpbHMucGllIHN2ZzpwaWUsIHJhZGl1czo1MCBjbHNzOidzeXNkaXNoX2Rpc2tfcmVhZCcgIGFuZ2xlOjBcbiAgICAgICAgQGRza3dQaWUgPSB1dGlscy5waWUgc3ZnOnBpZSwgcmFkaXVzOjUwIGNsc3M6J3N5c2Rpc2hfZGlza193cml0ZScgYW5nbGU6MCwgc3RhcnQ6MTgwXG4gICAgICAgIFxuICAgICAgICBwaWUgPSB1dGlscy5jaXJjbGUgcmFkaXVzOjQ3IGNsc3M6J3N5c2Rpc2hfbmV0X2Jncicgc3ZnOnN2Z1xuICAgICAgICBAbmV0clBpZSA9IHV0aWxzLnBpZSBzdmc6cGllLCByYWRpdXM6NDcgY2xzczonc3lzZGlzaF9uZXRfcmVjdicgYW5nbGU6MFxuICAgICAgICBAbmV0dFBpZSA9IHV0aWxzLnBpZSBzdmc6cGllLCByYWRpdXM6NDcgY2xzczonc3lzZGlzaF9uZXRfc2VuZCcgYW5nbGU6MCBzdGFydDoxODBcbiAgICAgICAgICAgIFxuICAgICAgICBwaWUgPSB1dGlscy5jaXJjbGUgcmFkaXVzOjQ0IGNsc3M6J3N5c2Rpc2hfbG9hZF9iZ3InIHN2ZzpzdmdcbiAgICAgICAgQHN5c1BpZSA9IHV0aWxzLnBpZSBzdmc6cGllLCByYWRpdXM6NDQgY2xzczonc3lzZGlzaF9sb2FkX3N5cycgYW5nbGU6MFxuICAgICAgICBAdXNyUGllID0gdXRpbHMucGllIHN2ZzpwaWUsIHJhZGl1czo0NCBjbHNzOidzeXNkaXNoX2xvYWRfdXNyJyBhbmdsZTowXG5cbiAgICAgICAgcGllID0gdXRpbHMuY2lyY2xlIHJhZGl1czoxOCBjbHNzOidzeXNkaXNoX21lbV9iZ3InIHN2ZzpzdmdcbiAgICAgICAgQG1lbXVQaWUgPSB1dGlscy5waWUgc3ZnOnBpZSwgcmFkaXVzOjE4IGNsc3M6J3N5c2Rpc2hfbWVtX3VzZWQnICAgYW5nbGU6MFxuICAgICAgICBAbWVtYVBpZSA9IHV0aWxzLnBpZSBzdmc6cGllLCByYWRpdXM6MTggY2xzczonc3lzZGlzaF9tZW1fYWN0aXZlJyBhbmdsZTowXG4gICAgICAgICAgICBcbiAgICAgICAgXG4gICAgICMgMDAwMDAwMCAgICAwMDAwMDAwMCAgICAwMDAwMDAwICAgMDAwICAgMDAwICAwMDAwMDAwICAgIDAwMCAgIDAwMDAwMDAgIDAwMCAgIDAwMFxuICAgICAjIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAwIDAwMCAgMDAwICAgMDAwICAwMDAgIDAwMCAgICAgICAwMDAgICAwMDBcbiAgICAgIyAwMDAgICAwMDAgIDAwMDAwMDAgICAgMDAwMDAwMDAwICAwMDAwMDAwMDAgIDAwMCAgIDAwMCAgMDAwICAwMDAwMDAwICAgMDAwMDAwMDAwXG4gICAgICMgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgIDAwMCAgIDAwMFxuICAgICAjIDAwMDAwMDAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwICAgICAwMCAgMDAwMDAwMCAgICAwMDAgIDAwMDAwMDAgICAwMDAgICAwMDBcblxuICAgICBkcmF3RGlzaDogLT5cblxuICAgICAgICAgcmV0dXJuIGlmIG5vdCBAZGF0YVxuXG4gICAgICAgICBAYW5pbUNvdW50ID0gMFxuXG4gICAgICAgICBpZiBAZGF0YS5kc2s/XG5cbiAgICAgICAgICAgICBAZHNrck9sZCA9IEBkc2tyTm93ID0gQGRza3JOZXdcbiAgICAgICAgICAgICBAZHNrd09sZCA9IEBkc2t3Tm93ID0gQGRza3dOZXdcblxuICAgICAgICAgICAgIEBkc2tyTmV3ID0gMTgwKkBkYXRhLmRzay5yX3NlYy9AZGF0YS5kc2sucl9tYXhcbiAgICAgICAgICAgICBAZHNrd05ldyA9IDE4MCpAZGF0YS5kc2sud19zZWMvQGRhdGEuZHNrLndfbWF4XG4gICAgICAgICAgICAgXG4gICAgICAgICBAbmV0ck9sZCA9IEBuZXRyTm93ID0gQG5ldHJOZXdcbiAgICAgICAgIEBuZXR0T2xkID0gQG5ldHROb3cgPSBAbmV0dE5ld1xuXG4gICAgICAgICBAbmV0ck5ldyA9IDE4MCpAZGF0YS5uZXQucnhfc2VjL0BkYXRhLm5ldC5yeF9tYXhcbiAgICAgICAgIEBuZXR0TmV3ID0gMTgwKkBkYXRhLm5ldC50eF9zZWMvQGRhdGEubmV0LnR4X21heFxuXG4gICAgICAgICBAc3lzT2xkID0gQHN5c05vdyA9IEBzeXNOZXdcbiAgICAgICAgIEB1c3JPbGQgPSBAdXNyTm93ID0gQHVzck5ld1xuXG4gICAgICAgICBAc3lzTmV3ID0gMzYwKkBkYXRhLmNwdS5zeXNcbiAgICAgICAgIEB1c3JOZXcgPSAzNjAqQGRhdGEuY3B1LnVzclxuXG4gICAgICAgICBAbWVtdU9sZCA9IEBtZW11Tm93ID0gQG1lbXVOZXdcbiAgICAgICAgIEBtZW1hT2xkID0gQG1lbWFOb3cgPSBAbWVtYU5ld1xuXG4gICAgICAgICBAbWVtdU5ldyA9IDM2MCpAZGF0YS5tZW0udXNlZC9AZGF0YS5tZW0udG90YWxcbiAgICAgICAgIEBtZW1hTmV3ID0gMzYwKkBkYXRhLm1lbS5hY3RpdmUvQGRhdGEubWVtLnRvdGFsXG4gICAgICAgIFxuICAgICMgMDAwMDAwMCAgICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAwMDAwICAgICAwMDAwMDAwICBcbiAgICAjIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMDAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAgICAgXG4gICAgIyAwMDAwMDAwICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgMCAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgIFxuICAgICMgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAwMDAwICAwMDAgICAwMDAgICAgICAgMDAwICBcbiAgICAjIDAwMDAwMDAgICAgIDAwMDAwMDAgICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgICAwMDAwMDAwICAgXG4gICAgXG4gICAgb25Cb3VuZHM6IC0+XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gaWYgQG1vZGUgIT0gJ2dyYXBoJ1xuICAgICAgICBcbiAgICAgICAgQG1haW4uaW5uZXJIVE1MID0gJydcbiAgICAgICAgXG4gICAgICAgIGJyID0gQG1haW4uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgICAgICAgdyA9IHBhcnNlSW50IGJyLndpZHRoXG4gICAgICAgIGggPSBwYXJzZUludCBici5oZWlnaHQvM1xuICAgICAgICBcbiAgICAgICAgQHdpZHRoICA9IHcqMlxuICAgICAgICBAaGVpZ2h0ID0gaCoyXG4gICAgICAgIFxuICAgICAgICBAY2FudmFzID0ge30gICAgICAgICAgICBcbiAgICAgICAgZm9yIG4gaW4gWydkc2snICduZXQnICdjcHUnXVxuICAgICAgICAgICAgY2FudmFzID0gZWxlbSAnY2FudmFzJyBjbGFzczpcImhpc3RDYW52YXNcIiB3aWR0aDpAd2lkdGgtMSBoZWlnaHQ6QGhlaWdodFxuICAgICAgICAgICAgeCA9IHBhcnNlSW50IC1Ad2lkdGgvNFxuICAgICAgICAgICAgeSA9IHBhcnNlSW50IC1AaGVpZ2h0LzRcbiAgICAgICAgICAgIGNhbnZhcy5zdHlsZS50cmFuc2Zvcm0gPSBcInRyYW5zbGF0ZTNkKCN7eH1weCwgI3t5fXB4LCAwcHgpIHNjYWxlM2QoMC41LCAwLjUsIDEpXCJcbiAgICAgICAgICAgIGNhbnZhcy5zdHlsZS50b3AgPSBAdG9wc1tuXVxuICAgICAgICAgICAgQG1haW4uYXBwZW5kQ2hpbGQgY2FudmFzXG4gICAgICAgICAgICBAY2FudmFzW25dID0gY2FudmFzXG4gICAgICAgIFxubW9kdWxlLmV4cG9ydHMgPSBTeXNkaXNoXG4iXX0=
//# sourceURL=../coffee/sysdish.coffee