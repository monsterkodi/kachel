// koffee 1.3.0

/*
 0000000  000   000   0000000  0000000    000   0000000  000   000  
000        000 000   000       000   000  000  000       000   000  
0000000     00000    0000000   000   000  000  0000000   000000000  
     000     000          000  000   000  000       000  000   000  
0000000      000     0000000   0000000    000  0000000   000   000
 */
var Kachel, Sysdish, _, elem, empty, klog, post, ref, utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

ref = require('kxk'), post = ref.post, empty = ref.empty, elem = ref.elem, klog = ref.klog, _ = ref._;

utils = require('./utils');

Kachel = require('./kachel');

Sysdish = (function(superClass) {
    extend(Sysdish, superClass);

    function Sysdish(arg) {
        var ref1;
        this.kachelId = (ref1 = arg.kachelId) != null ? ref1 : 'sysdish';
        this.onData = bind(this.onData, this);
        this.onClick = bind(this.onClick, this);
        this.onContextMenu = bind(this.onContextMenu, this);
        arguments[0] = _.defaults({kachelId:this.kachelId}, arguments[0]); Sysdish.__super__.constructor.apply(this, arguments);
        this.mode = 'dish';
        this.history = {
            net: [],
            dsk: [],
            cpu: []
        };
        this.max = {
            net: [100, 100],
            dsk: [1, 1],
            cpu: [1, 1]
        };
        this.colors = {
            dsk: [[128, 128, 255], [64, 64, 255]],
            net: [[0, 150, 0], [0, 255, 0]],
            cpu: [[255, 255, 0], [255, 100, 0]]
        };
        this.tops = {
            net: '0%',
            dsk: '33%',
            cpu: '66%'
        };
        this.requestData('sysinfo');
    }

    Sysdish.prototype.onContextMenu = function() {
        return this.onClick();
    };

    Sysdish.prototype.onClick = function() {
        if (this.mode === 'dish') {
            return this.graphMode();
        } else {
            return this.dishMode();
        }
    };

    Sysdish.prototype.graphMode = function() {
        this.mode = 'graph';
        this.onBounds();
        return this.drawGraph();
    };

    Sysdish.prototype.dishMode = function() {
        this.mode = 'dish';
        return this.drawDish();
    };

    Sysdish.prototype.onData = function(data) {
        var hist, j, len, n, ref1;
        this.data = data;
        ref1 = ['dsk', 'net', 'cpu'];
        for (j = 0, len = ref1.length; j < len; j++) {
            n = ref1[j];
            hist = this.history[n];
            switch (n) {
                case 'dsk':
                    if (this.data.dsk != null) {
                        hist.push([this.data.dsk.r_sec, this.data.dsk.w_sec]);
                    } else {
                        hist.push([this.data.mem.active / this.data.mem.total, this.data.mem.used / this.data.mem.total]);
                    }
                    break;
                case 'cpu':
                    hist.push([this.data.cpu.sys, this.data.cpu.usr]);
                    break;
                case 'net':
                    hist.push([this.data.net.rx_sec, this.data.net.tx_sec]);
            }
            while (hist.length > this.width) {
                hist.shift();
            }
        }
        if (this.mode === 'dish') {
            return this.drawDish();
        } else {
            return this.drawGraph();
        }
    };

    Sysdish.prototype.drawGraph = function() {
        var canvas, ctx, h, hist, i, j, l, len, m, max, n, ref1, results;
        ref1 = ['dsk', 'net', 'cpu'];
        results = [];
        for (j = 0, len = ref1.length; j < len; j++) {
            n = ref1[j];
            hist = this.history[n];
            if (empty(hist)) {
                continue;
            }
            canvas = this.canvas[n];
            canvas.height = canvas.height;
            ctx = canvas.getContext('2d');
            max = [this.max[n][0], this.max[n][1]];
            results.push((function() {
                var k, len1, ref2, results1;
                ref2 = [0, 1];
                results1 = [];
                for (k = 0, len1 = ref2.length; k < len1; k++) {
                    m = ref2[k];
                    ctx.fillStyle = "rgb(" + this.colors[n][m][0] + ", " + this.colors[n][m][1] + ", " + this.colors[n][m][2] + ")";
                    results1.push((function() {
                        var o, ref3, results2;
                        results2 = [];
                        for (i = o = 0, ref3 = hist.length; 0 <= ref3 ? o < ref3 : o > ref3; i = 0 <= ref3 ? ++o : --o) {
                            if (n === 'cpu') {
                                if (m) {
                                    h = this.height * (hist[i][0] - hist[i][1]);
                                    l = this.height * hist[i][0];
                                    results2.push(ctx.fillRect(this.width - hist.length + i, this.height - l, 1, h));
                                } else {
                                    h = this.height * hist[i][1];
                                    results2.push(ctx.fillRect(this.width - hist.length + i, this.height - h, 2, h));
                                }
                            } else {
                                this.max[n][m] = Math.max(hist[i][m], this.max[n][m]);
                                h = (hist[i][m] / max[m]) * this.height / 2;
                                if (m) {
                                    results2.push(ctx.fillRect(this.width - hist.length + i, this.height / 2 - h, 2, h));
                                } else {
                                    results2.push(ctx.fillRect(this.width - hist.length + i, this.height / 2, 2, h));
                                }
                            }
                        }
                        return results2;
                    }).call(this));
                }
                return results1;
            }).call(this));
        }
        return results;
    };

    Sysdish.prototype.drawDish = function() {
        var pie, svg;
        this.main.innerHTML = '';
        svg = utils.svg({
            clss: 'clock'
        });
        this.main.appendChild(svg);
        if (this.data.dsk != null) {
            pie = utils.circle({
                clss: 'sysdish_disk_bgr',
                svg: svg
            });
            utils.pie({
                svg: pie,
                clss: 'sysdish_disk_read',
                angle: 180 * this.data.dsk.r_sec / this.data.dsk.r_max
            });
            utils.pie({
                svg: pie,
                clss: 'sysdish_disk_write',
                angle: 180 * this.data.dsk.w_sec / this.data.dsk.w_max,
                start: 180
            });
        }
        pie = utils.circle({
            radius: 47,
            clss: 'sysdish_net_bgr',
            svg: svg
        });
        utils.pie({
            svg: pie,
            radius: 47,
            clss: 'sysdish_net_recv',
            angle: 180 * this.data.net.rx_sec / this.data.net.rx_max
        });
        utils.pie({
            svg: pie,
            radius: 47,
            clss: 'sysdish_net_send',
            angle: 180 * this.data.net.tx_sec / this.data.net.tx_max,
            start: 180
        });
        pie = utils.circle({
            radius: 44,
            clss: 'sysdish_load_bgr',
            svg: svg
        });
        utils.pie({
            svg: pie,
            radius: 44,
            clss: 'sysdish_load_sys',
            angle: 360 * this.data.cpu.sys
        });
        utils.pie({
            svg: pie,
            radius: 44,
            clss: 'sysdish_load_usr',
            angle: 360 * this.data.cpu.usr
        });
        pie = utils.circle({
            radius: 18,
            clss: 'sysdish_mem_bgr',
            svg: svg
        });
        utils.pie({
            svg: pie,
            radius: 18,
            clss: 'sysdish_mem_used',
            angle: 360 * this.data.mem.used / this.data.mem.total
        });
        return utils.pie({
            svg: pie,
            radius: 18,
            clss: 'sysdish_mem_active',
            angle: 360 * this.data.mem.active / this.data.mem.total
        });
    };

    Sysdish.prototype.onBounds = function() {
        var br, canvas, h, j, len, n, ref1, results, w, x, y;
        if (this.mode !== 'graph') {
            return;
        }
        this.main.innerHTML = '';
        br = this.main.getBoundingClientRect();
        w = parseInt(br.width);
        h = parseInt(br.height / 3);
        this.width = w * 2;
        this.height = h * 2;
        this.canvas = {};
        ref1 = ['dsk', 'net', 'cpu'];
        results = [];
        for (j = 0, len = ref1.length; j < len; j++) {
            n = ref1[j];
            canvas = elem('canvas', {
                "class": "histCanvas",
                width: this.width - 1,
                height: this.height
            });
            x = parseInt(-this.width / 4);
            y = parseInt(-this.height / 4);
            canvas.style.transform = "translate3d(" + x + "px, " + y + "px, 0px) scale3d(0.5, 0.5, 1)";
            canvas.style.top = this.tops[n];
            this.main.appendChild(canvas);
            results.push(this.canvas[n] = canvas);
        }
        return results;
    };

    return Sysdish;

})(Kachel);

module.exports = Sysdish;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/sysdish.coffee