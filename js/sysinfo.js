// koffee 1.3.0

/*
 0000000  000   000   0000000  000  000   000  00000000   0000000   
000        000 000   000       000  0000  000  000       000   000  
0000000     00000    0000000   000  000 0 000  000000    000   000  
     000     000          000  000  000  0000  000       000   000  
0000000      000     0000000   000  000   000  000        0000000
 */
var Kachel, Sysinfo, _, elem, empty, klog, post, prefs, ref, utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

ref = require('kxk'), elem = ref.elem, post = ref.post, prefs = ref.prefs, empty = ref.empty, klog = ref.klog, _ = ref._;

utils = require('./utils');

Kachel = require('./kachel');

Sysinfo = (function(superClass) {
    extend(Sysinfo, superClass);

    function Sysinfo(arg) {
        var ref1;
        this.kachelId = (ref1 = arg.kachelId) != null ? ref1 : 'sysinfo';
        this.onData = bind(this.onData, this);
        arguments[0] = _.defaults({kachelId:this.kachelId}, arguments[0]); Sysinfo.__super__.constructor.apply(this, arguments);
        this.history = {
            net: [],
            dsk: [],
            cpu: []
        };
        this.max = {
            net: [prefs.get('sysinfo▸net0', 100), prefs.get('sysinfo▸net1', 100)],
            dsk: [prefs.get('sysinfo▸dsk0', 100), prefs.get('sysinfo▸dsk1', 100)],
            cpu: [1, 1]
        };
        this.colors = {
            dsk: [[128, 128, 255], [64, 64, 255]],
            net: [[0, 150, 0], [0, 255, 0]],
            cpu: [[255, 255, 0], [255, 100, 0]]
        };
        this.tops = {
            dsk: '0%',
            net: '33%',
            cpu: '66%'
        };
        post.toMain('requestData', 'sysdata', this.id);
        post.on('data', this.onData);
    }

    Sysinfo.prototype.onBounds = function() {
        var br, canvas, h, j, len, n, ref1, results, w, x, y;
        this.main.innerHTML = '';
        br = this.main.getBoundingClientRect();
        w = parseInt(br.width);
        h = parseInt(br.height / 3);
        this.width = w * 2;
        this.height = h * 2;
        this.canvas = {};
        ref1 = ['dsk', 'net', 'cpu'];
        results = [];
        for (j = 0, len = ref1.length; j < len; j++) {
            n = ref1[j];
            canvas = elem('canvas', {
                "class": "histCanvas",
                width: this.width - 1,
                height: this.height
            });
            x = parseInt(-this.width / 4);
            y = parseInt(-this.height / 4);
            canvas.style.transform = "translate3d(" + x + "px, " + y + "px, 0px) scale3d(0.5, 0.5, 1)";
            canvas.style.top = this.tops[n];
            this.main.appendChild(canvas);
            results.push(this.canvas[n] = canvas);
        }
        return results;
    };

    Sysinfo.prototype.onData = function(data) {
        var canvas, ctx, h, hist, i, j, l, len, m, max, n, ref1, results;
        ref1 = ['dsk', 'net', 'cpu'];
        results = [];
        for (j = 0, len = ref1.length; j < len; j++) {
            n = ref1[j];
            hist = this.history[n];
            switch (n) {
                case 'dsk':
                    if (data.disksIO != null) {
                        hist.push([data.disksIO.rIO_sec, data.disksIO.wIO_sec]);
                    }
                    break;
                case 'net':
                    hist.push([data.networkStats[0].rx_sec, data.networkStats[0].tx_sec]);
                    break;
                case 'cpu':
                    hist.push([data.currentLoad.currentload / 100, data.currentLoad.currentload_user / 100]);
            }
            if (empty(hist)) {
                continue;
            }
            while (hist.length > this.width) {
                hist.shift();
            }
            canvas = this.canvas[n];
            canvas.height = canvas.height;
            ctx = canvas.getContext('2d');
            max = [this.max[n][0], this.max[n][1]];
            results.push((function() {
                var k, len1, o, ref2, ref3, results1;
                ref2 = [0, 1];
                results1 = [];
                for (k = 0, len1 = ref2.length; k < len1; k++) {
                    m = ref2[k];
                    ctx.fillStyle = "rgb(" + this.colors[n][m][0] + ", " + this.colors[n][m][1] + ", " + this.colors[n][m][2] + ")";
                    for (i = o = 0, ref3 = hist.length; 0 <= ref3 ? o < ref3 : o > ref3; i = 0 <= ref3 ? ++o : --o) {
                        if (n === 'cpu') {
                            if (m) {
                                h = this.height * (hist[i][0] - hist[i][1]);
                                l = this.height * hist[i][0];
                                ctx.fillRect(this.width - hist.length + i, this.height - l, 1, h);
                            } else {
                                h = this.height * hist[i][1];
                                ctx.fillRect(this.width - hist.length + i, this.height - h, 2, h);
                            }
                        } else {
                            this.max[n][m] = Math.max(hist[i][m], this.max[n][m]);
                            h = this.height / 2 * hist[i][m] / max[m];
                            if (m) {
                                ctx.fillRect(this.width - hist.length + i, this.height / 2 - h, 2, h);
                            } else {
                                ctx.fillRect(this.width - hist.length + i, this.height / 2, 2, h);
                            }
                        }
                    }
                    if (this.max[n][m] > max[m]) {
                        results1.push(prefs.set("sysinfo▸" + n + m, parseInt(this.max[n][m])));
                    } else {
                        results1.push(void 0);
                    }
                }
                return results1;
            }).call(this));
        }
        return results;
    };

    return Sysinfo;

})(Kachel);

module.exports = Sysinfo;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/sysinfo.coffee