// koffee 1.3.0

/*
 0000000  000   000  00000000   0000000    00000000  000      000000000
000       000   000  000   000  000   000  000       000         000   
0000000    000 000   0000000    000   000  000000    000         000   
     000     000     000   000  000   000  000       000         000   
0000000       0      000   000  0000000    000       0000000     000
 */
var SaverDefault, clamp, electron, elem, klog, kpos, randInt, randIntRange, randRange, ref, rts, sh, sw,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ref = require('kxk'), sw = ref.sw, sh = ref.sh, elem = ref.elem, kpos = ref.kpos, clamp = ref.clamp, randRange = ref.randRange, randInt = ref.randInt, randIntRange = ref.randIntRange, klog = ref.klog;

electron = require('electron');

SaverDefault = (function() {
    function SaverDefault() {
        this.animation = bind(this.animation, this);
        this.fadeOut = bind(this.fadeOut, this);
        this.close = bind(this.close, this);
        this.onMouseMove = bind(this.onMouseMove, this);
        var xo, yo;
        document.body.addEventListener('keydown', this.close);
        document.body.addEventListener('mousedown', this.close);
        document.body.addEventListener('mousemove', this.onMouseMove);
        document.body.focus();
        this.cubeSize = randIntRange(6, 32);
        this.cubesPerF = parseInt(Math.max(1, (33 - this.cubeSize) * randRange(0.25, 1)));
        this.dirProb = randRange(0.02, 0.5);
        klog("cubeSize " + this.cubeSize + " cpf " + this.cubesPerF + " dirprob " + this.dirProb);
        this.fade = 0;
        this.red = 0;
        this.green = 0;
        this.blue = 0;
        this.lastDir = 0;
        this.cubeCount = 0;
        this.scalef = electron.remote.screen.getPrimaryDisplay().scaleFactor;
        this.width = sw() * this.scalef;
        this.height = sh() * this.scalef;
        this.pos = kpos(randInt(this.width / this.cubeSize), randInt(this.height / this.cubeSize));
        this.canvas = elem('canvas', {
            width: this.width,
            height: this.height
        });
        this.ctx = this.canvas.getContext('2d');
        if (this.scalef !== 1) {
            xo = -this.width / 2 + sw() / 2;
            yo = -this.height / 2 + sh() / 2;
            this.canvas.style.transform = "translate3d(" + xo + "px, " + yo + "px, 0px) scale3d(" + (1 / this.scalef) + ", " + (1 / this.scalef) + ", 1)";
        }
        document.body.appendChild(this.canvas);
        this.fadeOut();
    }

    SaverDefault.prototype.onMouseMove = function(event) {
        if (this.startpos != null) {
            this.startpos;
        } else {
            this.startpos = kpos(event);
        }
        if (kpos(event).dist(this.startpos) > 10) {
            return this.close();
        }
    };

    SaverDefault.prototype.close = function() {
        var w;
        document.body.removeEventListener('keydown', this.close);
        document.body.removeEventListener('mousedown', this.close);
        document.body.removeEventListener('mousemove', this.close);
        w = electron.remote.getCurrentWindow();
        return w.close();
    };

    SaverDefault.prototype.onFade = function() {
        var steps;
        steps = 256;
        this.fade += 1;
        this.ctx.fillStyle = "rgba(0,0,0," + (this.fade / steps) + ")";
        this.ctx.fillRect(0, 0, this.width, this.height);
        return this.fade < steps;
    };

    SaverDefault.prototype.fadeOut = function() {
        this.canvas.width = this.canvas.width;
        if (this.onFade()) {
            return window.requestAnimationFrame(this.fadeOut);
        } else {
            return this.animation();
        }
    };

    SaverDefault.prototype.animation = function() {
        if (this.onFrame()) {
            return window.requestAnimationFrame(this.animation);
        }
    };

    SaverDefault.prototype.onFrame = function() {
        var c, i, nextDir, pos, ref1, size, skip;
        pos = this.pos;
        size = kpos(parseInt(this.width / this.cubeSize), parseInt(this.height / this.cubeSize));
        for (c = i = 0, ref1 = this.cubesPerF; 0 <= ref1 ? i < ref1 : i > ref1; c = 0 <= ref1 ? ++i : --i) {
            nextDir = this.lastDir;
            if (Math.random() < this.dirProb) {
                while (nextDir === this.lastDir || (nextDir + 3) % 6 === this.lastDir) {
                    nextDir = randInt(6);
                }
            }
            this.nextPos(nextDir, pos);
            if (pos.x < 1 || pos.y < 2 || pos.x >= size.x || pos.y >= size.y) {
                nextDir = randInt(6);
                if (pos.x < 1) {
                    pos.x = size.x - 1;
                } else if (pos.x > size.x - 1) {
                    pos.x = 1;
                }
                if (pos.y < 2) {
                    pos.y = size.y - 2;
                } else if (pos.y > size.y - 1) {
                    pos.y = 2;
                }
            }
            this.nextColor(nextDir);
            skip = null;
            if (this.cubeCount) {
                switch (nextDir) {
                    case 3:
                        skip = 0;
                        break;
                    case 4:
                        skip = 1;
                        break;
                    case 5:
                        skip = 2;
                }
            }
            this.drawCube(skip);
            this.cubeCount += 1;
            this.lastDir = nextDir;
        }
        return true;
    };

    SaverDefault.prototype.nextPos = function(nextDir, pos) {
        switch (nextDir) {
            case 0:
                return pos.y -= 1;
            case 1:
                if (pos.x % 2 === 0) {
                    pos.y += 1;
                }
                return pos.x -= 1;
            case 2:
                if (pos.x % 2 === 0) {
                    pos.y += 1;
                }
                return pos.x += 1;
            case 3:
                return pos.y += 1;
            case 4:
                if (pos.x % 2 === 1) {
                    pos.y -= 1;
                }
                return pos.x += 1;
            case 5:
                if (pos.x % 2 === 1) {
                    pos.y -= 1;
                }
                return pos.x -= 1;
        }
    };

    SaverDefault.prototype.nextColor = function(nextDir) {
        var hd, ld;
        hd = 0.02;
        ld = 0.002;
        switch (nextDir) {
            case 0:
                this.red = clamp(0, 1, this.red + hd);
                this.green = clamp(0, 1, this.green - ld);
                return this.blue = clamp(0, 1, this.blue - ld);
            case 3:
                this.red = clamp(0, 1, this.red + hd);
                this.green = clamp(0, 1, this.green - hd);
                return this.blue = clamp(0, 1, this.blue - hd);
            case 1:
                this.red = clamp(0, 1, this.red - ld);
                this.green = clamp(0, 1, this.green + hd);
                return this.blue = clamp(0, 1, this.blue - ld);
            case 4:
                this.red = clamp(0, 1, this.red - hd);
                this.green = clamp(0, 1, this.green + hd);
                return this.blue = clamp(0, 1, this.blue - hd);
            case 2:
                this.red = clamp(0, 1, this.red - ld);
                this.green = clamp(0, 1, this.green - ld);
                return this.blue = clamp(0, 1, this.blue + hd);
            case 5:
                this.red = clamp(0, 1, this.red - hd);
                this.green = clamp(0, 1, this.green - hd);
                return this.blue = clamp(0, 1, this.blue + hd);
        }
    };

    SaverDefault.prototype.drawCube = function(skip) {
        var s, x, y;
        s = this.cubeSize / 2;
        x = this.pos.x * this.cubeSize;
        y = (this.pos.x % 2 === 0) && (this.pos.y * this.cubeSize) || (this.pos.y * this.cubeSize - s);
        if (skip !== 0) {
            this.ctx.fillStyle = "rgb(" + (this.red * 255) + ", " + (this.green * 255) + ", " + (this.blue * 255) + ")";
            this.ctx.beginPath();
            this.ctx.moveTo(x, y);
            this.ctx.lineTo(x + this.cubeSize, y - s);
            this.ctx.lineTo(x, y - this.cubeSize);
            this.ctx.lineTo(x - this.cubeSize, y - s);
            this.ctx.closePath();
            this.ctx.fill();
        }
        if (skip !== 1) {
            this.ctx.fillStyle = "rgb(" + (this.red * 255 * 0.5) + ", " + (this.green * 255 * 0.5) + ", " + (this.blue * 255 * 0.5) + ")";
            this.ctx.beginPath();
            this.ctx.moveTo(x, y);
            this.ctx.lineTo(x - this.cubeSize, y - s);
            this.ctx.lineTo(x - this.cubeSize, y + s);
            this.ctx.lineTo(x, y + this.cubeSize);
            this.ctx.closePath();
            this.ctx.fill();
        }
        if (skip !== 2) {
            this.ctx.fillStyle = "rgb(" + (this.red * 255 * 0.2) + ", " + (this.green * 255 * 0.2) + ", " + (this.blue * 255 * 0.2) + ")";
            this.ctx.beginPath();
            this.ctx.moveTo(x, y);
            this.ctx.lineTo(x + this.cubeSize, y - s);
            this.ctx.lineTo(x + this.cubeSize, y + s);
            this.ctx.lineTo(x, y + this.cubeSize);
            this.ctx.closePath();
            return this.ctx.fill();
        }
    };

    return SaverDefault;

})();

module.exports = SaverDefault;

rts = SaverDefault;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/saverdefault.coffee