// koffee 1.3.0

/*
 0000000  000   000  00000000   0000000    00000000  000      000000000
000       000   000  000   000  000   000  000       000         000   
0000000    000 000   0000000    000   000  000000    000         000   
     000     000     000   000  000   000  000       000         000   
0000000       0      000   000  0000000    000       0000000     000
 */
var SaverDefault, clamp, electron, elem, klog, kpos, randInt, randIntRange, randRange, ref, sh, sw,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ref = require('kxk'), sw = ref.sw, sh = ref.sh, elem = ref.elem, kpos = ref.kpos, clamp = ref.clamp, randRange = ref.randRange, randInt = ref.randInt, randIntRange = ref.randIntRange, klog = ref.klog;

electron = require('electron');

SaverDefault = (function() {
    function SaverDefault() {
        this.animation = bind(this.animation, this);
        this.fadeOut = bind(this.fadeOut, this);
        this.close = bind(this.close, this);
        this.onMouseMove = bind(this.onMouseMove, this);
        var xo, yo;
        document.body.addEventListener('keydown', this.close);
        document.body.addEventListener('mousedown', this.close);
        document.body.addEventListener('mousemove', this.onMouseMove);
        document.body.focus();
        this.fade = 0;
        this.w = this.h = randIntRange(6, 32);
        this.dirProb = randRange(0.05, 0.2);
        this.red = 0;
        this.green = 0;
        this.blue = 0;
        this.cubeCount = 0;
        this.lastDir = 0;
        this.scalef = electron.remote.screen.getPrimaryDisplay().scaleFactor;
        this.width = sw() * this.scalef;
        this.height = sh() * this.scalef;
        this.pos = kpos(randInt(this.width / this.w), randInt(this.height / this.h));
        this.canvas = elem('canvas', {
            width: this.width,
            height: this.height
        });
        this.ctx = this.canvas.getContext('2d');
        if (this.scalef !== 1) {
            xo = -this.width / 2 + sw() / 2;
            yo = -this.height / 2 + sh() / 2;
            this.canvas.style.transform = "translate3d(" + xo + "px, " + yo + "px, 0px) scale3d(" + (1 / this.scalef) + ", " + (1 / this.scalef) + ", 1)";
        }
        document.body.appendChild(this.canvas);
        this.fadeOut();
    }

    SaverDefault.prototype.onMouseMove = function(event) {
        if (this.startpos != null) {
            this.startpos;
        } else {
            this.startpos = kpos(event);
        }
        if (kpos(event).dist(this.startpos) > 10) {
            return this.close();
        }
    };

    SaverDefault.prototype.close = function() {
        var w;
        document.body.removeEventListener('keydown', this.close);
        document.body.removeEventListener('mousedown', this.close);
        document.body.removeEventListener('mousemove', this.close);
        w = electron.remote.getCurrentWindow();
        return w.close();
    };

    SaverDefault.prototype.onFade = function() {
        var steps;
        steps = 256;
        this.fade += 1;
        this.ctx.fillStyle = "rgba(0,0,0," + (this.fade / steps) + ")";
        this.ctx.fillRect(0, 0, this.width, this.height);
        return this.fade < steps;
    };

    SaverDefault.prototype.fadeOut = function() {
        this.canvas.width = this.canvas.width;
        if (this.onFade()) {
            return window.requestAnimationFrame(this.fadeOut);
        } else {
            return this.animation();
        }
    };

    SaverDefault.prototype.animation = function() {
        if (this.onFrame()) {
            return window.requestAnimationFrame(this.animation);
        }
    };

    SaverDefault.prototype.onFrame = function() {
        var hd, ld, nextDir, pos, size, skip;
        pos = this.pos;
        size = kpos(parseInt(this.width / this.w), parseInt(this.height / this.h));
        nextDir = this.lastDir;
        if (Math.random() < this.dirProb) {
            while (nextDir === this.lastDir || (nextDir + 3) % 6 === this.lastDir) {
                nextDir = randInt(6);
            }
        }
        switch (nextDir) {
            case 0:
                pos.y -= 1;
                break;
            case 1:
                if (pos.x % 2 === 0) {
                    pos.y += 1;
                }
                pos.x -= 1;
                break;
            case 2:
                if (pos.x % 2 === 0) {
                    pos.y += 1;
                }
                pos.x += 1;
                break;
            case 3:
                pos.y += 1;
                break;
            case 4:
                if (pos.x % 2 === 1) {
                    pos.y -= 1;
                }
                pos.x += 1;
                break;
            case 5:
                if (pos.x % 2 === 1) {
                    pos.y -= 1;
                }
                pos.x -= 1;
        }
        if (pos.x < 1 || pos.y < 2 || pos.x >= size.x || pos.y >= size.y) {
            nextDir = randInt(6);
            if (pos.x < 1) {
                pos.x = size.x - 1;
            } else if (pos.x > size.x - 1) {
                pos.x = 1;
            }
            if (pos.y < 2) {
                pos.y = size.y - 2;
            } else if (pos.y > size.y - 1) {
                pos.y = 2;
            }
        }
        hd = 0.02;
        ld = 0.002;
        switch (nextDir) {
            case 0:
                this.red = clamp(0, 1, this.red + hd);
                this.green = clamp(0, 1, this.green - ld);
                this.blue = clamp(0, 1, this.blue - ld);
                break;
            case 3:
                this.red = clamp(0, 1, this.red + hd);
                this.green = clamp(0, 1, this.green - hd);
                this.blue = clamp(0, 1, this.blue - hd);
                break;
            case 1:
                this.red = clamp(0, 1, this.red - ld);
                this.green = clamp(0, 1, this.green + hd);
                this.blue = clamp(0, 1, this.blue - ld);
                break;
            case 4:
                this.red = clamp(0, 1, this.red - hd);
                this.green = clamp(0, 1, this.green + hd);
                this.blue = clamp(0, 1, this.blue - hd);
                break;
            case 2:
                this.red = clamp(0, 1, this.red - ld);
                this.green = clamp(0, 1, this.green - ld);
                this.blue = clamp(0, 1, this.blue + hd);
                break;
            case 5:
                this.red = clamp(0, 1, this.red - hd);
                this.green = clamp(0, 1, this.green - hd);
                this.blue = clamp(0, 1, this.blue + hd);
        }
        skip = null;
        if (this.cubeCount) {
            switch (nextDir) {
                case 3:
                    skip = 0;
                    break;
                case 4:
                    skip = 1;
                    break;
                case 5:
                    skip = 2;
            }
        }
        this.drawCube(skip);
        this.cubeCount += 1;
        this.lastDir = nextDir;
        return true;
    };

    SaverDefault.prototype.drawCube = function(skip) {
        var s, x, y;
        s = this.h / 2;
        x = this.pos.x * this.w;
        y = (this.pos.x % 2 === 0) && (this.pos.y * this.h) || (this.pos.y * this.h - s);
        if (skip !== 0) {
            this.ctx.fillStyle = "rgb(" + (this.red * 255) + ", " + (this.green * 255) + ", " + (this.blue * 255) + ")";
            this.ctx.beginPath();
            this.ctx.moveTo(x, y);
            this.ctx.lineTo(x + this.w, y - s);
            this.ctx.lineTo(x, y - this.h);
            this.ctx.lineTo(x - this.w, y - s);
            this.ctx.closePath();
            this.ctx.fill();
        }
        if (skip !== 1) {
            this.ctx.fillStyle = "rgb(" + (this.red * 255 * 0.5) + ", " + (this.green * 255 * 0.5) + ", " + (this.blue * 255 * 0.5) + ")";
            this.ctx.beginPath();
            this.ctx.moveTo(x, y);
            this.ctx.lineTo(x - this.w, y - s);
            this.ctx.lineTo(x - this.w, y + s);
            this.ctx.lineTo(x, y + this.h);
            this.ctx.closePath();
            this.ctx.fill();
        }
        if (skip !== 2) {
            this.ctx.fillStyle = "rgb(" + (this.red * 255 * 0.2) + ", " + (this.green * 255 * 0.2) + ", " + (this.blue * 255 * 0.2) + ")";
            this.ctx.beginPath();
            this.ctx.moveTo(x, y);
            this.ctx.lineTo(x + this.w, y - s);
            this.ctx.lineTo(x + this.w, y + s);
            this.ctx.lineTo(x, y + this.h);
            this.ctx.closePath();
            return this.ctx.fill();
        }
    };

    return SaverDefault;

})();

module.exports = SaverDefault;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2F2ZXJkZWZhdWx0LmpzIiwic291cmNlUm9vdCI6Ii4iLCJzb3VyY2VzIjpbIiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOzs7Ozs7O0FBQUEsSUFBQSw4RkFBQTtJQUFBOztBQVFBLE1BQXdFLE9BQUEsQ0FBUSxLQUFSLENBQXhFLEVBQUUsV0FBRixFQUFNLFdBQU4sRUFBVSxlQUFWLEVBQWdCLGVBQWhCLEVBQXNCLGlCQUF0QixFQUE2Qix5QkFBN0IsRUFBd0MscUJBQXhDLEVBQWlELCtCQUFqRCxFQUErRDs7QUFFL0QsUUFBQSxHQUFXLE9BQUEsQ0FBUSxVQUFSOztBQUVMO0lBRVcsc0JBQUE7Ozs7O0FBRVQsWUFBQTtRQUFBLFFBQVEsQ0FBQyxJQUFJLENBQUMsZ0JBQWQsQ0FBK0IsU0FBL0IsRUFBMkMsSUFBQyxDQUFBLEtBQTVDO1FBQ0EsUUFBUSxDQUFDLElBQUksQ0FBQyxnQkFBZCxDQUErQixXQUEvQixFQUEyQyxJQUFDLENBQUEsS0FBNUM7UUFDQSxRQUFRLENBQUMsSUFBSSxDQUFDLGdCQUFkLENBQStCLFdBQS9CLEVBQTJDLElBQUMsQ0FBQSxXQUE1QztRQUNBLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBZCxDQUFBO1FBRUEsSUFBQyxDQUFBLElBQUQsR0FBUTtRQUNSLElBQUMsQ0FBQSxDQUFELEdBQUssSUFBQyxDQUFBLENBQUQsR0FBSyxZQUFBLENBQWEsQ0FBYixFQUFlLEVBQWY7UUFDVixJQUFDLENBQUEsT0FBRCxHQUFXLFNBQUEsQ0FBVSxJQUFWLEVBQWUsR0FBZjtRQUVYLElBQUMsQ0FBQSxHQUFELEdBQVM7UUFDVCxJQUFDLENBQUEsS0FBRCxHQUFTO1FBQ1QsSUFBQyxDQUFBLElBQUQsR0FBUztRQUVULElBQUMsQ0FBQSxTQUFELEdBQWE7UUFDYixJQUFDLENBQUEsT0FBRCxHQUFXO1FBQ1gsSUFBQyxDQUFBLE1BQUQsR0FBVSxRQUFRLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxpQkFBdkIsQ0FBQSxDQUEwQyxDQUFD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Q0FBQSxHQUFELEdBQUssR0FBTCxHQUFTLEdBQVYsQ0FBTixHQUFvQixJQUFwQixHQUF1QixDQUFDLElBQUMsQ0FBQSxLQUFELEdBQU8sR0FBUCxHQUFXLEdBQVosQ0FBdkIsR0FBdUMsSUFBdkMsR0FBMEMsQ0FBQyxJQUFDLENBQUEsSUFBRCxHQUFNLEdBQU4sR0FBVSxHQUFYLENBQTFDLEdBQXlEO1lBQzFFLElBQUMsQ0FBQSxHQUFHLENBQUMsU0FBTCxDQUFBO1lBQ0EsSUFBQyxDQUFBLEdBQUcsQ0FBQyxNQUFMLENBQVksQ0FBWixFQUFpQixDQUFqQjtZQUNBLElBQUMsQ0FBQSxHQUFHLENBQUMsTUFBTCxDQUFZLENBQUEsR0FBRSxJQUFDLENBQUEsQ0FBZixFQUFrQixDQUFBLEdBQUUsQ0FBcEI7WUFDQSxJQUFDLENBQUEsR0FBRyxDQUFDLE1BQUwsQ0FBWSxDQUFBLEdBQUUsSUFBQyxDQUFBLENBQWYsRUFBa0IsQ0FBQSxHQUFFLENBQXBCO1lBQ0EsSUFBQyxDQUFBLEdBQUcsQ0FBQyxNQUFMLENBQVksQ0FBWixFQUFpQixDQUFBLEdBQUUsSUFBQyxDQUFBLENBQXBCO1lBQ0EsSUFBQyxDQUFBLEdBQUcsQ0FBQyxTQUFMLENBQUE7bUJBQ0EsSUFBQyxDQUFBLEdBQUcsQ0FBQyxJQUFMLENBQUEsRUFSSjs7SUExQk07Ozs7OztBQW9DZCxNQUFNLENBQUMsT0FBUCxHQUFpQiIsInNvdXJjZXNDb250ZW50IjpbIiMjI1xuIDAwMDAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMDAgICAwMDAwMDAwICAgIDAwMDAwMDAwICAwMDAgICAgICAwMDAwMDAwMDBcbjAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAgICAgICAgMDAwICAgXG4wMDAwMDAwICAgIDAwMCAwMDAgICAwMDAwMDAwICAgIDAwMCAgIDAwMCAgMDAwMDAwICAgIDAwMCAgICAgICAgIDAwMCAgIFxuICAgICAwMDAgICAgIDAwMCAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAgICAgICAwMDAgICBcbjAwMDAwMDAgICAgICAgMCAgICAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgICAwMDAgICAgICAgMDAwMDAwMCAgICAgMDAwICAgXG4jIyNcblxueyBzdywgc2gsIGVsZW0sIGtwb3MsIGNsYW1wLCByYW5kUmFuZ2UsIHJhbmRJbnQsIHJhbmRJbnRSYW5nZSwga2xvZyB9ID0gcmVxdWlyZSAna3hrJ1xuICAgICAgICBcbmVsZWN0cm9uID0gcmVxdWlyZSAnZWxlY3Ryb24nXG4gICAgICAgIFxuY2xhc3MgU2F2ZXJEZWZhdWx0XG5cbiAgICBjb25zdHJ1Y3RvcjogKCkgLT5cblxuICAgICAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIgJ2tleWRvd24nICAgQGNsb3NlXG4gICAgICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lciAnbW91c2Vkb3duJyBAY2xvc2VcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyICdtb3VzZW1vdmUnIEBvbk1vdXNlTW92ZVxuICAgICAgICBkb2N1bWVudC5ib2R5LmZvY3VzKClcbiAgICBcbiAgICAgICAgQGZhZGUgPSAwXG4gICAgICAgIEB3ID0gQGggPSByYW5kSW50UmFuZ2UgNiAzMlxuICAgICAgICBAZGlyUHJvYiA9IHJhbmRSYW5nZSAwLjA1IDAuMlxuICAgICAgICBcbiAgICAgICAgQHJlZCAgID0gMFxuICAgICAgICBAZ3JlZW4gPSAwXG4gICAgICAgIEBibHVlICA9IDBcbiAgICAgICAgXG4gICAgICAgIEBjdWJlQ291bnQgPSAwXG4gICAgICAgIEBsYXN0RGlyID0gMFxuICAgICAgICBAc2NhbGVmID0gZWxlY3Ryb24ucmVtb3RlLnNjcmVlbi5nZXRQcmltYXJ5RGlzcGxheSgpLnNjYWxlRmFjdG9yXG4gICAgICAgIEB3aWR0aCAgPSBzdygpKkBzY2FsZWZcbiAgICAgICAgQGhlaWdodCA9IHNoKCkqQHNjYWxlZlxuICAgICAgICBcbiAgICAgICAgQHBvcyA9IGtwb3MgcmFuZEludChAd2lkdGgvQHcpLCByYW5kSW50KEBoZWlnaHQvQGgpXG4gICAgICAgICAgICAgICAgXG4gICAgICAgIEBjYW52YXMgPSBlbGVtICdjYW52YXMnIHdpZHRoOkB3aWR0aCwgaGVpZ2h0OkBoZWlnaHRcbiAgICAgICAgQGN0eCA9IEBjYW52YXMuZ2V0Q29udGV4dCAnMmQnXG4gICAgICAgIFxuICAgICAgICBpZiBAc2NhbGVmICE9IDFcbiAgICAgICAgICAgIHhvID0gLUB3aWR0aC8yK3N3KCkvMlxuICAgICAgICAgICAgeW8gPSAtQGhlaWdodC8yK3NoKCkvMlxuICAgICAgICAgICAgQGNhbnZhcy5zdHlsZS50cmFuc2Zvcm0gPSBcInRyYW5zbGF0ZTNkKCN7eG99cHgsICN7eW99cHgsIDBweCkgc2NhbGUzZCgjezEvQHNjYWxlZn0sICN7MS9Ac2NhbGVmfSwgMSlcIlxuICAgICAgICBcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCBAY2FudmFzXG4gICAgICAgIFxuICAgICAgICAjIGVsZWN0cm9uLnJlbW90ZS5nZXRDdXJyZW50V2luZG93KCkub3BlbkRldlRvb2xzKClcbiAgICAgICAgICAgIFxuICAgICAgICBAZmFkZU91dCgpXG5cbiAgICBvbk1vdXNlTW92ZTogKGV2ZW50KSA9PlxuICAgICAgICBcbiAgICAgICAgQHN0YXJ0cG9zID89IGtwb3MgZXZlbnRcbiAgICAgICAgaWYga3BvcyhldmVudCkuZGlzdChAc3RhcnRwb3MpID4gMTBcbiAgICAgICAgICAgIEBjbG9zZSgpXG4gICAgICAgIFxuICAgIGNsb3NlOiA9PlxuICAgICAgICBcbiAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyICdrZXlkb3duJyAgIEBjbG9zZVxuICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIgJ21vdXNlZG93bicgQGNsb3NlXG4gICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lciAnbW91c2Vtb3ZlJyBAY2xvc2VcbiAgICAgICAgXG4gICAgICAgIHcgPSBlbGVjdHJvbi5yZW1vdGUuZ2V0Q3VycmVudFdpbmRvdygpXG4gICAgICAgIHcuY2xvc2UoKVxuICAgICAgICBcbiAgICAjIDAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMDAwMDAgICAgMDAwMDAwMDAgIFxuICAgICMgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAgICAgXG4gICAgIyAwMDAwMDAgICAgMDAwMDAwMDAwICAwMDAgICAwMDAgIDAwMDAwMDAgICBcbiAgICAjIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgIFxuICAgICMgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgICAwMDAwMDAwMCAgXG4gICAgXG4gICAgb25GYWRlOiAtPlxuICAgICAgICBcbiAgICAgICAgc3RlcHMgPSAyNTZcbiAgICAgICAgXG4gICAgICAgIEBmYWRlICs9IDFcbiAgICAgICAgQGN0eC5maWxsU3R5bGUgPSBcInJnYmEoMCwwLDAsI3tAZmFkZS9zdGVwc30pXCJcbiAgICAgICAgQGN0eC5maWxsUmVjdCAwLCAwLCBAd2lkdGgsIEBoZWlnaHRcbiAgICAgICAgXG4gICAgICAgIEBmYWRlIDwgc3RlcHNcbiAgICAgICAgICAgICAgIFxuICAgIGZhZGVPdXQ6ID0+XG4gICAgICAgIFxuICAgICAgICBAY2FudmFzLndpZHRoID0gQGNhbnZhcy53aWR0aFxuICAgICAgICBpZiBAb25GYWRlKClcbiAgICAgICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgQGZhZGVPdXRcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgQGFuaW1hdGlvbigpXG4gICAgICAgICAgICBcbiAgICAjICAwMDAwMDAwICAgMDAwICAgMDAwICAwMDAgIDAwICAgICAwMCAgIDAwMDAwMDAgICAwMDAwMDAwMDAgIDAwMCAgIDAwMDAwMDAgICAwMDAgICAwMDAgIFxuICAgICMgMDAwICAgMDAwICAwMDAwICAwMDAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgICAgIDAwMCAgICAgMDAwICAwMDAgICAwMDAgIDAwMDAgIDAwMCAgXG4gICAgIyAwMDAwMDAwMDAgIDAwMCAwIDAwMCAgMDAwICAwMDAwMDAwMDAgIDAwMDAwMDAwMCAgICAgMDAwICAgICAwMDAgIDAwMCAgIDAwMCAgMDAwIDAgMDAwICBcbiAgICAjIDAwMCAgIDAwMCAgMDAwICAwMDAwICAwMDAgIDAwMCAwIDAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgIDAwMCAgMDAwICAgMDAwICAwMDAgIDAwMDAgIFxuICAgICMgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgICAgIDAwMCAgICAgMDAwICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgXG4gICAgXG4gICAgYW5pbWF0aW9uOiA9PlxuICAgICAgICBcbiAgICAgICAgaWYgQG9uRnJhbWUoKVxuICAgICAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSBAYW5pbWF0aW9uXG4gICAgICAgIFxuICAgICMgMDAwMDAwMDAgIDAwMDAwMDAwICAgIDAwMDAwMDAgICAwMCAgICAgMDAgIDAwMDAwMDAwICBcbiAgICAjIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAgICAgXG4gICAgIyAwMDAwMDAgICAgMDAwMDAwMCAgICAwMDAwMDAwMDAgIDAwMDAwMDAwMCAgMDAwMDAwMCAgIFxuICAgICMgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgMCAwMDAgIDAwMCAgICAgICBcbiAgICAjIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAwMDAwMCAgXG4gICAgXG4gICAgb25GcmFtZTogLT5cblxuICAgICAgICBwb3MgPSBAcG9zXG4gICAgICAgIHNpemUgPSBrcG9zIHBhcnNlSW50KEB3aWR0aC9AdyksIHBhcnNlSW50KEBoZWlnaHQvQGgpXG4gICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICBuZXh0RGlyID0gQGxhc3REaXJcbiAgICAgICAgXG4gICAgICAgIGlmIE1hdGgucmFuZG9tKCkgPCBAZGlyUHJvYlxuICAgICAgICAgICAgd2hpbGUgbmV4dERpciA9PSBAbGFzdERpciBvciAobmV4dERpciszKSU2ID09IEBsYXN0RGlyXG4gICAgICAgICAgICAgICAgbmV4dERpciA9IHJhbmRJbnQgNlxuICAgICAgICAgICAgXG4gICAgICAgIHN3aXRjaCBuZXh0RGlyXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHdoZW4gMCAjIHVwIFxuICAgICAgICAgICAgICAgIHBvcy55IC09IDFcblxuICAgICAgICAgICAgd2hlbiAxICMgbGVmdFxuICAgICAgICAgICAgICAgIGlmIHBvcy54JTIgPT0gMCB0aGVuIHBvcy55ICs9IDFcbiAgICAgICAgICAgICAgICBwb3MueCAtPSAxXG5cbiAgICAgICAgICAgIHdoZW4gMiAjIHJpZ2h0XG4gICAgICAgICAgICAgICAgaWYgcG9zLnglMiA9PSAwIHRoZW4gcG9zLnkgKz0gMVxuICAgICAgICAgICAgICAgIHBvcy54ICs9IDFcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIHdoZW4gMyAjIGRvd25cbiAgICAgICAgICAgICAgICBwb3MueSArPSAxXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHdoZW4gNCAjIGJhY2sgcmlnaHRcbiAgICAgICAgICAgICAgICBpZiBwb3MueCUyID09IDEgdGhlbiBwb3MueSAtPSAxIFxuICAgICAgICAgICAgICAgIHBvcy54ICs9IDFcblxuICAgICAgICAgICAgd2hlbiA1ICMgYmFjayBsZWZ0XG4gICAgICAgICAgICAgICAgaWYgcG9zLnglMiA9PSAxIHRoZW4gcG9zLnkgLT0gMSBcbiAgICAgICAgICAgICAgICBwb3MueCAtPSAxXG4gICAgICAgICAgICAgICAgXG4gICAgICAgIGlmIHBvcy54IDwgMSBvciBwb3MueSA8IDIgb3IgcG9zLnggPj0gc2l6ZS54IG9yIHBvcy55ID49IHNpemUueSAjIGlmIHNjcmVlbiBib3JkZXIgaXMgdG91Y2hlZFxuXG4gICAgICAgICAgICBuZXh0RGlyID0gcmFuZEludCA2XG5cbiAgICAgICAgICAgIGlmICAgICAgcG9zLnggPCAxICAgICAgICB0aGVuIHBvcy54ID0gc2l6ZS54LTFcbiAgICAgICAgICAgIGVsc2UgaWYgcG9zLnggPiBzaXplLngtMSB0aGVuIHBvcy54ID0gMVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAgICAgIHBvcy55IDwgMiAgICAgICAgdGhlbiBwb3MueSA9IHNpemUueS0yXG4gICAgICAgICAgICBlbHNlIGlmIHBvcy55ID4gc2l6ZS55LTEgdGhlbiBwb3MueSA9IDJcbiAgICAgICAgXG4gICAgICAgIGhkID0gMC4wMlxuICAgICAgICBsZCA9IDAuMDAyXG4gICAgICAgIHN3aXRjaCBuZXh0RGlyICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgd2hlbiAwXG4gICAgICAgICAgICAgICAgQHJlZCAgID0gY2xhbXAgMCAxIEByZWQraGRcbiAgICAgICAgICAgICAgICBAZ3JlZW4gPSBjbGFtcCAwIDEgQGdyZWVuLWxkXG4gICAgICAgICAgICAgICAgQGJsdWUgID0gY2xhbXAgMCAxIEBibHVlLWxkXG4gICAgICAgICAgICB3aGVuIDNcbiAgICAgICAgICAgICAgICBAcmVkICAgPSBjbGFtcCAwIDEgQHJlZCtoZFxuICAgICAgICAgICAgICAgIEBncmVlbiA9IGNsYW1wIDAgMSBAZ3JlZW4taGRcbiAgICAgICAgICAgICAgICBAYmx1ZSAgPSBjbGFtcCAwIDEgQGJsdWUtaGRcbiAgICAgICAgICAgIHdoZW4gMVxuICAgICAgICAgICAgICAgIEByZWQgICA9IGNsYW1wIDAgMSBAcmVkLWxkXG4gICAgICAgICAgICAgICAgQGdyZWVuID0gY2xhbXAgMCAxIEBncmVlbitoZFxuICAgICAgICAgICAgICAgIEBibHVlICA9IGNsYW1wIDAgMSBAYmx1ZS1sZFxuICAgICAgICAgICAgd2hlbiA0XG4gICAgICAgICAgICAgICAgQHJlZCAgID0gY2xhbXAgMCAxIEByZWQtaGRcbiAgICAgICAgICAgICAgICBAZ3JlZW4gPSBjbGFtcCAwIDEgQGdyZWVuK2hkXG4gICAgICAgICAgICAgICAgQGJsdWUgID0gY2xhbXAgMCAxIEBibHVlLWhkXG4gICAgICAgICAgICB3aGVuIDJcbiAgICAgICAgICAgICAgICBAcmVkICAgPSBjbGFtcCAwIDEgQHJlZC1sZFxuICAgICAgICAgICAgICAgIEBncmVlbiA9IGNsYW1wIDAgMSBAZ3JlZW4tbGRcbiAgICAgICAgICAgICAgICBAYmx1ZSAgPSBjbGFtcCAwIDEgQGJsdWUraGRcbiAgICAgICAgICAgIHdoZW4gNVxuICAgICAgICAgICAgICAgIEByZWQgICA9IGNsYW1wIDAgMSBAcmVkLWhkXG4gICAgICAgICAgICAgICAgQGdyZWVuID0gY2xhbXAgMCAxIEBncmVlbi1oZFxuICAgICAgICAgICAgICAgIEBibHVlICA9IGNsYW1wIDAgMSBAYmx1ZStoZFxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgIHNraXAgPSBudWxsXG4gICAgICAgIGlmIEBjdWJlQ291bnRcbiAgICAgICAgICAgIHN3aXRjaCBuZXh0RGlyXG4gICAgICAgICAgICAgICAgd2hlbiAzIHRoZW4gc2tpcCA9IDBcbiAgICAgICAgICAgICAgICB3aGVuIDQgdGhlbiBza2lwID0gMVxuICAgICAgICAgICAgICAgIHdoZW4gNSB0aGVuIHNraXAgPSAyXG4gICAgICAgIFxuICAgICAgICBAZHJhd0N1YmUgc2tpcFxuICAgICAgICBcbiAgICAgICAgQGN1YmVDb3VudCArPSAxXG4gICAgICAgIEBsYXN0RGlyID0gbmV4dERpclxuICAgICAgICBcbiAgICAgICAgdHJ1ZVxuICAgIFxuICAgICMgIDAwMDAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgICAwMDAwMDAwMCAgXG4gICAgIyAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICBcbiAgICAjIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMDAwMDAgICAgMDAwMDAwMCAgIFxuICAgICMgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAgICAgXG4gICAgIyAgMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwICAgIDAwMDAwMDAwICBcbiAgICBcbiAgICBkcmF3Q3ViZTogKHNraXApIC0+IFxuXG4gICAgICAgIHMgPSBAaC8yXG4gICAgICAgIHggPSBAcG9zLngqQHdcbiAgICAgICAgeSA9IChAcG9zLnglMiA9PSAwKSBhbmQgKEBwb3MueSpAaCkgb3IgKEBwb3MueSpAaCAtIHMpXG4gICAgICAgIFxuICAgICAgICBpZiBza2lwICE9IDBcbiAgICAgICAgICAgIEBjdHguZmlsbFN0eWxlID0gXCJyZ2IoI3tAcmVkKjI1NX0sICN7QGdyZWVuKjI1NX0sICN7QGJsdWUqMjU1fSlcIlxuICAgICAgICAgICAgQGN0eC5iZWdpblBhdGgoKVxuICAgICAgICAgICAgQGN0eC5tb3ZlVG8geCwgICB5XG4gICAgICAgICAgICBAY3R4LmxpbmVUbyB4K0B3LCB5LXNcbiAgICAgICAgICAgIEBjdHgubGluZVRvIHgsICAgeS1AaFxuICAgICAgICAgICAgQGN0eC5saW5lVG8geC1AdywgeS1zXG4gICAgICAgICAgICBAY3R4LmNsb3NlUGF0aCgpXG4gICAgICAgICAgICBAY3R4LmZpbGwoKVxuICAgICAgICBcbiAgICAgICAgaWYgc2tpcCAhPSAxXG4gICAgICAgICAgICBAY3R4LmZpbGxTdHlsZSA9IFwicmdiKCN7QHJlZCoyNTUqMC41fSwgI3tAZ3JlZW4qMjU1KjAuNX0sICN7QGJsdWUqMjU1KjAuNX0pXCJcbiAgICAgICAgICAgIEBjdHguYmVnaW5QYXRoKClcbiAgICAgICAgICAgIEBjdHgubW92ZVRvIHgsICAgeVxuICAgICAgICAgICAgQGN0eC5saW5lVG8geC1AdywgeS1zXG4gICAgICAgICAgICBAY3R4LmxpbmVUbyB4LUB3LCB5K3NcbiAgICAgICAgICAgIEBjdHgubGluZVRvIHgsICAgeStAaFxuICAgICAgICAgICAgQGN0eC5jbG9zZVBhdGgoKVxuICAgICAgICAgICAgQGN0eC5maWxsKClcbiAgICAgICAgXG4gICAgICAgIGlmIHNraXAgIT0gMlxuICAgICAgICAgICAgQGN0eC5maWxsU3R5bGUgPSBcInJnYigje0ByZWQqMjU1KjAuMn0sICN7QGdyZWVuKjI1NSowLjJ9LCAje0BibHVlKjI1NSowLjJ9KVwiXG4gICAgICAgICAgICBAY3R4LmJlZ2luUGF0aCgpXG4gICAgICAgICAgICBAY3R4Lm1vdmVUbyB4LCAgIHlcbiAgICAgICAgICAgIEBjdHgubGluZVRvIHgrQHcsIHktc1xuICAgICAgICAgICAgQGN0eC5saW5lVG8geCtAdywgeStzXG4gICAgICAgICAgICBAY3R4LmxpbmVUbyB4LCAgIHkrQGhcbiAgICAgICAgICAgIEBjdHguY2xvc2VQYXRoKClcbiAgICAgICAgICAgIEBjdHguZmlsbCgpXG4gICAgICAgIFxubW9kdWxlLmV4cG9ydHMgPSBTYXZlckRlZmF1bHRcbiJdfQ==
//# sourceURL=../coffee/saverdefault.coffee