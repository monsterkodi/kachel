// koffee 1.3.0

/*
 0000000  000   000  00000000   0000000    00000000  000      000000000
000       000   000  000   000  000   000  000       000         000   
0000000    000 000   0000000    000   000  000000    000         000   
     000     000     000   000  000   000  000       000         000   
0000000       0      000   000  0000000    000       0000000     000
 */
var SaverDefault, clamp, electron, elem, klog, kpos, randInt, randIntRange, randRange, ref, sh, sw,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ref = require('kxk'), sw = ref.sw, sh = ref.sh, elem = ref.elem, kpos = ref.kpos, clamp = ref.clamp, randRange = ref.randRange, randInt = ref.randInt, randIntRange = ref.randIntRange, klog = ref.klog;

electron = require('electron');

SaverDefault = (function() {
    function SaverDefault() {
        this.close = bind(this.close, this);
        this.moved = bind(this.moved, this);
        this.animation = bind(this.animation, this);
        this.fadeOut = bind(this.fadeOut, this);
        document.body.addEventListener('keydown', this.close);
        document.body.addEventListener('mousedown', this.close);
        document.body.addEventListener('mousemove', this.moved);
        document.body.focus();
        this.fade = 0;
        this.w = this.h = randIntRange(6, 32);
        this.dirProb = randRange(0.05, 0.2);
        this.red = 1;
        this.green = 0;
        this.blue = 0;
        this.cubeCount = 0;
        this.lastDir = 0;
        this.scalef = electron.remote.screen.getPrimaryDisplay().scaleFactor;
        this.width = sw() * this.scalef;
        this.height = sh() * this.scalef;
        this.pos = kpos(randInt(this.width / this.w), randInt(this.height / this.h));
        this.canvas = elem('canvas', {
            width: this.width,
            height: this.height
        });
        this.ctx = this.canvas.getContext('2d');
        if (this.scalef !== 1) {
            this.canvas.style.transform = "translate3d(" + (-this.width / (2 * this.scalef)) + "px, " + (-this.height / (2 * this.scalef)) + "px, 0px) scale3d(0.5, 0.5, 1)";
        }
        document.body.appendChild(this.canvas);
        this.fadeOut();
    }

    SaverDefault.prototype.onFade = function() {
        var steps;
        steps = 256;
        this.fade += 1;
        this.ctx.fillStyle = "rgba(0,0,0," + (this.fade / steps) + ")";
        this.ctx.fillRect(0, 0, this.width, this.height);
        return this.fade < steps;
    };

    SaverDefault.prototype.fadeOut = function() {
        this.canvas.width = this.canvas.width;
        if (this.onFade()) {
            return window.requestAnimationFrame(this.fadeOut);
        } else {
            return this.animation();
        }
    };

    SaverDefault.prototype.animation = function() {
        if (this.onFrame()) {
            return window.requestAnimationFrame(this.animation);
        }
    };

    SaverDefault.prototype.moved = function(event) {
        if (this.startpos != null) {
            this.startpos;
        } else {
            this.startpos = kpos(event);
        }
        if (kpos(event).dist(this.startpos) > 10) {
            return this.close();
        }
    };

    SaverDefault.prototype.close = function() {
        var w;
        document.body.removeEventListener('keydown', this.close);
        document.body.removeEventListener('mousedown', this.close);
        document.body.removeEventListener('mousemove', this.close);
        w = electron.remote.getCurrentWindow();
        return w.close();
    };

    SaverDefault.prototype.onFrame = function() {
        var hd, ld, nextDir, pos, size, skip;
        pos = this.pos;
        size = kpos(parseInt(this.width / this.w), parseInt(this.height / this.h));
        nextDir = this.lastDir;
        if (Math.random() < this.dirProb) {
            while (nextDir === this.lastDir || (nextDir + 3) % 6 === this.lastDir) {
                nextDir = randInt(6);
            }
        }
        switch (nextDir) {
            case 0:
                pos.y -= 1;
                break;
            case 1:
                if (pos.x % 2 === 0) {
                    pos.y += 1;
                }
                pos.x -= 1;
                break;
            case 2:
                if (pos.x % 2 === 0) {
                    pos.y += 1;
                }
                pos.x += 1;
                break;
            case 3:
                pos.y += 1;
                break;
            case 4:
                if (pos.x % 2 === 1) {
                    pos.y -= 1;
                }
                pos.x += 1;
                break;
            case 5:
                if (pos.x % 2 === 1) {
                    pos.y -= 1;
                }
                pos.x -= 1;
        }
        if (pos.x < 1 || pos.y < 2 || pos.x > size.x - 1 || pos.y > size.y - 1) {
            nextDir = randInt(6);
            if (true) {
                if (pos.x < 1) {
                    pos.x = size.x - 1;
                } else if (pos.x > size.x - 1) {
                    pos.x = 1;
                }
                if (pos.y < 2) {
                    pos.y = size.y - 2;
                } else if (pos.y > size.y - 1) {
                    pos.y = 2;
                }
            }
        }
        hd = 0.01;
        ld = 0.005;
        switch (nextDir) {
            case 0:
                this.red = clamp(0, 1, this.red + hd);
                this.green = clamp(0, 1, this.green + ld);
                this.blue = clamp(0, 1, this.blue - ld);
                break;
            case 3:
                this.red = clamp(0, 1, this.red + ld);
                this.green = clamp(0, 1, this.green - ld);
                this.blue = clamp(0, 1, this.blue - hd);
                break;
            case 1:
                this.red = clamp(0, 1, this.red - ld);
                this.green = clamp(0, 1, this.green + hd);
                this.blue = clamp(0, 1, this.blue - ld);
                break;
            case 4:
                this.red = clamp(0, 1, this.red - hd);
                this.green = clamp(0, 1, this.green + ld);
                this.blue = clamp(0, 1, this.blue - ld);
                break;
            case 2:
                this.red = clamp(0, 1, this.red - ld);
                this.green = clamp(0, 1, this.green - ld);
                this.blue = clamp(0, 1, this.blue + hd);
                break;
            case 5:
                this.red = clamp(0, 1, this.red - ld);
                this.green = clamp(0, 1, this.green - hd);
                this.blue = clamp(0, 1, this.blue + ld);
        }
        this.color = {
            up: "rgb(" + (this.red * 255) + ",     " + (this.green * 255) + ",     " + (this.blue * 255) + ")",
            left: "rgb(" + (this.red * 255 * 0.5) + ", " + (this.green * 255 * 0.5) + ", " + (this.blue * 255 * 0.5) + ")",
            right: "rgb(" + (this.red * 255 * 0.2) + ", " + (this.green * 255 * 0.2) + ", " + (this.blue * 255 * 0.2) + ")"
        };
        skip = null;
        if (this.cubeCount) {
            switch (nextDir) {
                case 3:
                    skip = 0;
                    break;
                case 4:
                    skip = 1;
                    break;
                case 5:
                    skip = 2;
            }
        }
        this.drawCube(skip);
        this.cubeCount += 1;
        this.lastDir = nextDir;
        return true;
    };

    SaverDefault.prototype.drawCube = function(skip) {
        var s, x, y;
        s = this.h / 2;
        x = this.pos.x * this.w;
        y = (this.pos.x % 2 === 0) && (this.pos.y * this.h) || (this.pos.y * this.h - s);
        if (skip !== 0) {
            this.ctx.fillStyle = this.color.up;
            this.ctx.beginPath();
            this.ctx.moveTo(x, y);
            this.ctx.lineTo(x + this.w, y - s);
            this.ctx.lineTo(x, y - this.h);
            this.ctx.lineTo(x - this.w, y - s);
            this.ctx.closePath();
            this.ctx.fill();
        }
        if (skip !== 1) {
            this.ctx.fillStyle = this.color.left;
            this.ctx.beginPath();
            this.ctx.moveTo(x, y);
            this.ctx.lineTo(x - this.w, y - s);
            this.ctx.lineTo(x - this.w, y + s);
            this.ctx.lineTo(x, y + this.h);
            this.ctx.closePath();
            this.ctx.fill();
        }
        if (skip !== 2) {
            this.ctx.fillStyle = this.color.right;
            this.ctx.beginPath();
            this.ctx.moveTo(x, y);
            this.ctx.lineTo(x + this.w, y - s);
            this.ctx.lineTo(x + this.w, y + s);
            this.ctx.lineTo(x, y + this.h);
            this.ctx.closePath();
            return this.ctx.fill();
        }
    };

    return SaverDefault;

})();

module.exports = SaverDefault;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/saverdefault.coffee