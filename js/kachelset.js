// koffee 1.4.0

/*
000   000   0000000    0000000  000   000  00000000  000       0000000  00000000  000000000
000  000   000   000  000       000   000  000       000      000       000          000   
0000000    000000000  000       000000000  0000000   000      0000000   0000000      000   
000  000   000   000  000       000   000  000       000           000  000          000   
000   000  000   000   0000000  000   000  00000000  0000000  0000000   00000000     000
 */
var Bounds, KachelSet, electron, empty, klog, post, prefs, ref, slash, valid,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    indexOf = [].indexOf;

ref = require('kxk'), post = ref.post, slash = ref.slash, prefs = ref.prefs, empty = ref.empty, valid = ref.valid, klog = ref.klog;

Bounds = require('./bounds');

electron = require('electron');

KachelSet = (function() {
    function KachelSet(mainId) {
        this.onKachelLoad = bind(this.onKachelLoad, this);
        this.onStoreSet = bind(this.onStoreSet, this);
        this.onRestoreSet = bind(this.onRestoreSet, this);
        this.onToggleSet = bind(this.onToggleSet, this);
        this.onNewSet = bind(this.onNewSet, this);
        this.onKachelFocus = bind(this.onKachelFocus, this);
        this.onKachelClose = bind(this.onKachelClose, this);
        this.onNewKachel = bind(this.onNewKachel, this);
        var obj;
        this.switching = false;
        this.focusKachel = null;
        this.hoverKachel = null;
        this.dict = (
            obj = {},
            obj["" + mainId] = 'main',
            obj
        );
        this.wids = {
            main: mainId
        };
        this.set = [];
        this.sid = '';
        post.on('kachelLoad', this.onKachelLoad);
        post.on('toggleSet', this.onToggleSet);
        post.on('restoreSet', this.onRestoreSet);
        post.on('storeSet', this.onStoreSet);
        post.on('newSet', this.onNewSet);
        post.on('kachelFocus', this.onKachelFocus);
        post.on('newKachel', this.onNewKachel);
    }

    KachelSet.prototype.onNewKachel = function(id) {
        var kachelSize, type, win;
        if (id === 'main') {
            return;
        }
        if (this.wids[id]) {
            win = this.win(id);
            win.showInactive();
            win.focus();
            return;
        }
        kachelSize = 3;
        type = id;
        if (id.startsWith('start')) {
            type = 'start';
            kachelSize = 2;
        } else if (id.endsWith('.app') || id.endsWith('.exe')) {
            if (slash.base(id) === 'konrad') {
                type = 'konrad';
                kachelSize = 4;
            } else {
                type = 'appl';
                kachelSize = 2;
            }
        } else if (id.startsWith('/') || id[1] === ':') {
            type = 'folder';
            kachelSize = 2;
        }
        switch (type) {
            case 'saver':
                kachelSize = 0;
                break;
            case 'sysdish':
            case 'sysinfo':
            case 'clock':
            case 'default':
                kachelSize = 2;
        }
        win = new electron.BrowserWindow({
            movable: true,
            transparent: true,
            autoHideMenuBar: true,
            acceptFirstMouse: true,
            transparent: true,
            hasShadow: false,
            frame: false,
            resizable: false,
            maximizable: false,
            minimizable: false,
            closable: false,
            fullscreen: false,
            show: false,
            fullscreenenable: false,
            backgroundColor: '#181818',
            width: Bounds.kachelSizes[kachelSize],
            height: Bounds.kachelSizes[kachelSize],
            webPreferences: {
                nodeIntegration: true
            }
        });
        win.loadURL(KachelSet.html(type), {
            baseURLForDataURL: "file://" + __dirname + "/../js/index.html"
        });
        win.kachelId = id;
        win.webContents.on('dom-ready', (function(id) {
            return function(event) {
                var wid;
                wid = event.sender.id;
                post.toWin(wid, 'initKachel', id);
                electron.BrowserWindow.fromId(wid).show();
                return Bounds.update();
            };
        })(id));
        win.on('close', this.onKachelClose);
        win.setHasShadow(false);
        return win;
    };

    KachelSet.prototype.onKachelClose = function(event) {
        var kachel;
        kachel = event.sender;
        if (this.hoverKachel === kachel.id) {
            this.hoverKachel = null;
        }
        Bounds.remove(kachel);
        this.remove(kachel);
        return setTimeout((function() {
            return post.emit('bounds', 'dirty');
        }), 200);
    };

    KachelSet.prototype.onKachelFocus = function(winId) {
        if (this.dict[winId] !== 'main') {
            return this.focusKachel = electron.BrowserWindow.fromId(winId);
        }
    };

    KachelSet.prototype.onNewSet = function() {
        var sets;
        sets = prefs.get('sets', ['']);
        sets.push("" + sets.length);
        prefs.set('sets', sets);
        return this.load(sets.slice(-1)[0]);
    };

    KachelSet.prototype.onToggleSet = function() {
        var index, sets;
        if (this.switching) {
            return;
        }
        sets = prefs.get('sets', ['']);
        index = Math.max(0, sets.indexOf(this.sid));
        if (index >= sets.length - 1) {
            index = -1;
        }
        return this.load(sets[index + 1]);
    };

    KachelSet.prototype.onRestoreSet = function() {
        return this.load(this.sid, '_save');
    };

    KachelSet.prototype.onStoreSet = function() {
        prefs.set("kacheln" + this.sid + "_save", this.set);
        return prefs.save();
    };

    KachelSet.prototype.load = function(newSid, postfix) {
        var i, j, k, kachelId, l, len, len1, len2, len3, newSet, oldKacheln, ref1, ref2, showIds, updateIds;
        if (postfix == null) {
            postfix = '';
        }
        if (this.switching) {
            return;
        }
        this.switching = true;
        if (newSid != null) {
            newSid;
        } else {
            newSid = prefs.get('set', '');
        }
        if (empty(postfix)) {
            oldKacheln = prefs.get("kacheln" + this.sid, []);
        }
        this.kachelIds = [];
        updateIds = ['main'];
        showIds = [];
        newSet = prefs.get("kacheln" + newSid + postfix, []);
        ref1 = newSet != null ? newSet : [];
        for (i = 0, len = ref1.length; i < len; i++) {
            kachelId = ref1[i];
            if (kachelId !== 'main') {
                if (this.set.indexOf(kachelId) >= 0) {
                    updateIds.push(kachelId);
                    this.set.splice(this.set.indexOf(kachelId), 1);
                } else {
                    showIds.push(kachelId);
                    if (!this.wids[kachelId]) {
                        this.kachelIds.push(kachelId);
                    }
                }
            }
        }
        if (this.set.length) {
            ref2 = this.set.slice();
            for (j = 0, len1 = ref2.length; j < len1; j++) {
                kachelId = ref2[j];
                if (kachelId !== 'main' && kachelId !== 'null' && kachelId !== null) {
                    if (this.wids[kachelId]) {
                        this.win(kachelId).hide();
                    } else {
                        klog('no wid for', kachelId);
                    }
                }
            }
        }
        if (empty(postfix)) {
            prefs.set("kacheln" + this.sid, oldKacheln);
        }
        this.sid = newSid;
        prefs.set('set', this.sid);
        this.set = newSet;
        if (valid(postfix)) {
            prefs.set("kacheln" + newSid, this.set);
        }
        for (k = 0, len2 = updateIds.length; k < len2; k++) {
            kachelId = updateIds[k];
            post.emit('updateBounds', kachelId);
        }
        for (l = 0, len3 = showIds.length; l < len3; l++) {
            kachelId = showIds[l];
            post.emit('newKachel', kachelId);
        }
        if (this.kachelIds.length === 0) {
            this.switching = false;
            this.win('main').focus();
            return post.emit('setLoaded');
        }
    };

    KachelSet.prototype.onKachelLoad = function(wid, kachelId) {
        var index;
        if (indexOf.call(this.set, kachelId) < 0) {
            this.set.push(kachelId);
            prefs.set("kacheln" + this.sid, this.set);
        }
        this.dict[wid] = kachelId;
        this.wids[kachelId] = wid;
        if (this.kachelIds) {
            index = this.kachelIds.indexOf(kachelId);
            if (index >= 0) {
                this.kachelIds.splice(index, 1);
                if (this.kachelIds.length === 0) {
                    klog("set" + this.sid + " loaded");
                    this.switching = false;
                    this.win('main').focus();
                    return post.emit('setLoaded');
                }
            } else {
                return klog('unknown kachel?', kachelId);
            }
        }
    };

    KachelSet.prototype.remove = function(kachel) {
        var kachelId;
        if (this.focusKachel === kachel) {
            this.focusKachel = null;
        }
        if (kachelId = this.dict[kachel.id]) {
            if (this.set.indexOf(kachelId) >= 0) {
                this.set.splice(this.set.indexOf(kachelId), 1);
            }
            delete this.wids[kachelId];
            delete this.dict[kachel.id];
            return prefs.set("kacheln" + this.sid, this.set);
        }
    };

    KachelSet.prototype.win = function(kachelId) {
        return electron.BrowserWindow.fromId(this.wids[kachelId]);
    };

    KachelSet.html = function(type) {
        var html;
        html = "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"Content-Security-Policy\" content=\"default-src * 'unsafe-inline' 'unsafe-eval'\">\n    <link rel=\"stylesheet\" href=\"./css/style.css\" type=\"text/css\">\n    <link rel=\"stylesheet\" href=\"./css/dark.css\" type=\"text/css\" id=\"style-link\">\n  </head>\n  <body>\n    <div id=\"main\" tabindex=\"0\"></div>\n  </body>\n  <script>\n    Kachel = require(\"./" + type + ".js\");\n    new Kachel({});\n  </script>\n</html>";
        return "data:text/html;charset=utf-8," + encodeURI(html);
    };

    return KachelSet;

})();

module.exports = KachelSet;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2FjaGVsc2V0LmpzIiwic291cmNlUm9vdCI6Ii4iLCJzb3VyY2VzIjpbIiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOzs7Ozs7O0FBQUEsSUFBQSx3RUFBQTtJQUFBOzs7QUFRQSxNQUE2QyxPQUFBLENBQVEsS0FBUixDQUE3QyxFQUFFLGVBQUYsRUFBUSxpQkFBUixFQUFlLGlCQUFmLEVBQXNCLGlCQUF0QixFQUE2QixpQkFBN0IsRUFBb0M7O0FBRXBDLE1BQUEsR0FBVyxPQUFBLENBQVEsVUFBUjs7QUFDWCxRQUFBLEdBQVcsT0FBQSxDQUFRLFVBQVI7O0FBRUw7SUFFQyxtQkFBQyxNQUFEOzs7Ozs7Ozs7QUFFQyxZQUFBO1FBQUEsSUFBQyxDQUFBLFNBQUQsR0FBZTtRQUVmLElBQUMsQ0FBQSxXQUFELEdBQWU7UUFDZixJQUFDLENBQUEsV0FBRCxHQUFlO1FBRWYsSUFBQyxDQUFBLElBQUQsR0FBUztrQkFBQSxFQUFBO2dCQUFBLEVBQUEsR0FBRyxVQUFVLE1BQWI7OztRQUNULElBQUMsQ0FBQSxJQUFELEdBQVM7WUFBQSxJQUFBLEVBQUssTUFBTDs7UUFDVCxJQUFDLENBQUEsR0FBRCxHQUFTO1FBQ1QsSUFBQyxDQUFBLEdBQUQsR0FBUztRQUVULElBQUksQ0FBQyxFQUFMLENBQVEsWUFBUixFQUFzQixJQUFDLENBQUEsWUFBdkI7UUFDQSxJQUFJLENBQUMsRUFBTCxDQUFRLFdBQVIsRUFBc0IsSUFBQyxDQUFBLFdBQXZCO1FBQ0EsSUFBSSxDQUFDLEVBQUwsQ0FBUSxZQUFSLEVBQXNCLElBQUMsQ0FBQSxZQUF2QjtRQUNBLElBQUksQ0FBQyxFQUFMLENBQVEsVUFBUixFQUFzQixJQUFDLENBQUEsVUFBdkI7UUFDQSxJQUFJLENBQUMsRUFBTCxDQUFRLFFBQVIsRUFBc0IsSUFBQyxDQUFBLFFBQXZCO1FBQ0EsSUFBSSxDQUFDLEVBQUwsQ0FBUSxhQUFSLEVBQXNCLElBQUMsQ0FBQSxhQUF2QjtRQUNBLElBQUksQ0FBQyxFQUFMLENBQVEsV0FB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QSxDQUFVLElBQVY7SUFyQi9COzs7Ozs7QUF1QlgsTUFBTSxDQUFDLE9BQVAsR0FBaUIiLCJzb3VyY2VzQ29udGVudCI6WyIjIyNcbjAwMCAgIDAwMCAgIDAwMDAwMDAgICAgMDAwMDAwMCAgMDAwICAgMDAwICAwMDAwMDAwMCAgMDAwICAgICAgIDAwMDAwMDAgIDAwMDAwMDAwICAwMDAwMDAwMDBcbjAwMCAgMDAwICAgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAgICAgMDAwICAgICAgIDAwMCAgICAgICAgICAwMDAgICBcbjAwMDAwMDAgICAgMDAwMDAwMDAwICAwMDAgICAgICAgMDAwMDAwMDAwICAwMDAwMDAwICAgMDAwICAgICAgMDAwMDAwMCAgIDAwMDAwMDAgICAgICAwMDAgICBcbjAwMCAgMDAwICAgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAgICAgICAgICAwMDAgIDAwMCAgICAgICAgICAwMDAgICBcbjAwMCAgIDAwMCAgMDAwICAgMDAwICAgMDAwMDAwMCAgMDAwICAgMDAwICAwMDAwMDAwMCAgMDAwMDAwMCAgMDAwMDAwMCAgIDAwMDAwMDAwICAgICAwMDAgICBcbiMjI1xuXG57IHBvc3QsIHNsYXNoLCBwcmVmcywgZW1wdHksIHZhbGlkLCBrbG9nIH0gPSByZXF1aXJlICdreGsnXG5cbkJvdW5kcyAgID0gcmVxdWlyZSAnLi9ib3VuZHMnXG5lbGVjdHJvbiA9IHJlcXVpcmUgJ2VsZWN0cm9uJ1xuXG5jbGFzcyBLYWNoZWxTZXRcblxuICAgIEA6IChtYWluSWQpIC0+XG4gICAgICAgIFxuICAgICAgICBAc3dpdGNoaW5nICAgPSBmYWxzZVxuICAgICAgICBcbiAgICAgICAgQGZvY3VzS2FjaGVsID0gbnVsbFxuICAgICAgICBAaG92ZXJLYWNoZWwgPSBudWxsXG4gICAgICAgIFxuICAgICAgICBAZGljdCAgPSBcIiN7bWFpbklkfVwiOiAnbWFpbidcbiAgICAgICAgQHdpZHMgID0gbWFpbjptYWluSWRcbiAgICAgICAgQHNldCAgID0gW11cbiAgICAgICAgQHNpZCAgID0gJydcbiAgICAgICAgXG4gICAgICAgIHBvc3Qub24gJ2thY2hlbExvYWQnICBAb25LYWNoZWxMb2FkXG4gICAgICAgIHBvc3Qub24gJ3RvZ2dsZVNldCcgICBAb25Ub2dnbGVTZXRcbiAgICAgICAgcG9zdC5vbiAncmVzdG9yZVNldCcgIEBvblJlc3RvcmVTZXRcbiAgICAgICAgcG9zdC5vbiAnc3RvcmVTZXQnICAgIEBvblN0b3JlU2V0XG4gICAgICAgIHBvc3Qub24gJ25ld1NldCcgICAgICBAb25OZXdTZXRcbiAgICAgICAgcG9zdC5vbiAna2FjaGVsRm9jdXMnIEBvbkthY2hlbEZvY3VzXG4gICAgICAgIHBvc3Qub24gJ25ld0thY2hlbCcgICBAb25OZXdLYWNoZWxcbiAgICAgICAgICAgIFxuICAgICMgMDAwICAgMDAwICAwMDAwMDAwMCAgMDAwICAgMDAwICAgICAgICAwMDAgICAwMDAgICAwMDAwMDAwICAgIDAwMDAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMDAgIDAwMCAgICAgIFxuICAgICMgMDAwMCAgMDAwICAwMDAgICAgICAgMDAwIDAgMDAwICAgICAgICAwMDAgIDAwMCAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgICAgIFxuICAgICMgMDAwIDAgMDAwICAwMDAwMDAwICAgMDAwMDAwMDAwICAgICAgICAwMDAwMDAwICAgIDAwMDAwMDAwMCAgMDAwICAgICAgIDAwMDAwMDAwMCAgMDAwMDAwMCAgIDAwMCAgICAgIFxuICAgICMgMDAwICAwMDAwICAwMDAgICAgICAgMDAwICAgMDAwICAgICAgICAwMDAgIDAwMCAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgICAgIFxuICAgICMgMDAwICAgMDAwICAwMDAwMDAwMCAgMDAgICAgIDAwICAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgIDAwMDAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMDAgIDAwMDAwMDAgIFxuXG4gICAgb25OZXdLYWNoZWw6IChpZCkgPT5cblxuICAgICAgICByZXR1cm4gaWYgaWQgPT0gJ21haW4nXG4gICAgICAgIFxuICAgICAgICBpZiBAd2lkc1tpZF1cbiAgICAgICAgICAgIHdpbiA9IEB3aW4gaWRcbiAgICAgICAgICAgIHdpbi5zaG93SW5hY3RpdmUoKVxuICAgICAgICAgICAgd2luLmZvY3VzKClcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICBcbiAgICAgICAga2FjaGVsU2l6ZSA9IDNcbiAgICBcbiAgICAgICAgdHlwZSA9IGlkXG4gICAgICAgIGlmIGlkLnN0YXJ0c1dpdGggJ3N0YXJ0J1xuICAgICAgICAgICAgdHlwZSA9ICdzdGFydCdcbiAgICAgICAgICAgIGthY2hlbFNpemUgPSAyXG4gICAgICAgIGVsc2UgaWYgaWQuZW5kc1dpdGgoJy5hcHAnKSBvciBpZC5lbmRzV2l0aCgnLmV4ZScpXG4gICAgICAgICAgICBpZiBzbGFzaC5iYXNlKGlkKSA9PSAna29ucmFkJ1xuICAgICAgICAgICAgICAgIHR5cGUgPSAna29ucmFkJ1xuICAgICAgICAgICAgICAgIGthY2hlbFNpemUgPSA0XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgdHlwZSA9ICdhcHBsJ1xuICAgICAgICAgICAgICAgIGthY2hlbFNpemUgPSAyXG4gICAgICAgIGVsc2UgaWYgaWQuc3RhcnRzV2l0aCgnLycpIG9yIGlkWzFdID09ICc6J1xuICAgICAgICAgICAgdHlwZSA9ICdmb2xkZXInXG4gICAgICAgICAgICBrYWNoZWxTaXplID0gMlxuICAgICAgICAgICAgXG4gICAgICAgIHN3aXRjaCB0eXBlXG4gICAgICAgICAgICB3aGVuICdzYXZlcicgdGhlbiBrYWNoZWxTaXplID0gMFxuICAgICAgICAgICAgd2hlbiAnc3lzZGlzaCcgJ3N5c2luZm8nICdjbG9jaycgJ2RlZmF1bHQnIHRoZW4ga2FjaGVsU2l6ZSA9IDJcbiAgICAgICAgICAgIFxuICAgICAgICB3aW4gPSBuZXcgZWxlY3Ryb24uQnJvd3NlcldpbmRvd1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBtb3ZhYmxlOiAgICAgICAgICAgIHRydWVcbiAgICAgICAgICAgIHRyYW5zcGFyZW50OiAgICAgICAgdHJ1ZVxuICAgICAgICAgICAgYXV0b0hpZGVNZW51QmFyOiAgICB0cnVlXG4gICAgICAgICAgICBhY2NlcHRGaXJzdE1vdXNlOiAgIHRydWVcbiAgICAgICAgICAgIHRyYW5zcGFyZW50OiAgICAgICAgdHJ1ZVxuICAgICAgICAgICAgaGFzU2hhZG93OiAgICAgICAgICBmYWxzZVxuICAgICAgICAgICAgZnJhbWU6ICAgICAgICAgICAgICBmYWxzZVxuICAgICAgICAgICAgcmVzaXphYmxlOiAgICAgICAgICBmYWxzZVxuICAgICAgICAgICAgbWF4aW1pemFibGU6ICAgICAgICBmYWxzZVxuICAgICAgICAgICAgbWluaW1pemFibGU6ICAgICAgICBmYWxzZVxuICAgICAgICAgICAgY2xvc2FibGU6ICAgICAgICAgICBmYWxzZVxuICAgICAgICAgICAgZnVsbHNjcmVlbjogICAgICAgICBmYWxzZVxuICAgICAgICAgICAgc2hvdzogICAgICAgICAgICAgICBmYWxzZVxuICAgICAgICAgICAgZnVsbHNjcmVlbmVuYWJsZTogICBmYWxzZVxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAgICAnIzE4MTgxOCdcbiAgICAgICAgICAgIHdpZHRoOiAgICAgICAgICAgICAgQm91bmRzLmthY2hlbFNpemVzW2thY2hlbFNpemVdXG4gICAgICAgICAgICBoZWlnaHQ6ICAgICAgICAgICAgIEJvdW5kcy5rYWNoZWxTaXplc1trYWNoZWxTaXplXVxuICAgICAgICAgICAgd2ViUHJlZmVyZW5jZXM6IFxuICAgICAgICAgICAgICAgIG5vZGVJbnRlZ3JhdGlvbjogdHJ1ZVxuICAgICAgICAgICAgXG4gICAgICAgIHdpbi5sb2FkVVJMIEthY2hlbFNldC5odG1sKHR5cGUpLCBiYXNlVVJMRm9yRGF0YVVSTDpcImZpbGU6Ly8je19fZGlybmFtZX0vLi4vanMvaW5kZXguaHRtbFwiXG4gICAgICAgIFxuICAgICAgICB3aW4ua2FjaGVsSWQgPSBpZFxuICAgICAgICBcbiAgICAgICAgd2luLndlYkNvbnRlbnRzLm9uICdkb20tcmVhZHknICgoaWQpIC0+IChldmVudCkgLT5cbiAgICAgICAgICAgIHdpZCA9IGV2ZW50LnNlbmRlci5pZFxuICAgICAgICAgICAgcG9zdC50b1dpbiB3aWQsICdpbml0S2FjaGVsJyBpZFxuICAgICAgICAgICAgZWxlY3Ryb24uQnJvd3NlcldpbmRvdy5mcm9tSWQod2lkKS5zaG93KClcbiAgICAgICAgICAgIEJvdW5kcy51cGRhdGUoKVxuICAgICAgICAgICAgKShpZClcbiAgICAgICAgICAgICAgXG4gICAgICAgIHdpbi5vbiAnY2xvc2UnIEBvbkthY2hlbENsb3NlXG4gICAgICAgIHdpbi5zZXRIYXNTaGFkb3cgZmFsc2UgICAgXG4gICAgICAgICAgICAgICAgXG4gICAgICAgIHdpblxuICAgICAgICBcbiAgICAjICAwMDAwMDAwICAwMDAgICAgICAgMDAwMDAwMCAgICAwMDAwMDAwICAwMDAwMDAwMCAgXG4gICAgIyAwMDAgICAgICAgMDAwICAgICAgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAgICAgIFxuICAgICMgMDAwICAgICAgIDAwMCAgICAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgIDAwMDAwMDAgICBcbiAgICAjIDAwMCAgICAgICAwMDAgICAgICAwMDAgICAwMDAgICAgICAgMDAwICAwMDAgICAgICAgXG4gICAgIyAgMDAwMDAwMCAgMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwICAgMDAwMDAwMDAgIFxuICAgIFxuICAgIG9uS2FjaGVsQ2xvc2U6IChldmVudCkgPT5cbiAgICAgICAgICAgIFxuICAgICAgICBrYWNoZWwgPSBldmVudC5zZW5kZXJcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgaWYgQGhvdmVyS2FjaGVsID09IGthY2hlbC5pZFxuICAgICAgICAgICAgQGhvdmVyS2FjaGVsID0gbnVsbFxuICAgICAgICAgICAgXG4gICAgICAgIEJvdW5kcy5yZW1vdmUga2FjaGVsXG4gICAgICAgIEByZW1vdmUga2FjaGVsICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICBzZXRUaW1lb3V0ICgtPiBwb3N0LmVtaXQgJ2JvdW5kcycgJ2RpcnR5JyksIDIwMFxuICAgICAgICBcbiAgICAjIDAwMDAwMDAwICAgMDAwMDAwMCAgICAwMDAwMDAwICAwMDAgICAwMDAgICAwMDAwMDAwICBcbiAgICAjIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgICAgICBcbiAgICAjIDAwMDAwMCAgICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMDAwMDAgICBcbiAgICAjIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAwMDAgICAgICAgMDAwICBcbiAgICAjIDAwMCAgICAgICAgMDAwMDAwMCAgICAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMDAwMDAgICBcbiAgICBcbiAgICBvbkthY2hlbEZvY3VzOiAod2luSWQpID0+XG4gICAgXG4gICAgICAgICMga2xvZyAnb24gZm9jdXMnIEBkaWN0W3dpbklkXVxuICAgICAgICBpZiBAZGljdFt3aW5JZF0gIT0gJ21haW4nXG4gICAgICAgICAgICBAZm9jdXNLYWNoZWwgPSBlbGVjdHJvbi5Ccm93c2VyV2luZG93LmZyb21JZCB3aW5JZFxuXG4gICAgIyAwMDAgICAwMDAgIDAwMDAwMDAwICAwMDAgICAwMDAgIFxuICAgICMgMDAwMCAgMDAwICAwMDAgICAgICAgMDAwIDAgMDAwICBcbiAgICAjIDAwMCAwIDAwMCAgMDAwMDAwMCAgIDAwMDAwMDAwMCAgXG4gICAgIyAwMDAgIDAwMDAgIDAwMCAgICAgICAwMDAgICAwMDAgIFxuICAgICMgMDAwICAgMDAwICAwMDAwMDAwMCAgMDAgICAgIDAwICBcbiAgICBcbiAgICBvbk5ld1NldDogPT5cbiAgICAgICAgXG4gICAgICAgIHNldHMgPSBwcmVmcy5nZXQgJ3NldHMnIFsnJ11cbiAgICAgICAgc2V0cy5wdXNoIFwiI3tzZXRzLmxlbmd0aH1cIlxuICAgICAgICBwcmVmcy5zZXQgJ3NldHMnIHNldHNcbiAgICAgICAgQGxvYWQgc2V0c1stMV1cbiAgICAgICAgXG4gICAgIyAwMDAwMDAwMDAgICAwMDAwMDAwICAgIDAwMDAwMDAgICAgMDAwMDAwMCAgIDAwMCAgICAgIDAwMDAwMDAwICBcbiAgICAjICAgIDAwMCAgICAgMDAwICAgMDAwICAwMDAgICAgICAgIDAwMCAgICAgICAgMDAwICAgICAgMDAwICAgICAgIFxuICAgICMgICAgMDAwICAgICAwMDAgICAwMDAgIDAwMCAgMDAwMCAgMDAwICAwMDAwICAwMDAgICAgICAwMDAwMDAwICAgXG4gICAgIyAgICAwMDAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgIDAwMCAgICAgICBcbiAgICAjICAgIDAwMCAgICAgIDAwMDAwMDAgICAgMDAwMDAwMCAgICAwMDAwMDAwICAgMDAwMDAwMCAgMDAwMDAwMDAgIFxuICAgIFxuICAgIG9uVG9nZ2xlU2V0OiA9PlxuXG4gICAgICAgIHJldHVybiBpZiBAc3dpdGNoaW5nXG4gICAgICAgIFxuICAgICAgICBzZXRzID0gcHJlZnMuZ2V0ICdzZXRzJyBbJyddXG4gICAgICAgIGluZGV4ID0gTWF0aC5tYXggMCwgc2V0cy5pbmRleE9mKEBzaWQpXG4gICAgICAgIFxuICAgICAgICBpZiBpbmRleCA+PSBzZXRzLmxlbmd0aC0xIHRoZW4gaW5kZXggPSAtMVxuICAgICAgICBAbG9hZCBzZXRzW2luZGV4KzFdXG4gICAgICAgIFxuICAgIG9uUmVzdG9yZVNldDogPT5cblxuICAgICAgICBAbG9hZCBAc2lkLCAnX3NhdmUnXG5cbiAgICBvblN0b3JlU2V0OiA9PlxuXG4gICAgICAgIHByZWZzLnNldCBcImthY2hlbG4je0BzaWR9X3NhdmVcIiBAc2V0IFxuICAgICAgICBwcmVmcy5zYXZlKClcbiAgICAgICAgXG4gICAgIyAwMDAgICAgICAgMDAwMDAwMCAgICAwMDAwMDAwICAgMDAwMDAwMCAgICBcbiAgICAjIDAwMCAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIFxuICAgICMgMDAwICAgICAgMDAwICAgMDAwICAwMDAwMDAwMDAgIDAwMCAgIDAwMCAgXG4gICAgIyAwMDAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICBcbiAgICAjIDAwMDAwMDAgICAwMDAwMDAwICAgMDAwICAgMDAwICAwMDAwMDAwICAgIFxuICAgIFxuICAgIGxvYWQ6IChuZXdTaWQsIHBvc3RmaXg9JycpIC0+XG4gICAgICAgICAgIFxuICAgICAgICByZXR1cm4gaWYgQHN3aXRjaGluZ1xuICAgICAgICAgICAgXG4gICAgICAgIEBzd2l0Y2hpbmcgPSB0cnVlXG4gICAgICAgIFxuICAgICAgICBuZXdTaWQgPz0gcHJlZnMuZ2V0ICdzZXQnICcnXG4gICAgICAgIFxuICAgICAgICBpZiBlbXB0eSBwb3N0Zml4XG4gICAgICAgICAgICBvbGRLYWNoZWxuID0gcHJlZnMuZ2V0IFwia2FjaGVsbiN7QHNpZH1cIiBbXVxuXG4gICAgICAgIEBrYWNoZWxJZHMgPSBbXVxuICAgICAgICB1cGRhdGVJZHMgPSBbJ21haW4nXVxuICAgICAgICBzaG93SWRzID0gW11cbiAgICAgICAgbmV3U2V0ID0gcHJlZnMuZ2V0IFwia2FjaGVsbiN7bmV3U2lkfSN7cG9zdGZpeH1cIiBbXVxuXG4gICAgICAgIGZvciBrYWNoZWxJZCBpbiBuZXdTZXQgPyBbXVxuICAgICAgICAgICAgaWYga2FjaGVsSWQgIT0gJ21haW4nXG4gICAgICAgICAgICAgICAgaWYgQHNldC5pbmRleE9mKGthY2hlbElkKSA+PSAwXG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZUlkcy5wdXNoIGthY2hlbElkXG4gICAgICAgICAgICAgICAgICAgIEBzZXQuc3BsaWNlIEBzZXQuaW5kZXhPZihrYWNoZWxJZCksIDFcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIHNob3dJZHMucHVzaCBrYWNoZWxJZFxuICAgICAgICAgICAgICAgICAgICBpZiBub3QgQHdpZHNba2FjaGVsSWRdXG4gICAgICAgICAgICAgICAgICAgICAgICBAa2FjaGVsSWRzLnB1c2gga2FjaGVsSWRcblxuICAgICAgICBpZiBAc2V0Lmxlbmd0aFxuICAgICAgICAgICAgZm9yIGthY2hlbElkIGluIEBzZXQuc2xpY2UoKVxuICAgICAgICAgICAgICAgIGlmIGthY2hlbElkIG5vdCBpbiBbJ21haW4nICdudWxsJyBudWxsXVxuICAgICAgICAgICAgICAgICAgICBpZiBAd2lkc1trYWNoZWxJZF1cbiAgICAgICAgICAgICAgICAgICAgICAgIEB3aW4oa2FjaGVsSWQpLmhpZGUoKVxuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBrbG9nICdubyB3aWQgZm9yJyBrYWNoZWxJZFxuICAgICAgICBcbiAgICAgICAgaWYgZW1wdHkgcG9zdGZpeFxuICAgICAgICAgICAgcHJlZnMuc2V0IFwia2FjaGVsbiN7QHNpZH1cIiBvbGRLYWNoZWxuXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICBAc2lkID0gbmV3U2lkXG4gICAgICAgIHByZWZzLnNldCAnc2V0JyBAc2lkXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICBAc2V0ID0gbmV3U2V0XG4gICAgICAgIFxuICAgICAgICBpZiB2YWxpZCBwb3N0Zml4XG4gICAgICAgICAgICBwcmVmcy5zZXQgXCJrYWNoZWxuI3tuZXdTaWR9XCIgQHNldFxuICAgICAgICBcbiAgICAgICAgZm9yIGthY2hlbElkIGluIHVwZGF0ZUlkc1xuICAgICAgICAgICAgcG9zdC5lbWl0ICd1cGRhdGVCb3VuZHMnIGthY2hlbElkXG5cbiAgICAgICAgZm9yIGthY2hlbElkIGluIHNob3dJZHNcbiAgICAgICAgICAgIHBvc3QuZW1pdCAnbmV3S2FjaGVsJyBrYWNoZWxJZFxuICAgICAgICAgICAgXG4gICAgICAgIGlmIEBrYWNoZWxJZHMubGVuZ3RoID09IDBcbiAgICAgICAgICAgICMga2xvZyAnbG9hZGVkICsrIGZvY3VzIG1haW4nXG4gICAgICAgICAgICBAc3dpdGNoaW5nID0gZmFsc2VcbiAgICAgICAgICAgIEB3aW4oJ21haW4nKS5mb2N1cygpXG4gICAgICAgICAgICBwb3N0LmVtaXQgJ3NldExvYWRlZCdcbiAgICAgICAgICAgXG4gICAgIyAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgICAgICAgIDAwMCAgICAgICAwMDAwMDAwICAgIDAwMDAwMDAgICAwMDAwMDAwICAgIFxuICAgICMgMDAwICAgMDAwICAwMDAwICAwMDAgICAgICAgICAwMDAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICBcbiAgICAjIDAwMCAgIDAwMCAgMDAwIDAgMDAwICAgICAgICAgMDAwICAgICAgMDAwICAgMDAwICAwMDAwMDAwMDAgIDAwMCAgIDAwMCAgXG4gICAgIyAwMDAgICAwMDAgIDAwMCAgMDAwMCAgICAgICAgIDAwMCAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIFxuICAgICMgIDAwMDAwMDAgICAwMDAgICAwMDAgICAgICAgICAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgICBcbiAgICBcbiAgICBvbkthY2hlbExvYWQ6ICh3aWQsIGthY2hlbElkKSA9PlxuICAgICAgICBcbiAgICAgICAgaWYga2FjaGVsSWQgbm90IGluIEBzZXRcbiAgICAgICAgICAgIEBzZXQucHVzaCBrYWNoZWxJZCBcbiAgICAgICAgICAgIHByZWZzLnNldCBcImthY2hlbG4je0BzaWR9XCIgQHNldFxuICAgICAgICBcbiAgICAgICAgQGRpY3Rbd2lkXSA9IGthY2hlbElkXG4gICAgICAgIEB3aWRzW2thY2hlbElkXSA9IHdpZFxuICAgICAgICBcbiAgICAgICAgaWYgQGthY2hlbElkc1xuICAgICAgICAgICAgaW5kZXggPSBAa2FjaGVsSWRzLmluZGV4T2Yga2FjaGVsSWRcbiAgICAgICAgICAgIGlmIGluZGV4ID49IDBcbiAgICAgICAgICAgICAgICBAa2FjaGVsSWRzLnNwbGljZSBpbmRleCwgMVxuICAgICAgICAgICAgICAgIGlmIEBrYWNoZWxJZHMubGVuZ3RoID09IDBcbiAgICAgICAgICAgICAgICAgICAga2xvZyBcInNldCN7QHNpZH0gbG9hZGVkXCJcbiAgICAgICAgICAgICAgICAgICAgQHN3aXRjaGluZyA9IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIEB3aW4oJ21haW4nKS5mb2N1cygpXG4gICAgICAgICAgICAgICAgICAgIHBvc3QuZW1pdCAnc2V0TG9hZGVkJ1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIGtsb2cgJ3Vua25vd24ga2FjaGVsPycga2FjaGVsSWRcblxuICAgICMgMDAwMDAwMDAgICAwMDAwMDAwMCAgMDAgICAgIDAwICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwMDAwMDAgIFxuICAgICMgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgIFxuICAgICMgMDAwMDAwMCAgICAwMDAwMDAwICAgMDAwMDAwMDAwICAwMDAgICAwMDAgICAwMDAgMDAwICAgMDAwMDAwMCAgIFxuICAgICMgMDAwICAgMDAwICAwMDAgICAgICAgMDAwIDAgMDAwICAwMDAgICAwMDAgICAgIDAwMCAgICAgMDAwICAgICAgIFxuICAgICMgMDAwICAgMDAwICAwMDAwMDAwMCAgMDAwICAgMDAwICAgMDAwMDAwMCAgICAgICAwICAgICAgMDAwMDAwMDAgIFxuICAgIFxuICAgIHJlbW92ZTogKGthY2hlbCkgLT5cbiAgICAgICAgXG4gICAgICAgIGlmIEBmb2N1c0thY2hlbCA9PSBrYWNoZWxcbiAgICAgICAgICAgIEBmb2N1c0thY2hlbCA9IG51bGxcbiAgICAgICAgXG4gICAgICAgIGlmIGthY2hlbElkID0gQGRpY3Rba2FjaGVsLmlkXVxuICAgICAgICAgICAgaWYgQHNldC5pbmRleE9mKGthY2hlbElkKSA+PSAwXG4gICAgICAgICAgICAgICAgQHNldC5zcGxpY2UgQHNldC5pbmRleE9mKGthY2hlbElkKSwgMVxuICAgICAgICAgICAgZGVsZXRlIEB3aWRzW2thY2hlbElkXVxuICAgICAgICAgICAgZGVsZXRlIEBkaWN0W2thY2hlbC5pZF1cbiAgICAgICAgICAgICMga2xvZyBcInByZWZzIHJlbW92ZSBmcm9tICN7QHNpZH1cIiBrYWNoZWxJZFxuICAgICAgICAgICAgcHJlZnMuc2V0IFwia2FjaGVsbiN7QHNpZH1cIiBAc2V0XG4gICAgICAgICAgICAgICAgXG4gICAgd2luOiAoa2FjaGVsSWQpIC0+XG4gICAgICAgICAgICBcbiAgICAgICAgZWxlY3Ryb24uQnJvd3NlcldpbmRvdy5mcm9tSWQgQHdpZHNba2FjaGVsSWRdXG4gICAgICAgIFxuICAgICMgMDAwICAgMDAwICAwMDAwMDAwMDAgIDAwICAgICAwMCAgMDAwICAgICAgXG4gICAgIyAwMDAgICAwMDAgICAgIDAwMCAgICAgMDAwICAgMDAwICAwMDAgICAgICBcbiAgICAjIDAwMDAwMDAwMCAgICAgMDAwICAgICAwMDAwMDAwMDAgIDAwMCAgICAgIFxuICAgICMgMDAwICAgMDAwICAgICAwMDAgICAgIDAwMCAwIDAwMCAgMDAwICAgICAgXG4gICAgIyAwMDAgICAwMDAgICAgIDAwMCAgICAgMDAwICAgMDAwICAwMDAwMDAwICBcbiAgICBcbiAgICBAaHRtbDogKHR5cGUpIC0+XG4gICAgICAgIFxuICAgICAgICBodG1sID0gXCJcIlwiXG4gICAgICAgICAgICA8IURPQ1RZUEUgaHRtbD5cbiAgICAgICAgICAgIDxodG1sIGxhbmc9XCJlblwiPlxuICAgICAgICAgICAgICA8aGVhZD5cbiAgICAgICAgICAgICAgICA8bWV0YSBjaGFyc2V0PVwidXRmLThcIj5cbiAgICAgICAgICAgICAgICA8bWV0YSBodHRwLWVxdWl2PVwiQ29udGVudC1TZWN1cml0eS1Qb2xpY3lcIiBjb250ZW50PVwiZGVmYXVsdC1zcmMgKiAndW5zYWZlLWlubGluZScgJ3Vuc2FmZS1ldmFsJ1wiPlxuICAgICAgICAgICAgICAgIDxsaW5rIHJlbD1cInN0eWxlc2hlZXRcIiBocmVmPVwiLi9jc3Mvc3R5bGUuY3NzXCIgdHlwZT1cInRleHQvY3NzXCI+XG4gICAgICAgICAgICAgICAgPGxpbmsgcmVsPVwic3R5bGVzaGVldFwiIGhyZWY9XCIuL2Nzcy9kYXJrLmNzc1wiIHR5cGU9XCJ0ZXh0L2Nzc1wiIGlkPVwic3R5bGUtbGlua1wiPlxuICAgICAgICAgICAgICA8L2hlYWQ+XG4gICAgICAgICAgICAgIDxib2R5PlxuICAgICAgICAgICAgICAgIDxkaXYgaWQ9XCJtYWluXCIgdGFiaW5kZXg9XCIwXCI+PC9kaXY+XG4gICAgICAgICAgICAgIDwvYm9keT5cbiAgICAgICAgICAgICAgPHNjcmlwdD5cbiAgICAgICAgICAgICAgICBLYWNoZWwgPSByZXF1aXJlKFwiLi8je3R5cGV9LmpzXCIpO1xuICAgICAgICAgICAgICAgIG5ldyBLYWNoZWwoe30pO1xuICAgICAgICAgICAgICA8L3NjcmlwdD5cbiAgICAgICAgICAgIDwvaHRtbD5cbiAgICAgICAgXCJcIlwiXG4gICAgICAgIFxuICAgICAgICBcImRhdGE6dGV4dC9odG1sO2NoYXJzZXQ9dXRmLTgsXCIgKyBlbmNvZGVVUkkgaHRtbFxuICAgICAgICBcbm1vZHVsZS5leHBvcnRzID0gS2FjaGVsU2V0XG4iXX0=
//# sourceURL=../coffee/kachelset.coffee