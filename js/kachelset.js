// koffee 1.4.0

/*
000   000   0000000    0000000  000   000  00000000  000       0000000  00000000  000000000
000  000   000   000  000       000   000  000       000      000       000          000   
0000000    000000000  000       000000000  0000000   000      0000000   0000000      000   
000  000   000   000  000       000   000  000       000           000  000          000   
000   000  000   000   0000000  000   000  00000000  0000000  0000000   00000000     000
 */
var KachelSet, electron, klog, post, prefs, ref,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    indexOf = [].indexOf;

ref = require('kxk'), post = ref.post, prefs = ref.prefs, klog = ref.klog;

electron = require('electron');

KachelSet = (function() {
    function KachelSet(mainId) {
        this.onKachelLoad = bind(this.onKachelLoad, this);
        this.onToggleSet = bind(this.onToggleSet, this);
        this.onNewSet = bind(this.onNewSet, this);
        this.onKachelFocus = bind(this.onKachelFocus, this);
        var obj;
        this.focusKachel = null;
        this.dict = (
            obj = {},
            obj["" + mainId] = 'main',
            obj
        );
        this.wids = {
            main: mainId
        };
        this.set = [];
        this.sid = '';
        post.on('kachelLoad', this.onKachelLoad);
        post.on('toggleSet', this.onToggleSet);
        post.on('newSet', this.onNewSet);
        post.on('kachelFocus', this.onKachelFocus);
    }

    KachelSet.prototype.onKachelFocus = function(winId) {
        if (this.dict[winId] !== 'main') {
            return this.focusKachel = electron.BrowserWindow.fromId(winId);
        }
    };

    KachelSet.prototype.onNewSet = function() {
        var sets;
        sets = prefs.get('sets', ['']);
        sets.push("" + sets.length);
        prefs.set('sets', sets);
        return this.load(sets.slice(-1)[0]);
    };

    KachelSet.prototype.onToggleSet = function() {
        var index, sets;
        sets = prefs.get('sets', ['']);
        index = Math.max(0, sets.indexOf(this.sid));
        if (index >= sets.length - 1) {
            index = -1;
        }
        return this.load(sets[index + 1]);
    };

    KachelSet.prototype.load = function(newSid) {
        var i, j, k, kachelId, l, len, len1, len2, len3, newSet, oldKacheln, ref1, ref2, showIds, updateIds;
        if (newSid != null) {
            newSid;
        } else {
            newSid = prefs.get('set', '');
        }
        oldKacheln = prefs.get("kacheln" + this.sid, []);
        this.kachelIds = [];
        updateIds = ['main'];
        showIds = [];
        newSet = prefs.get("kacheln" + newSid, []);
        ref1 = newSet != null ? newSet : [];
        for (i = 0, len = ref1.length; i < len; i++) {
            kachelId = ref1[i];
            if (kachelId !== 'main') {
                if (this.set.indexOf(kachelId) >= 0) {
                    updateIds.push(kachelId);
                    this.set.splice(this.set.indexOf(kachelId), 1);
                } else {
                    showIds.push(kachelId);
                    if (!this.wids[kachelId]) {
                        this.kachelIds.push(kachelId);
                    }
                }
            }
        }
        if (this.set.length) {
            ref2 = this.set.slice();
            for (j = 0, len1 = ref2.length; j < len1; j++) {
                kachelId = ref2[j];
                if (kachelId !== 'main' && kachelId !== 'null' && kachelId !== null) {
                    if (this.wids[kachelId]) {
                        this.win(kachelId).hide();
                    } else {
                        klog('no wid for', kachelId);
                    }
                }
            }
        }
        prefs.set("kacheln" + this.sid, oldKacheln);
        this.sid = newSid;
        prefs.set('set', this.sid);
        this.set = newSet;
        for (k = 0, len2 = updateIds.length; k < len2; k++) {
            kachelId = updateIds[k];
            post.emit('updateBounds', kachelId);
        }
        for (l = 0, len3 = showIds.length; l < len3; l++) {
            kachelId = showIds[l];
            post.emit('newKachel', kachelId);
        }
        if (this.kachelIds.length === 0) {
            klog('loaded ++ focus main');
            this.win('main').focus();
            return post.emit('setLoaded');
        }
    };

    KachelSet.prototype.onKachelLoad = function(wid, kachelId) {
        var index;
        if (indexOf.call(this.set, kachelId) < 0) {
            this.set.push(kachelId);
            prefs.set("kacheln" + this.sid, this.set);
        }
        this.dict[wid] = kachelId;
        this.wids[kachelId] = wid;
        if (this.kachelIds) {
            index = this.kachelIds.indexOf(kachelId);
            if (index >= 0) {
                this.kachelIds.splice(index, 1);
                if (this.kachelIds.length === 0) {
                    klog('set loaded -- focus main');
                    this.win('main').focus();
                    return post.emit('setLoaded');
                }
            } else {
                return klog('unknown kachel?', kachelId);
            }
        }
    };

    KachelSet.prototype.remove = function(kachel) {
        var kachelId;
        if (this.focusKachel === kachel) {
            this.focusKachel = null;
        }
        if (kachelId = this.dict[kachel.id]) {
            if (this.set.indexOf(kachelId) >= 0) {
                this.set.splice(this.set.indexOf(kachelId), 1);
            }
            delete this.wids[kachelId];
            delete this.dict[kachel.id];
            return prefs.set("kacheln" + this.sid, this.set);
        }
    };

    KachelSet.prototype.win = function(kachelId) {
        return electron.BrowserWindow.fromId(this.wids[kachelId]);
    };

    return KachelSet;

})();

module.exports = KachelSet;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/kachelset.coffee