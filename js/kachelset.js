// koffee 1.4.0

/*
000   000   0000000    0000000  000   000  00000000  000       0000000  00000000  000000000
000  000   000   000  000       000   000  000       000      000       000          000   
0000000    000000000  000       000000000  0000000   000      0000000   0000000      000   
000  000   000   000  000       000   000  000       000           000  000          000   
000   000  000   000   0000000  000   000  00000000  0000000  0000000   00000000     000
 */
var Bounds, KachelSet, electron, empty, klog, post, prefs, ref, slash, valid, win,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    indexOf = [].indexOf;

ref = require('kxk'), post = ref.post, prefs = ref.prefs, slash = ref.slash, empty = ref.empty, valid = ref.valid, win = ref.win, klog = ref.klog;

Bounds = require('./bounds');

electron = require('electron');

KachelSet = (function() {
    function KachelSet(mainId) {
        this.onKachelLoad = bind(this.onKachelLoad, this);
        this.didLoad = bind(this.didLoad, this);
        this.onStoreSet = bind(this.onStoreSet, this);
        this.onRestoreSet = bind(this.onRestoreSet, this);
        this.onKachelFocus = bind(this.onKachelFocus, this);
        this.onKachelClose = bind(this.onKachelClose, this);
        this.onNewKachel = bind(this.onNewKachel, this);
        var obj;
        this.switching = false;
        this.focusKachel = null;
        this.hoverKachel = null;
        this.dict = (
            obj = {},
            obj["" + mainId] = 'main',
            obj
        );
        this.wids = {
            main: mainId
        };
        this.set = [];
        post.on('kachelLoad', this.onKachelLoad);
        post.on('restoreSet', this.onRestoreSet);
        post.on('storeSet', this.onStoreSet);
        post.on('kachelFocus', this.onKachelFocus);
        post.on('newKachel', this.onNewKachel);
    }

    KachelSet.prototype.onNewKachel = function(kachelId) {
        var kachelSize, type;
        if (kachelId === 'main') {
            return;
        }
        if (this.wids[kachelId]) {
            win = this.win(kachelId);
            if (kachelId === 'default') {
                win.close();
                return;
            }
            win.show();
            if (indexOf.call(this.set, kachelId) < 0) {
                this.set.push(kachelId);
                prefs.set("kacheln", this.set);
                prefs.save();
            }
            return;
        }
        kachelSize = 2;
        type = kachelId;
        if (kachelId.startsWith('start')) {
            type = 'start';
            kachelSize = 2;
        } else if (kachelId.endsWith('.app') || kachelId.endsWith('.exe')) {
            if (slash.base(kachelId) === 'konrad') {
                type = 'konrad';
                kachelSize = 4;
            } else {
                type = 'appl';
                kachelSize = 2;
            }
        } else if (kachelId.startsWith('/') || kachelId[1] === ':') {
            type = 'folder';
            kachelSize = 2;
        }
        switch (type) {
            case 'saver':
                kachelSize = 0;
                break;
            case 'sysdish':
            case 'sysinfo':
            case 'clock':
            case 'default':
                kachelSize = 2;
        }
        win = new electron.BrowserWindow({
            movable: true,
            transparent: true,
            autoHideMenuBar: true,
            acceptFirstMouse: true,
            hasShadow: false,
            frame: false,
            resizable: false,
            maximizable: false,
            minimizable: false,
            fullscreen: false,
            show: false,
            fullscreenenable: false,
            backgroundColor: '#181818',
            width: Bounds.kachelSizes[kachelSize],
            height: Bounds.kachelSizes[kachelSize],
            webPreferences: {
                nodeIntegration: true,
                backgroundThrottling: false
            }
        });
        win.loadURL(KachelSet.html(type), {
            baseURLForDataURL: "file://" + __dirname + "/../js/index.html"
        });
        win.kachelId = kachelId;
        win.webContents.on('dom-ready', (function(id) {
            return function(event) {
                var ref1, wid;
                wid = event.sender.id;
                post.toWin(wid, 'initKachel', id);
                if ((ref1 = electron.BrowserWindow.fromId(wid)) != null) {
                    ref1.show();
                }
                return Bounds.update();
            };
        })(kachelId));
        win.on('close', this.onKachelClose);
        win.setHasShadow(false);
        return win;
    };

    KachelSet.prototype.onKachelClose = function(event) {
        var kachel;
        kachel = event.sender;
        if (this.hoverKachel === kachel.id) {
            this.hoverKachel = null;
        }
        Bounds.remove(kachel);
        this.remove(kachel);
        return setTimeout((function() {
            return post.emit('bounds', 'dirty');
        }), 200);
    };

    KachelSet.prototype.onKachelFocus = function(winId) {
        if (this.dict[winId] !== 'main') {
            return this.focusKachel = electron.BrowserWindow.fromId(winId);
        }
    };

    KachelSet.prototype.onRestoreSet = function() {
        return this.load('_save');
    };

    KachelSet.prototype.onStoreSet = function() {
        klog('store', this.set);
        prefs.set("kacheln_save", this.set);
        return prefs.save();
    };

    KachelSet.prototype.load = function(postfix) {
        var i, j, k, kachelId, l, len, len1, len2, len3, newSet, oldKacheln, ref1, ref2, showIds, updateIds;
        if (postfix == null) {
            postfix = '';
        }
        if (this.switching) {
            return;
        }
        this.switching = true;
        if (empty(postfix)) {
            oldKacheln = prefs.get("kacheln", []);
        }
        this.kachelIds = [];
        updateIds = ['main'];
        showIds = [];
        newSet = prefs.get("kacheln" + postfix, []);
        ref1 = newSet != null ? newSet : [];
        for (i = 0, len = ref1.length; i < len; i++) {
            kachelId = ref1[i];
            if (kachelId !== 'main') {
                if (this.set.indexOf(kachelId) >= 0) {
                    updateIds.push(kachelId);
                    this.set.splice(this.set.indexOf(kachelId), 1);
                } else {
                    showIds.push(kachelId);
                    if (!this.wids[kachelId]) {
                        this.kachelIds.push(kachelId);
                    }
                }
            }
        }
        if (this.set.length) {
            ref2 = this.set.slice();
            for (j = 0, len1 = ref2.length; j < len1; j++) {
                kachelId = ref2[j];
                if (kachelId !== 'main' && kachelId !== 'null' && kachelId !== null) {
                    if (this.wids[kachelId]) {
                        this.win(kachelId).hide();
                    } else {
                        klog('no wid for', kachelId);
                    }
                }
            }
        }
        if (empty(postfix)) {
            prefs.set("kacheln", oldKacheln);
        }
        this.set = newSet;
        if (valid(postfix)) {
            prefs.set("kacheln", this.set);
        }
        for (k = 0, len2 = updateIds.length; k < len2; k++) {
            kachelId = updateIds[k];
            post.emit('updateBounds', kachelId);
        }
        for (l = 0, len3 = showIds.length; l < len3; l++) {
            kachelId = showIds[l];
            this.onNewKachel(kachelId);
        }
        return this.didLoad();
    };

    KachelSet.prototype.didLoad = function() {
        this.switching = false;
        this.win('main').focus();
        this.focusKachel = this.win('main');
        return post.emit('setLoaded');
    };

    KachelSet.prototype.onKachelLoad = function(wid, kachelId) {
        var index;
        if (indexOf.call(this.set, kachelId) < 0) {
            this.set.push(kachelId);
            prefs.set("kacheln", this.set);
            prefs.save();
        }
        this.dict[wid] = kachelId;
        this.wids[kachelId] = wid;
        if (this.kachelIds) {
            index = this.kachelIds.indexOf(kachelId);
            if (index >= 0) {
                this.kachelIds.splice(index, 1);
                if (this.kachelIds.length === 0) {
                    return this.didLoad();
                }
            }
        }
    };

    KachelSet.prototype.remove = function(kachel) {
        var kachelId;
        if (this.focusKachel === kachel) {
            this.focusKachel = null;
        }
        if (kachelId = this.dict[kachel.id]) {
            if (this.set.indexOf(kachelId) >= 0) {
                this.set.splice(this.set.indexOf(kachelId), 1);
            }
            delete this.wids[kachelId];
            delete this.dict[kachel.id];
            return prefs.set("kacheln", this.set);
        }
    };

    KachelSet.prototype.win = function(kachelId) {
        return electron.BrowserWindow.fromId(this.wids[kachelId]);
    };

    KachelSet.html = function(type) {
        var html;
        html = "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"Content-Security-Policy\" content=\"default-src * 'unsafe-inline' 'unsafe-eval'\">\n    <link rel=\"stylesheet\" href=\"./css/style.css\" type=\"text/css\">\n    <link rel=\"stylesheet\" href=\"./css/dark.css\" type=\"text/css\" id=\"style-link\">\n  </head>\n  <body>\n    <div id=\"main\" tabindex=\"0\"></div>\n  </body>\n  <script>\n    Kachel = require(\"./" + type + ".js\");\n    new Kachel({});\n  </script>\n</html>";
        return "data:text/html;charset=utf-8," + encodeURI(html);
    };

    return KachelSet;

})();

module.exports = KachelSet;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2FjaGVsc2V0LmpzIiwic291cmNlUm9vdCI6Ii4iLCJzb3VyY2VzIjpbIiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOzs7Ozs7O0FBQUEsSUFBQSw2RUFBQTtJQUFBOzs7QUFRQSxNQUFrRCxPQUFBLENBQVEsS0FBUixDQUFsRCxFQUFFLGVBQUYsRUFBUSxpQkFBUixFQUFlLGlCQUFmLEVBQXNCLGlCQUF0QixFQUE2QixpQkFBN0IsRUFBb0MsYUFBcEMsRUFBeUM7O0FBRXpDLE1BQUEsR0FBVyxPQUFBLENBQVEsVUFBUjs7QUFDWCxRQUFBLEdBQVcsT0FBQSxDQUFRLFVBQVI7O0FBRUw7SUFFQyxtQkFBQyxNQUFEOzs7Ozs7OztBQUVDLFlBQUE7UUFBQSxJQUFDLENBQUEsU0FBRCxHQUFlO1FBRWYsSUFBQyxDQUFBLFdBQUQsR0FBZTtRQUNmLElBQUMsQ0FBQSxXQUFELEdBQWU7UUFFZixJQUFDLENBQUEsSUFBRCxHQUFTO2tCQUFBLEVBQUE7Z0JBQUEsRUFBQSxHQUFHLFVBQVUsTUFBYjs7O1FBQ1QsSUFBQyxDQUFBLElBQUQsR0FBUztZQUFBLElBQUEsRUFBSyxNQUFMOztRQUNULElBQUMsQ0FBQSxHQUFELEdBQVM7UUFFVCxJQUFJLENBQUMsRUFBTCxDQUFRLFlBQVIsRUFBc0IsSUFBQyxDQUFBLFlBQXZCO1FBQ0EsSUFBSSxDQUFDLEVBQUwsQ0FBUSxZQUFSLEVBQXNCLElBQUMsQ0FBQSxZQUF2QjtRQUNBLElBQUksQ0FBQyxFQUFMLENBQVEsVUFBUixFQUFzQixJQUFDLENBQUEsVUFBdkI7UUFDQSxJQUFJLENBQUMsRUFBTCxDQUFRLGFBQVIsRUFBc0IsSUFBQyxDQUFBLGFBQXZCO1FBQ0EsSUFBSSxDQUFDLEVBQUwsQ0FBUSxXQUFSLEVBQXNCLElBQUMsQ0FBQSxXQUF2QjtJQWZEOzt3QkF1QkgsV0FBQSxHQUFhLFNBQUMsUUFBRDtBQUVULFlBQUE7UUFBQSxJQUFVLFFBQUEsS0FBWSxNQUF0QjtBQUFBLG1CQUFBOztRQUVBLElBQUcsSUFB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Q0FBQyxPQUFQLEdBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiIyMjXG4wMDAgICAwMDAgICAwMDAwMDAwICAgIDAwMDAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMDAgIDAwMCAgICAgICAwMDAwMDAwICAwMDAwMDAwMCAgMDAwMDAwMDAwXG4wMDAgIDAwMCAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgICAgIDAwMCAgICAgICAwMDAgICAgICAgICAgMDAwICAgXG4wMDAwMDAwICAgIDAwMDAwMDAwMCAgMDAwICAgICAgIDAwMDAwMDAwMCAgMDAwMDAwMCAgIDAwMCAgICAgIDAwMDAwMDAgICAwMDAwMDAwICAgICAgMDAwICAgXG4wMDAgIDAwMCAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgICAgICAgICAgMDAwICAwMDAgICAgICAgICAgMDAwICAgXG4wMDAgICAwMDAgIDAwMCAgIDAwMCAgIDAwMDAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMDAgIDAwMDAwMDAgIDAwMDAwMDAgICAwMDAwMDAwMCAgICAgMDAwICAgXG4jIyNcblxueyBwb3N0LCBwcmVmcywgc2xhc2gsIGVtcHR5LCB2YWxpZCwgd2luLCBrbG9nIH0gPSByZXF1aXJlICdreGsnXG5cbkJvdW5kcyAgID0gcmVxdWlyZSAnLi9ib3VuZHMnXG5lbGVjdHJvbiA9IHJlcXVpcmUgJ2VsZWN0cm9uJ1xuXG5jbGFzcyBLYWNoZWxTZXRcblxuICAgIEA6IChtYWluSWQpIC0+XG4gICAgICAgIFxuICAgICAgICBAc3dpdGNoaW5nICAgPSBmYWxzZVxuICAgICAgICBcbiAgICAgICAgQGZvY3VzS2FjaGVsID0gbnVsbFxuICAgICAgICBAaG92ZXJLYWNoZWwgPSBudWxsXG4gICAgICAgIFxuICAgICAgICBAZGljdCAgPSBcIiN7bWFpbklkfVwiOiAnbWFpbidcbiAgICAgICAgQHdpZHMgID0gbWFpbjptYWluSWRcbiAgICAgICAgQHNldCAgID0gW11cbiAgICAgICAgXG4gICAgICAgIHBvc3Qub24gJ2thY2hlbExvYWQnICBAb25LYWNoZWxMb2FkXG4gICAgICAgIHBvc3Qub24gJ3Jlc3RvcmVTZXQnICBAb25SZXN0b3JlU2V0XG4gICAgICAgIHBvc3Qub24gJ3N0b3JlU2V0JyAgICBAb25TdG9yZVNldFxuICAgICAgICBwb3N0Lm9uICdrYWNoZWxGb2N1cycgQG9uS2FjaGVsRm9jdXNcbiAgICAgICAgcG9zdC5vbiAnbmV3S2FjaGVsJyAgIEBvbk5ld0thY2hlbFxuICAgICAgICAgICAgXG4gICAgIyAwMDAgICAwMDAgIDAwMDAwMDAwICAwMDAgICAwMDAgICAgICAgIDAwMCAgIDAwMCAgIDAwMDAwMDAgICAgMDAwMDAwMCAgMDAwICAgMDAwICAwMDAwMDAwMCAgMDAwICAgICAgXG4gICAgIyAwMDAwICAwMDAgIDAwMCAgICAgICAwMDAgMCAwMDAgICAgICAgIDAwMCAgMDAwICAgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAgICAgXG4gICAgIyAwMDAgMCAwMDAgIDAwMDAwMDAgICAwMDAwMDAwMDAgICAgICAgIDAwMDAwMDAgICAgMDAwMDAwMDAwICAwMDAgICAgICAgMDAwMDAwMDAwICAwMDAwMDAwICAgMDAwICAgICAgXG4gICAgIyAwMDAgIDAwMDAgIDAwMCAgICAgICAwMDAgICAwMDAgICAgICAgIDAwMCAgMDAwICAgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAgICAgXG4gICAgIyAwMDAgICAwMDAgIDAwMDAwMDAwICAwMCAgICAgMDAgICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAgMDAwMDAwMCAgMDAwICAgMDAwICAwMDAwMDAwMCAgMDAwMDAwMCAgXG5cbiAgICBvbk5ld0thY2hlbDogKGthY2hlbElkKSA9PlxuXG4gICAgICAgIHJldHVybiBpZiBrYWNoZWxJZCA9PSAnbWFpbidcbiAgICAgICAgXG4gICAgICAgIGlmIEB3aWRzW2thY2hlbElkXVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB3aW4gPSBAd2luIGthY2hlbElkXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIGthY2hlbElkID09ICdkZWZhdWx0J1xuICAgICAgICAgICAgICAgIHdpbi5jbG9zZSgpXG4gICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHdpbi5zaG93KClcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYga2FjaGVsSWQgbm90IGluIEBzZXRcbiAgICAgICAgICAgICAgICBAc2V0LnB1c2gga2FjaGVsSWQgXG4gICAgICAgICAgICAgICAgcHJlZnMuc2V0IFwia2FjaGVsblwiIEBzZXRcbiAgICAgICAgICAgICAgICBwcmVmcy5zYXZlKClcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIFxuICAgICAgICBrYWNoZWxTaXplID0gMlxuICAgIFxuICAgICAgICB0eXBlID0ga2FjaGVsSWRcbiAgICAgICAgaWYga2FjaGVsSWQuc3RhcnRzV2l0aCAnc3RhcnQnXG4gICAgICAgICAgICB0eXBlID0gJ3N0YXJ0J1xuICAgICAgICAgICAga2FjaGVsU2l6ZSA9IDJcbiAgICAgICAgZWxzZSBpZiBrYWNoZWxJZC5lbmRzV2l0aCgnLmFwcCcpIG9yIGthY2hlbElkLmVuZHNXaXRoKCcuZXhlJylcbiAgICAgICAgICAgIGlmIHNsYXNoLmJhc2Uoa2FjaGVsSWQpID09ICdrb25yYWQnXG4gICAgICAgICAgICAgICAgdHlwZSA9ICdrb25yYWQnXG4gICAgICAgICAgICAgICAga2FjaGVsU2l6ZSA9IDRcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICB0eXBlID0gJ2FwcGwnXG4gICAgICAgICAgICAgICAga2FjaGVsU2l6ZSA9IDJcbiAgICAgICAgZWxzZSBpZiBrYWNoZWxJZC5zdGFydHNXaXRoKCcvJykgb3Iga2FjaGVsSWRbMV0gPT0gJzonXG4gICAgICAgICAgICB0eXBlID0gJ2ZvbGRlcidcbiAgICAgICAgICAgIGthY2hlbFNpemUgPSAyXG4gICAgICAgICAgICBcbiAgICAgICAgc3dpdGNoIHR5cGVcbiAgICAgICAgICAgIHdoZW4gJ3NhdmVyJyB0aGVuIGthY2hlbFNpemUgPSAwXG4gICAgICAgICAgICB3aGVuICdzeXNkaXNoJyAnc3lzaW5mbycgJ2Nsb2NrJyAnZGVmYXVsdCcgdGhlbiBrYWNoZWxTaXplID0gMlxuICAgICAgICAgICAgXG4gICAgICAgIHdpbiA9IG5ldyBlbGVjdHJvbi5Ccm93c2VyV2luZG93XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIG1vdmFibGU6ICAgICAgICAgICAgdHJ1ZVxuICAgICAgICAgICAgdHJhbnNwYXJlbnQ6ICAgICAgICB0cnVlXG4gICAgICAgICAgICBhdXRvSGlkZU1lbnVCYXI6ICAgIHRydWVcbiAgICAgICAgICAgIGFjY2VwdEZpcnN0TW91c2U6ICAgdHJ1ZVxuICAgICAgICAgICAgaGFzU2hhZG93OiAgICAgICAgICBmYWxzZVxuICAgICAgICAgICAgZnJhbWU6ICAgICAgICAgICAgICBmYWxzZVxuICAgICAgICAgICAgcmVzaXphYmxlOiAgICAgICAgICBmYWxzZVxuICAgICAgICAgICAgbWF4aW1pemFibGU6ICAgICAgICBmYWxzZVxuICAgICAgICAgICAgbWluaW1pemFibGU6ICAgICAgICBmYWxzZVxuICAgICAgICAgICAgZnVsbHNjcmVlbjogICAgICAgICBmYWxzZVxuICAgICAgICAgICAgc2hvdzogICAgICAgICAgICAgICBmYWxzZVxuICAgICAgICAgICAgZnVsbHNjcmVlbmVuYWJsZTogICBmYWxzZVxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAgICAnIzE4MTgxOCdcbiAgICAgICAgICAgIHdpZHRoOiAgICAgICAgICAgICAgQm91bmRzLmthY2hlbFNpemVzW2thY2hlbFNpemVdXG4gICAgICAgICAgICBoZWlnaHQ6ICAgICAgICAgICAgIEJvdW5kcy5rYWNoZWxTaXplc1trYWNoZWxTaXplXVxuICAgICAgICAgICAgd2ViUHJlZmVyZW5jZXM6IFxuICAgICAgICAgICAgICAgIG5vZGVJbnRlZ3JhdGlvbjogICAgICAgIHRydWVcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kVGhyb3R0bGluZzogICBmYWxzZVxuICAgICAgICAgICAgXG4gICAgICAgIHdpbi5sb2FkVVJMIEthY2hlbFNldC5odG1sKHR5cGUpLCBiYXNlVVJMRm9yRGF0YVVSTDpcImZpbGU6Ly8je19fZGlybmFtZX0vLi4vanMvaW5kZXguaHRtbFwiXG4gICAgICAgIFxuICAgICAgICB3aW4ua2FjaGVsSWQgPSBrYWNoZWxJZFxuICAgICAgICBcbiAgICAgICAgd2luLndlYkNvbnRlbnRzLm9uICdkb20tcmVhZHknICgoaWQpIC0+IChldmVudCkgLT5cbiAgICAgICAgICAgIHdpZCA9IGV2ZW50LnNlbmRlci5pZFxuICAgICAgICAgICAgcG9zdC50b1dpbiB3aWQsICdpbml0S2FjaGVsJyBpZFxuICAgICAgICAgICAgZWxlY3Ryb24uQnJvd3NlcldpbmRvdy5mcm9tSWQod2lkKT8uc2hvdygpXG4gICAgICAgICAgICBCb3VuZHMudXBkYXRlKClcbiAgICAgICAgICAgICkoa2FjaGVsSWQpXG4gICAgICAgICAgICAgIFxuICAgICAgICB3aW4ub24gJ2Nsb3NlJyBAb25LYWNoZWxDbG9zZVxuICAgICAgICB3aW4uc2V0SGFzU2hhZG93IGZhbHNlICAgIFxuICAgICAgICAgICAgICAgIFxuICAgICAgICB3aW5cbiAgICAgICAgXG4gICAgIyAgMDAwMDAwMCAgMDAwICAgICAgIDAwMDAwMDAgICAgMDAwMDAwMCAgMDAwMDAwMDAgIFxuICAgICMgMDAwICAgICAgIDAwMCAgICAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgICAgICBcbiAgICAjIDAwMCAgICAgICAwMDAgICAgICAwMDAgICAwMDAgIDAwMDAwMDAgICAwMDAwMDAwICAgXG4gICAgIyAwMDAgICAgICAgMDAwICAgICAgMDAwICAgMDAwICAgICAgIDAwMCAgMDAwICAgICAgIFxuICAgICMgIDAwMDAwMDAgIDAwMDAwMDAgICAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMDAwMDAwICBcbiAgICBcbiAgICBvbkthY2hlbENsb3NlOiAoZXZlbnQpID0+XG4gICAgICAgICAgICBcbiAgICAgICAga2FjaGVsID0gZXZlbnQuc2VuZGVyXG4gICAgICAgICAgICAgICAgXG4gICAgICAgIGlmIEBob3ZlckthY2hlbCA9PSBrYWNoZWwuaWRcbiAgICAgICAgICAgIEBob3ZlckthY2hlbCA9IG51bGxcbiAgICAgICAgICAgIFxuICAgICAgICBCb3VuZHMucmVtb3ZlIGthY2hlbFxuICAgICAgICBAcmVtb3ZlIGthY2hlbCAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgc2V0VGltZW91dCAoLT4gcG9zdC5lbWl0ICdib3VuZHMnICdkaXJ0eScpLCAyMDBcbiAgICAgICAgXG4gICAgIyAwMDAwMDAwMCAgIDAwMDAwMDAgICAgMDAwMDAwMCAgMDAwICAgMDAwICAgMDAwMDAwMCAgXG4gICAgIyAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAgICAgXG4gICAgIyAwMDAwMDAgICAgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAgMDAwICAwMDAwMDAwICAgXG4gICAgIyAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAgMDAwICAgICAgIDAwMCAgXG4gICAgIyAwMDAgICAgICAgIDAwMDAwMDAgICAgMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwICAgXG4gICAgXG4gICAgb25LYWNoZWxGb2N1czogKHdpbklkKSA9PlxuICAgIFxuICAgICAgICBpZiBAZGljdFt3aW5JZF0gIT0gJ21haW4nXG4gICAgICAgICAgICBAZm9jdXNLYWNoZWwgPSBlbGVjdHJvbi5Ccm93c2VyV2luZG93LmZyb21JZCB3aW5JZFxuXG4gICAgIyAwMDAgICAwMDAgIDAwMDAwMDAwICAwMDAgICAwMDAgIFxuICAgICMgMDAwMCAgMDAwICAwMDAgICAgICAgMDAwIDAgMDAwICBcbiAgICAjIDAwMCAwIDAwMCAgMDAwMDAwMCAgIDAwMDAwMDAwMCAgXG4gICAgIyAwMDAgIDAwMDAgIDAwMCAgICAgICAwMDAgICAwMDAgIFxuICAgICMgMDAwICAgMDAwICAwMDAwMDAwMCAgMDAgICAgIDAwICBcbiAgICBcbiAgICBvblJlc3RvcmVTZXQ6ID0+XG5cbiAgICAgICAgQGxvYWQgJ19zYXZlJ1xuXG4gICAgb25TdG9yZVNldDogPT5cblxuICAgICAgICBrbG9nICdzdG9yZScgQHNldFxuICAgICAgICBwcmVmcy5zZXQgXCJrYWNoZWxuX3NhdmVcIiBAc2V0IFxuICAgICAgICBwcmVmcy5zYXZlKClcbiAgICAgICAgXG4gICAgIyAwMDAgICAgICAgMDAwMDAwMCAgICAwMDAwMDAwICAgMDAwMDAwMCAgICBcbiAgICAjIDAwMCAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIFxuICAgICMgMDAwICAgICAgMDAwICAgMDAwICAwMDAwMDAwMDAgIDAwMCAgIDAwMCAgXG4gICAgIyAwMDAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICBcbiAgICAjIDAwMDAwMDAgICAwMDAwMDAwICAgMDAwICAgMDAwICAwMDAwMDAwICAgIFxuICAgIFxuICAgIGxvYWQ6IChwb3N0Zml4PScnKSAtPlxuICAgICAgICAgICAgICAgIFxuICAgICAgICByZXR1cm4gaWYgQHN3aXRjaGluZ1xuICAgICAgICAgICAgXG4gICAgICAgIEBzd2l0Y2hpbmcgPSB0cnVlXG4gICAgICAgIFxuICAgICAgICBpZiBlbXB0eSBwb3N0Zml4XG4gICAgICAgICAgICBvbGRLYWNoZWxuID0gcHJlZnMuZ2V0IFwia2FjaGVsblwiIFtdXG5cbiAgICAgICAgQGthY2hlbElkcyA9IFtdXG4gICAgICAgIHVwZGF0ZUlkcyA9IFsnbWFpbiddXG4gICAgICAgIHNob3dJZHMgPSBbXVxuICAgICAgICBuZXdTZXQgPSBwcmVmcy5nZXQgXCJrYWNoZWxuI3twb3N0Zml4fVwiIFtdXG5cbiAgICAgICAgZm9yIGthY2hlbElkIGluIG5ld1NldCA/IFtdXG4gICAgICAgICAgICBpZiBrYWNoZWxJZCAhPSAnbWFpbidcbiAgICAgICAgICAgICAgICBpZiBAc2V0LmluZGV4T2Yoa2FjaGVsSWQpID49IDBcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlSWRzLnB1c2gga2FjaGVsSWRcbiAgICAgICAgICAgICAgICAgICAgQHNldC5zcGxpY2UgQHNldC5pbmRleE9mKGthY2hlbElkKSwgMVxuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgc2hvd0lkcy5wdXNoIGthY2hlbElkXG4gICAgICAgICAgICAgICAgICAgIGlmIG5vdCBAd2lkc1trYWNoZWxJZF1cbiAgICAgICAgICAgICAgICAgICAgICAgIEBrYWNoZWxJZHMucHVzaCBrYWNoZWxJZFxuXG4gICAgICAgIGlmIEBzZXQubGVuZ3RoXG4gICAgICAgICAgICBmb3Iga2FjaGVsSWQgaW4gQHNldC5zbGljZSgpXG4gICAgICAgICAgICAgICAgaWYga2FjaGVsSWQgbm90IGluIFsnbWFpbicgJ251bGwnIG51bGxdXG4gICAgICAgICAgICAgICAgICAgIGlmIEB3aWRzW2thY2hlbElkXVxuICAgICAgICAgICAgICAgICAgICAgICAgQHdpbihrYWNoZWxJZCkuaGlkZSgpXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGtsb2cgJ25vIHdpZCBmb3InIGthY2hlbElkXG4gICAgICAgIFxuICAgICAgICBpZiBlbXB0eSBwb3N0Zml4XG4gICAgICAgICAgICBwcmVmcy5zZXQgXCJrYWNoZWxuXCIgb2xkS2FjaGVsblxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgQHNldCA9IG5ld1NldFxuICAgICAgICBcbiAgICAgICAgaWYgdmFsaWQgcG9zdGZpeFxuICAgICAgICAgICAgcHJlZnMuc2V0IFwia2FjaGVsblwiIEBzZXRcbiAgICAgICAgXG4gICAgICAgIGZvciBrYWNoZWxJZCBpbiB1cGRhdGVJZHNcbiAgICAgICAgICAgIHBvc3QuZW1pdCAndXBkYXRlQm91bmRzJyBrYWNoZWxJZFxuXG4gICAgICAgIGZvciBrYWNoZWxJZCBpbiBzaG93SWRzXG4gICAgICAgICAgICBAb25OZXdLYWNoZWwga2FjaGVsSWRcbiAgICAgICAgIFxuICAgICAgICBAZGlkTG9hZCgpXG4gICAgICAgICAgICBcbiAgICAjIDAwMDAwMDAgICAgMDAwICAwMDAwMDAwICAgICAgICAgIDAwMCAgICAgICAwMDAwMDAwICAgIDAwMDAwMDAgICAwMDAwMDAwICAgIFxuICAgICMgMDAwICAgMDAwICAwMDAgIDAwMCAgIDAwMCAgICAgICAgMDAwICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgXG4gICAgIyAwMDAgICAwMDAgIDAwMCAgMDAwICAgMDAwICAgICAgICAwMDAgICAgICAwMDAgICAwMDAgIDAwMDAwMDAwMCAgMDAwICAgMDAwICBcbiAgICAjIDAwMCAgIDAwMCAgMDAwICAwMDAgICAwMDAgICAgICAgIDAwMCAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIFxuICAgICMgMDAwMDAwMCAgICAwMDAgIDAwMDAwMDAgICAgICAgICAgMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAgICAwMDAgIDAwMDAwMDAgICAgXG4gICAgXG4gICAgZGlkTG9hZDogPT5cbiAgICAgICAgXG4gICAgICAgIEBzd2l0Y2hpbmcgPSBmYWxzZVxuICAgICAgICBAd2luKCdtYWluJykuZm9jdXMoKVxuICAgICAgICBAZm9jdXNLYWNoZWwgPSBAd2luKCdtYWluJylcbiAgICAgICAgcG9zdC5lbWl0ICdzZXRMb2FkZWQnXG4gICAgICAgICAgIFxuICAgICMgMDAwICAgMDAwICAgMDAwMDAwMCAgICAwMDAwMDAwICAwMDAgICAwMDAgIDAwMDAwMDAwICAwMDAgICAgICAgICAgICAgIDAwMCAgICAgICAwMDAwMDAwICAgIDAwMDAwMDAgICAwMDAwMDAwICAgIFxuICAgICMgMDAwICAwMDAgICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAgICAgICAgICAgIDAwMCAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIFxuICAgICMgMDAwMDAwMCAgICAwMDAwMDAwMDAgIDAwMCAgICAgICAwMDAwMDAwMDAgIDAwMDAwMDAgICAwMDAgICAgICAgICAgICAgIDAwMCAgICAgIDAwMCAgIDAwMCAgMDAwMDAwMDAwICAwMDAgICAwMDAgIFxuICAgICMgMDAwICAwMDAgICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAgICAgICAgICAgIDAwMCAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIFxuICAgICMgMDAwICAgMDAwICAwMDAgICAwMDAgICAwMDAwMDAwICAwMDAgICAwMDAgIDAwMDAwMDAwICAwMDAwMDAwICAgICAgICAgIDAwMDAwMDAgICAwMDAwMDAwICAgMDAwICAgMDAwICAwMDAwMDAwICAgIFxuICAgIFxuICAgIG9uS2FjaGVsTG9hZDogKHdpZCwga2FjaGVsSWQpID0+XG4gICAgICAgICAgICBcbiAgICAgICAgaWYga2FjaGVsSWQgbm90IGluIEBzZXRcbiAgICAgICAgICAgIEBzZXQucHVzaCBrYWNoZWxJZCBcbiAgICAgICAgICAgIHByZWZzLnNldCBcImthY2hlbG5cIiBAc2V0XG4gICAgICAgICAgICBwcmVmcy5zYXZlKClcbiAgICAgICAgXG4gICAgICAgIEBkaWN0W3dpZF0gPSBrYWNoZWxJZFxuICAgICAgICBAd2lkc1trYWNoZWxJZF0gPSB3aWRcbiAgICAgICAgXG4gICAgICAgIGlmIEBrYWNoZWxJZHNcbiAgICAgICAgICAgIGluZGV4ID0gQGthY2hlbElkcy5pbmRleE9mIGthY2hlbElkXG4gICAgICAgICAgICBpZiBpbmRleCA+PSAwXG4gICAgICAgICAgICAgICAgQGthY2hlbElkcy5zcGxpY2UgaW5kZXgsIDFcbiAgICAgICAgICAgICAgICBpZiBAa2FjaGVsSWRzLmxlbmd0aCA9PSAwIHRoZW4gQGRpZExvYWQoKVxuICBcbiAgICAjIDAwMDAwMDAwICAgMDAwMDAwMDAgIDAwICAgICAwMCAgIDAwMDAwMDAgICAwMDAgICAwMDAgIDAwMDAwMDAwICBcbiAgICAjIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICBcbiAgICAjIDAwMDAwMDAgICAgMDAwMDAwMCAgIDAwMDAwMDAwMCAgMDAwICAgMDAwICAgMDAwIDAwMCAgIDAwMDAwMDAgICBcbiAgICAjIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAwIDAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgIDAwMCAgICAgICBcbiAgICAjIDAwMCAgIDAwMCAgMDAwMDAwMDAgIDAwMCAgIDAwMCAgIDAwMDAwMDAgICAgICAgMCAgICAgIDAwMDAwMDAwICBcbiAgICBcbiAgICByZW1vdmU6IChrYWNoZWwpIC0+XG4gICAgICAgIFxuICAgICAgICBpZiBAZm9jdXNLYWNoZWwgPT0ga2FjaGVsXG4gICAgICAgICAgICBAZm9jdXNLYWNoZWwgPSBudWxsXG4gICAgICAgIFxuICAgICAgICBpZiBrYWNoZWxJZCA9IEBkaWN0W2thY2hlbC5pZF1cbiAgICAgICAgICAgIGlmIEBzZXQuaW5kZXhPZihrYWNoZWxJZCkgPj0gMFxuICAgICAgICAgICAgICAgIEBzZXQuc3BsaWNlIEBzZXQuaW5kZXhPZihrYWNoZWxJZCksIDFcbiAgICAgICAgICAgIGRlbGV0ZSBAd2lkc1trYWNoZWxJZF1cbiAgICAgICAgICAgIGRlbGV0ZSBAZGljdFtrYWNoZWwuaWRdXG4gICAgICAgICAgICBwcmVmcy5zZXQgXCJrYWNoZWxuXCIgQHNldFxuICAgICAgICAgICAgICAgIFxuICAgIHdpbjogKGthY2hlbElkKSAtPlxuICAgICAgICAgICAgXG4gICAgICAgIGVsZWN0cm9uLkJyb3dzZXJXaW5kb3cuZnJvbUlkIEB3aWRzW2thY2hlbElkXVxuICAgICAgICBcbiAgICAjIDAwMCAgIDAwMCAgMDAwMDAwMDAwICAwMCAgICAgMDAgIDAwMCAgICAgIFxuICAgICMgMDAwICAgMDAwICAgICAwMDAgICAgIDAwMCAgIDAwMCAgMDAwICAgICAgXG4gICAgIyAwMDAwMDAwMDAgICAgIDAwMCAgICAgMDAwMDAwMDAwICAwMDAgICAgICBcbiAgICAjIDAwMCAgIDAwMCAgICAgMDAwICAgICAwMDAgMCAwMDAgIDAwMCAgICAgIFxuICAgICMgMDAwICAgMDAwICAgICAwMDAgICAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgXG4gICAgXG4gICAgQGh0bWw6ICh0eXBlKSAtPlxuICAgICAgICBcbiAgICAgICAgaHRtbCA9IFwiXCJcIlxuICAgICAgICAgICAgPCFET0NUWVBFIGh0bWw+XG4gICAgICAgICAgICA8aHRtbCBsYW5nPVwiZW5cIj5cbiAgICAgICAgICAgICAgPGhlYWQ+XG4gICAgICAgICAgICAgICAgPG1ldGEgY2hhcnNldD1cInV0Zi04XCI+XG4gICAgICAgICAgICAgICAgPG1ldGEgaHR0cC1lcXVpdj1cIkNvbnRlbnQtU2VjdXJpdHktUG9saWN5XCIgY29udGVudD1cImRlZmF1bHQtc3JjICogJ3Vuc2FmZS1pbmxpbmUnICd1bnNhZmUtZXZhbCdcIj5cbiAgICAgICAgICAgICAgICA8bGluayByZWw9XCJzdHlsZXNoZWV0XCIgaHJlZj1cIi4vY3NzL3N0eWxlLmNzc1wiIHR5cGU9XCJ0ZXh0L2Nzc1wiPlxuICAgICAgICAgICAgICAgIDxsaW5rIHJlbD1cInN0eWxlc2hlZXRcIiBocmVmPVwiLi9jc3MvZGFyay5jc3NcIiB0eXBlPVwidGV4dC9jc3NcIiBpZD1cInN0eWxlLWxpbmtcIj5cbiAgICAgICAgICAgICAgPC9oZWFkPlxuICAgICAgICAgICAgICA8Ym9keT5cbiAgICAgICAgICAgICAgICA8ZGl2IGlkPVwibWFpblwiIHRhYmluZGV4PVwiMFwiPjwvZGl2PlxuICAgICAgICAgICAgICA8L2JvZHk+XG4gICAgICAgICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICAgICAgICAgS2FjaGVsID0gcmVxdWlyZShcIi4vI3t0eXBlfS5qc1wiKTtcbiAgICAgICAgICAgICAgICBuZXcgS2FjaGVsKHt9KTtcbiAgICAgICAgICAgICAgPC9zY3JpcHQ+XG4gICAgICAgICAgICA8L2h0bWw+XG4gICAgICAgIFwiXCJcIlxuICAgICAgICBcbiAgICAgICAgXCJkYXRhOnRleHQvaHRtbDtjaGFyc2V0PXV0Zi04LFwiICsgZW5jb2RlVVJJIGh0bWxcbiAgICAgICAgXG5tb2R1bGUuZXhwb3J0cyA9IEthY2hlbFNldFxuIl19
//# sourceURL=../coffee/kachelset.coffee