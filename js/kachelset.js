// koffee 1.4.0

/*
000   000   0000000    0000000  000   000  00000000  000       0000000  00000000  000000000
000  000   000   000  000       000   000  000       000      000       000          000   
0000000    000000000  000       000000000  0000000   000      0000000   0000000      000   
000  000   000   000  000       000   000  000       000           000  000          000   
000   000  000   000   0000000  000   000  00000000  0000000  0000000   00000000     000
 */
var Bounds, KachelSet, electron, empty, klog, post, prefs, ref, slash, valid,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    indexOf = [].indexOf;

ref = require('kxk'), post = ref.post, slash = ref.slash, prefs = ref.prefs, empty = ref.empty, valid = ref.valid, klog = ref.klog;

Bounds = require('./bounds');

electron = require('electron');

KachelSet = (function() {
    function KachelSet(mainId) {
        this.onKachelLoad = bind(this.onKachelLoad, this);
        this.didLoad = bind(this.didLoad, this);
        this.onStoreSet = bind(this.onStoreSet, this);
        this.onRestoreSet = bind(this.onRestoreSet, this);
        this.onToggleSet = bind(this.onToggleSet, this);
        this.onNewSet = bind(this.onNewSet, this);
        this.onKachelFocus = bind(this.onKachelFocus, this);
        this.onKachelClose = bind(this.onKachelClose, this);
        this.onNewKachel = bind(this.onNewKachel, this);
        var obj;
        this.switching = false;
        this.focusKachel = null;
        this.hoverKachel = null;
        this.dict = (
            obj = {},
            obj["" + mainId] = 'main',
            obj
        );
        this.wids = {
            main: mainId
        };
        this.set = [];
        this.sid = '';
        post.on('kachelLoad', this.onKachelLoad);
        post.on('toggleSet', this.onToggleSet);
        post.on('restoreSet', this.onRestoreSet);
        post.on('storeSet', this.onStoreSet);
        post.on('newSet', this.onNewSet);
        post.on('kachelFocus', this.onKachelFocus);
        post.on('newKachel', this.onNewKachel);
    }

    KachelSet.prototype.onNewKachel = function(kachelId) {
        var kachelSize, type, win;
        if (kachelId === 'main') {
            return;
        }
        if (this.wids[kachelId]) {
            win = this.win(kachelId);
            if (kachelId === 'default') {
                win.close();
                return;
            }
            win.show();
            if (indexOf.call(this.set, kachelId) < 0) {
                this.set.push(kachelId);
                prefs.set("kacheln" + this.sid, this.set);
                prefs.save();
            }
            return;
        }
        kachelSize = 2;
        type = kachelId;
        if (kachelId.startsWith('start')) {
            type = 'start';
            kachelSize = 2;
        } else if (kachelId.endsWith('.app') || kachelId.endsWith('.exe')) {
            if (slash.base(kachelId) === 'konrad') {
                type = 'konrad';
                kachelSize = 4;
            } else {
                type = 'appl';
                kachelSize = 2;
            }
        } else if (kachelId.startsWith('/') || kachelId[1] === ':') {
            type = 'folder';
            kachelSize = 2;
        }
        switch (type) {
            case 'saver':
                kachelSize = 0;
                break;
            case 'sysdish':
            case 'sysinfo':
            case 'clock':
            case 'default':
                kachelSize = 2;
        }
        win = new electron.BrowserWindow({
            movable: true,
            transparent: true,
            autoHideMenuBar: true,
            acceptFirstMouse: true,
            hasShadow: false,
            frame: false,
            resizable: false,
            maximizable: false,
            minimizable: false,
            fullscreen: false,
            show: false,
            fullscreenenable: false,
            backgroundColor: '#181818',
            width: Bounds.kachelSizes[kachelSize],
            height: Bounds.kachelSizes[kachelSize],
            webPreferences: {
                nodeIntegration: true
            }
        });
        win.loadURL(KachelSet.html(type), {
            baseURLForDataURL: "file://" + __dirname + "/../js/index.html"
        });
        win.kachelId = kachelId;
        win.webContents.on('dom-ready', (function(id) {
            return function(event) {
                var wid;
                wid = event.sender.id;
                post.toWin(wid, 'initKachel', id);
                electron.BrowserWindow.fromId(wid).show();
                return Bounds.update();
            };
        })(kachelId));
        win.on('close', this.onKachelClose);
        win.setHasShadow(false);
        return win;
    };

    KachelSet.prototype.onKachelClose = function(event) {
        var kachel;
        kachel = event.sender;
        if (this.hoverKachel === kachel.id) {
            this.hoverKachel = null;
        }
        Bounds.remove(kachel);
        this.remove(kachel);
        return setTimeout((function() {
            return post.emit('bounds', 'dirty');
        }), 200);
    };

    KachelSet.prototype.onKachelFocus = function(winId) {
        if (this.dict[winId] !== 'main') {
            return this.focusKachel = electron.BrowserWindow.fromId(winId);
        }
    };

    KachelSet.prototype.onNewSet = function() {
        var sets;
        sets = prefs.get('sets', ['']);
        sets.push("" + sets.length);
        prefs.set('sets', sets);
        return this.load(sets.slice(-1)[0]);
    };

    KachelSet.prototype.onToggleSet = function() {
        var index, sets;
        if (this.switching) {
            return;
        }
        sets = prefs.get('sets', ['']);
        index = Math.max(0, sets.indexOf(this.sid));
        if (index >= sets.length - 1) {
            index = -1;
        }
        return this.load(sets[index + 1]);
    };

    KachelSet.prototype.onRestoreSet = function() {
        return this.load(this.sid, '_save');
    };

    KachelSet.prototype.onStoreSet = function() {
        prefs.set("kacheln" + this.sid + "_save", this.set);
        return prefs.save();
    };

    KachelSet.prototype.load = function(newSid, postfix) {
        var i, j, k, kachelId, l, len, len1, len2, len3, newSet, oldKacheln, ref1, ref2, showIds, updateIds;
        if (postfix == null) {
            postfix = '';
        }
        if (this.switching) {
            return;
        }
        this.switching = true;
        if (newSid != null) {
            newSid;
        } else {
            newSid = prefs.get('set', '');
        }
        if (empty(postfix)) {
            oldKacheln = prefs.get("kacheln" + this.sid, []);
        }
        this.kachelIds = [];
        updateIds = ['main'];
        showIds = [];
        newSet = prefs.get("kacheln" + newSid + postfix, []);
        ref1 = newSet != null ? newSet : [];
        for (i = 0, len = ref1.length; i < len; i++) {
            kachelId = ref1[i];
            if (kachelId !== 'main') {
                if (this.set.indexOf(kachelId) >= 0) {
                    updateIds.push(kachelId);
                    this.set.splice(this.set.indexOf(kachelId), 1);
                } else {
                    showIds.push(kachelId);
                    if (!this.wids[kachelId]) {
                        this.kachelIds.push(kachelId);
                    }
                }
            }
        }
        if (this.set.length) {
            ref2 = this.set.slice();
            for (j = 0, len1 = ref2.length; j < len1; j++) {
                kachelId = ref2[j];
                if (kachelId !== 'main' && kachelId !== 'null' && kachelId !== null) {
                    if (this.wids[kachelId]) {
                        this.win(kachelId).hide();
                    } else {
                        klog('no wid for', kachelId);
                    }
                }
            }
        }
        if (empty(postfix)) {
            prefs.set("kacheln" + this.sid, oldKacheln);
        }
        this.sid = newSid;
        prefs.set('set', this.sid);
        this.set = newSet;
        if (valid(postfix)) {
            prefs.set("kacheln" + newSid, this.set);
        }
        for (k = 0, len2 = updateIds.length; k < len2; k++) {
            kachelId = updateIds[k];
            post.emit('updateBounds', kachelId);
        }
        for (l = 0, len3 = showIds.length; l < len3; l++) {
            kachelId = showIds[l];
            this.onNewKachel(kachelId);
        }
        if (this.kachelIds.length === 0) {
            return this.didLoad();
        }
    };

    KachelSet.prototype.didLoad = function() {
        this.switching = false;
        this.win('main').focus();
        this.focusKachel = this.win('main');
        return post.emit('setLoaded');
    };

    KachelSet.prototype.onKachelLoad = function(wid, kachelId) {
        var index;
        if (indexOf.call(this.set, kachelId) < 0) {
            this.set.push(kachelId);
            prefs.set("kacheln" + this.sid, this.set);
            prefs.save();
        }
        this.dict[wid] = kachelId;
        this.wids[kachelId] = wid;
        if (this.kachelIds) {
            index = this.kachelIds.indexOf(kachelId);
            if (index >= 0) {
                this.kachelIds.splice(index, 1);
                if (this.kachelIds.length === 0) {
                    return this.didLoad();
                }
            }
        }
    };

    KachelSet.prototype.remove = function(kachel) {
        var kachelId;
        if (this.focusKachel === kachel) {
            this.focusKachel = null;
        }
        if (kachelId = this.dict[kachel.id]) {
            if (this.set.indexOf(kachelId) >= 0) {
                this.set.splice(this.set.indexOf(kachelId), 1);
            }
            delete this.wids[kachelId];
            delete this.dict[kachel.id];
            return prefs.set("kacheln" + this.sid, this.set);
        }
    };

    KachelSet.prototype.win = function(kachelId) {
        return electron.BrowserWindow.fromId(this.wids[kachelId]);
    };

    KachelSet.html = function(type) {
        var html;
        html = "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"Content-Security-Policy\" content=\"default-src * 'unsafe-inline' 'unsafe-eval'\">\n    <link rel=\"stylesheet\" href=\"./css/style.css\" type=\"text/css\">\n    <link rel=\"stylesheet\" href=\"./css/dark.css\" type=\"text/css\" id=\"style-link\">\n  </head>\n  <body>\n    <div id=\"main\" tabindex=\"0\"></div>\n  </body>\n  <script>\n    Kachel = require(\"./" + type + ".js\");\n    new Kachel({});\n  </script>\n</html>";
        return "data:text/html;charset=utf-8," + encodeURI(html);
    };

    return KachelSet;

})();

module.exports = KachelSet;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/kachelset.coffee